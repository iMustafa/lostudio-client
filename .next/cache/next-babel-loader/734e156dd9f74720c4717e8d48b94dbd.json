{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridLayout from 'react-grid-layout';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Drawer from '@material-ui/core/Drawer';\nimport DashboardActions from '../../../actions/dashboard.actions';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu';\nimport DashboardSettings from '../../../components/dashboards/settings/dashboard-settings';\nimport { useRouter } from 'next/router';\nimport { decideWidgetSettings, decideWidget } from '../../../helpers/decide-widgets';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500\n    },\n    fullList: {\n      width: 'auto'\n    },\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: '#fff'\n    }\n  };\n});\n\nvar EditDashboard = function EditDashboard() {\n  var classes = useStyles();\n  var router = useRouter();\n\n  var _useState = useState(router.query.id),\n      id = _useState[0],\n      setId = _useState[1];\n\n  var _useState2 = useState({\n    right: false,\n    addWidget: false,\n    settings: false\n  }),\n      menuState = _useState2[0],\n      setMenuState = _useState2[1];\n\n  var _useState3 = useState([]),\n      layout = _useState3[0],\n      setLayout = _useState3[1];\n\n  var _useState4 = useState(null),\n      addType = _useState4[0],\n      setAddType = _useState4[1];\n\n  var _useState5 = useState([]),\n      WidgetSettings = _useState5[0],\n      setWidgetSettings = _useState5[1];\n\n  var _useState6 = useState([]),\n      SubDashboards = _useState6[0],\n      setSubDashboards = _useState6[1];\n\n  var _useState7 = useState(0),\n      refresh = _useState7[0],\n      setRefresh = _useState7[1];\n\n  var _useState8 = useState(true),\n      isLoading = _useState8[0],\n      setIsLoading = _useState8[1];\n\n  useEffect(function () {\n    var getProps = function getProps() {\n      var dashboard, $SubDashboards, $WidgetSettings;\n      return _regeneratorRuntime.async(function getProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setIsLoading(true);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(DashboardActions.getDashboardById(id));\n\n            case 4:\n              dashboard = _context.sent;\n\n              if (dashboard.isSub) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(DashboardActions.getSubDashboards({\n                id: id\n              }));\n\n            case 8:\n              $SubDashboards = _context.sent;\n              setSubDashboards($SubDashboards);\n\n            case 10:\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(DashboardActions.getWidgetSettings({\n                id: id\n              }));\n\n            case 12:\n              $WidgetSettings = _context.sent;\n              setLayout($WidgetSettings);\n              setWidgetSettings($WidgetSettings);\n              setIsLoading(false);\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 18]], Promise);\n    };\n\n    getProps();\n  }, [id, refresh]);\n\n  var onLayoutChange = function onLayoutChange($event) {\n    var layouts;\n    return _regeneratorRuntime.async(function onLayoutChange$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            layouts = layout.map(function (item) {\n              var $eventItem = $event.filter(function ($item) {\n                return $item.i == item.layout.i;\n              })[0];\n              return _objectSpread({}, item, {\n                layout: $eventItem\n              });\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(Promise.all(layouts.map(function (item) {\n              return WidgetSettingsActions.updateWidgetSettings(item.id, item);\n            })));\n\n          case 4:\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  var toggleDrawer = function toggleDrawer(side, open) {\n    return function (event) {\n      if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n      setMenuState(_objectSpread({}, menuState, _defineProperty({}, side, open)));\n    };\n  };\n\n  var addPredefinedWidget = function addPredefinedWidget(widget, _) {\n    var $widget, saveWidget;\n    return _regeneratorRuntime.async(function addPredefinedWidget$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            $widget = _objectSpread({}, widget);\n            delete $widget.id;\n            delete $widget.icon;\n            $widget.layout.i = uuidv4();\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.createWidgetSettings($widget));\n\n          case 7:\n            saveWidget = _context3.sent;\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(DashboardActions.addWidgetToDashboard(id, saveWidget.id));\n\n          case 10:\n            setLayout([].concat(_toConsumableArray(layout), [{\n              layout: $widget.layout,\n              type: $widget.type\n            }]));\n            _context3.next = 16;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  var onWidgetAdd = function onWidgetAdd(config) {\n    var isFormControl,\n        widgetSettingsId,\n        layoutItem,\n        saveWidget,\n        linkWidget,\n        _saveWidget,\n        _linkWidget,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.async(function onWidgetAdd$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            isFormControl = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n            widgetSettingsId = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : null;\n            _context4.prev = 2;\n            layoutItem = _objectSpread({\n              layout: {\n                i: uuidv4(),\n                x: 0,\n                y: 0,\n                w: 6,\n                h: 11,\n                maxW: 16,\n                isDraggable: true,\n                isResizable: true\n              }\n            }, config);\n\n            if (!widgetSettingsId) {\n              _context4.next = 16;\n              break;\n            }\n\n            delete layoutItem.layout;\n            setIsLoading(true);\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.createWidgetSettings(layoutItem));\n\n          case 9:\n            saveWidget = _context4.sent;\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.createSubWidget(widgetSettingsId, saveWidget.id));\n\n          case 12:\n            linkWidget = _context4.sent;\n            setIsLoading(false);\n            _context4.next = 26;\n            break;\n\n          case 16:\n            setIsLoading(true);\n            _context4.next = 19;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.createWidgetSettings(layoutItem));\n\n          case 19:\n            _saveWidget = _context4.sent;\n            _context4.next = 22;\n            return _regeneratorRuntime.awrap(DashboardActions.addWidgetToDashboard(id, _saveWidget.id));\n\n          case 22:\n            _linkWidget = _context4.sent;\n            layoutItem.id = _saveWidget.id;\n            setLayout([].concat(_toConsumableArray(layout), [layoutItem]));\n            setIsLoading(false);\n\n          case 26:\n            _context4.next = 31;\n            break;\n\n          case 28:\n            _context4.prev = 28;\n            _context4.t0 = _context4[\"catch\"](2);\n            console.log(_context4.t0);\n\n          case 31:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[2, 28]], Promise);\n  };\n\n  var addWidget = function addWidget(type, _) {\n    return _regeneratorRuntime.async(function addWidget$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            setAddType(type);\n            setMenuState(_objectSpread({}, menuState, {\n              addWidget: true,\n              right: false\n            }));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var sideList = function sideList() {\n    return __jsx(\"div\", {\n      className: classes.list,\n      role: \"presentation\"\n    }, __jsx(WidgetSidemenu, {\n      onWidgetClick: addWidget,\n      addPredefinedWidget: addPredefinedWidget,\n      widgetSettings: Object.values(WidgetSettings)\n    }));\n  };\n\n  var renderWidgets = function renderWidgets() {\n    return layout.map(function (item, i) {\n      return __jsx(\"div\", {\n        key: item.layout.i\n      }, decideWidget(item));\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Backdrop, {\n    className: classes.backdrop,\n    open: isLoading\n  }, __jsx(CircularProgress, {\n    color: \"inherit\"\n  })), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false)\n  }, sideList()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.addWidget,\n    onClose: toggleDrawer('addWidget', false)\n  }, decideWidgetSettings(addType, onWidgetAdd)), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.settings,\n    onClose: toggleDrawer('settings', false)\n  }, __jsx(DashboardSettings, {\n    id: id,\n    refresh: refresh,\n    setRefresh: setRefresh\n  })), __jsx(Card, {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    }\n  }, __jsx(IconButton, {\n    onClick: function onClick() {\n      router.back();\n    },\n    \"aria-label\": \"back\",\n    size: \"medium\",\n    style: {\n      outline: 'none'\n    }\n  }, __jsx(ArrowLeft, {\n    fontSize: \"default\"\n  })), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flex: 1,\n      overflowX: 'scroll',\n      alignItems: 'center'\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      setId(router.queFry.id);\n    },\n    style: {\n      marginLeft: 10\n    }\n  }, \"Main\"), SubDashboards.map(function (subDashboard) {\n    return __jsx(\"div\", {\n      key: subDashboard.subDashboardId\n    }, __jsx(Button, {\n      onClick: function onClick() {\n        setId(subDashboard.subDashboardId);\n      },\n      style: {\n        marginLeft: 10\n      }\n    }, __jsx(Typography, {\n      noWrap: true,\n      style: {\n        fontWeight: 500,\n        fontSize: '0.875rem',\n        color: 'rgba(0, 0, 0, 0.87)'\n      }\n    }, subDashboard.subDashboard.title)));\n  })), __jsx(\"div\", {\n    style: {\n      justifySelf: 'flex-end',\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'flex-end',\n      paddingRight: '10px'\n    }\n  }, __jsx(Button, {\n    style: {\n      outline: 'none'\n    },\n    size: \"small\",\n    startIcon: __jsx(SaveIcon, null)\n  }, \"Save\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('right', true),\n    startIcon: __jsx(DashboardIcon, null)\n  }, \"Widgets\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('settings', true),\n    startIcon: __jsx(SettingsIcon, null)\n  }, \"Settings\"))), __jsx(\"div\", {\n    style: {\n      paddingBottom: '15px'\n    }\n  }, __jsx(GridLayout, {\n    className: \"layout\",\n    cols: 16,\n    rowHeight: 30,\n    width: 1920,\n    layout: layout.map(function (item) {\n      return item.layout;\n    }),\n    onLayoutChange: onLayoutChange\n  }, renderWidgets())));\n}; // EditDashboard.getInitialProps = async (req) => {\n//   const Authorization = Cookies(req).id\n//   const { id } = req.query\n//   const WidgetSettings = await DashboardActions.getWidgetSettings({ Authorization, id })\n//   const SubDashboards = await DashboardActions.getSubDashboards({ Authorization, id })\n//   return { WidgetSettings, SubDashboards }\n// }\n\n\nexport default EditDashboard;","map":null,"metadata":{},"sourceType":"module"}