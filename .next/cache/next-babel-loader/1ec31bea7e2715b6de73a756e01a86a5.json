{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nvar useStyles = makeStyles({\n  measureConditionFieldTitle: {\n    fontSize: 12,\n    fontWeight: 'bold'\n  }\n});\n\nvar MeasureConditionItem = function MeasureConditionItem(_ref) {\n  var widget = _ref.widget,\n      measureCondition = _ref.measureCondition,\n      key = _ref.key,\n      setRefresh = _ref.setRefresh,\n      refresh = _ref.refresh;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      showSpinner = _useState[0],\n      setShowSpinner = _useState[1];\n\n  var removeMeasureCondition = function removeMeasureCondition() {\n    var $measureCondition;\n    return _regeneratorRuntime.async(function removeMeasureCondition$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setShowSpinner(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.deleteWidgetSettingsMeasureConditions(widget.id, measureCondition.id));\n\n          case 4:\n            $measureCondition = _context.sent;\n            setShowSpinner(false);\n            setRefresh(refresh + 1);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  return __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    },\n    key: key\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    className: classes.measureConditionFieldTitle\n  }, \"Field\"), __jsx(Typography, null, measureCondition.field)), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    className: classes.measureConditionFieldTitle\n  }, \"Expression\"), __jsx(Typography, null, measureCondition.expression)), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    className: classes.measureConditionFieldTitle\n  }, \"Color\"), __jsx(Typography, null, measureCondition.color))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    }\n  }, __jsx(ArrowUpwardIcon, null), __jsx(Typography, null, measureCondition.minValue)), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    }\n  }, __jsx(ArrowDownwardIcon, null), __jsx(Typography, null, measureCondition.maxValue))), showSpinner ? __jsx(CircularProgress, null) : __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: removeMeasureCondition\n  }, __jsx(DeleteIcon, {\n    style: {\n      color: '#F00'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Delete\"))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true\n  }, __jsx(EditIcon, {\n    style: {\n      color: '#3F51B5'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Edit\")))));\n};\n\nexport default MeasureConditionItem;","map":null,"metadata":{},"sourceType":"module"}