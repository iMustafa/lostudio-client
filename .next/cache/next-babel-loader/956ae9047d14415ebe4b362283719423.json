{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport { ConnectionSettings } from '../helpers';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500,\n      paddingLeft: \"15px\",\n      paddingRight: \"15px\",\n      paddingTop: \"15px\"\n    },\n    h2: {\n      width: '100%',\n      textAlign: 'center',\n      borderBottom: '1px solid #000',\n      lineHeight: '0.1em',\n      marginTop: \"20px\",\n      marginBottom: \"20px\",\n      fontFamily: 'Roboto',\n      fontSize: '13px',\n      color: \"#3F51B5\"\n    },\n    span: {\n      background: '#fff',\n      padding: '0 10px'\n    },\n    formControl: {\n      marginTop: \"15px\"\n    }\n  };\n});\n\nvar TableWidgetSettingsPanel = function TableWidgetSettingsPanel(_ref) {\n  var widget = _ref.widget,\n      handleSettingsClose = _ref.handleSettingsClose,\n      isAdding = _ref.isAdding,\n      onWidgetAdd = _ref.onWidgetAdd;\n  var classes = useStyles();\n\n  var _useState = useState(!isAdding ? widget.config.connectionMethod : 'database'),\n      connectionMethod = _useState[0],\n      setConnectionMethod = _useState[1];\n\n  var _useState2 = useState(!isAdding ? widget.config.docId : ''),\n      doc = _useState2[0],\n      setDoc = _useState2[1];\n\n  var _useState3 = useState(!isAdding ? widget.title : ''),\n      title = _useState3[0],\n      setTitle = _useState3[1];\n\n  var _useState4 = useState(!isAdding ? widget.dataSourceId : ''),\n      datasource = _useState4[0],\n      setDatasource = _useState4[1];\n\n  var _useState5 = useState(!isAdding ? widget.config.fields : []),\n      fields = _useState5[0],\n      setFields = _useState5[1];\n\n  var _useState6 = useState(!isAdding ? widget.config.primaryKey : null),\n      primaryKey = _useState6[0],\n      setPrimaryKey = _useState6[1];\n\n  var _useState7 = useState(isAdding ? false : widget.config.isEditable),\n      isEditable = _useState7[0],\n      setIsEditable = _useState7[1];\n\n  var _useState8 = useState(isAdding ? false : widget.config.isDeletable),\n      isDeletable = _useState8[0],\n      setIsDeletable = _useState8[1];\n\n  var _useState9 = useState(isAdding ? false : widget.config.isAddable),\n      isAddable = _useState9[0],\n      setIsAddable = _useState9[1];\n\n  var _useState10 = useState(isAdding ? '' : widget.config.url),\n      url = _useState10[0],\n      setURL = _useState10[1];\n\n  var _useState11 = useState(isAdding ? {} : widget.config.headers || {}),\n      headers = _useState11[0],\n      setHeaders = _useState11[1];\n\n  var _useState12 = useState(isAdding ? '' : widget.config.method),\n      method = _useState12[0],\n      setMethod = _useState12[1];\n\n  var _useState13 = useState(isAdding ? {} : widget.config.body || {}),\n      body = _useState13[0],\n      setBody = _useState13[1];\n\n  var _useState14 = useState(isAdding ? {} : widget.config.query || {}),\n      query = _useState14[0],\n      setQuery = _useState14[1];\n\n  var saveConfigSettings = function saveConfigSettings() {\n    var data, update;\n    return _regeneratorRuntime.async(function saveConfigSettings$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            data = {\n              dataSourceId: datasource,\n              title: title,\n              config: _defineProperty({\n                docId: doc,\n                fields: fields,\n                type: 'simple',\n                func: 'find',\n                query: {},\n                isEditable: isEditable,\n                isDeletable: isDeletable,\n                isAddable: isAddable,\n                primaryKey: primaryKey,\n                connectionMethod: connectionMethod,\n                url: url,\n                headers: headers,\n                method: method,\n                body: body\n              }, \"query\", query),\n              type: 'Table'\n            };\n            console.log(data);\n\n            if (!isAdding) {\n              _context.next = 7;\n              break;\n            }\n\n            onWidgetAdd(data);\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.updateWidgetSettings(widget.id, data));\n\n          case 9:\n            update = _context.sent;\n            handleSettingsClose(update);\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  return __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"title\"\n  }, \"Title\"), __jsx(Input, {\n    value: title,\n    onChange: function onChange(event) {\n      setTitle(event.target.value);\n    }\n  })), __jsx(\"div\", {\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isEditable,\n      onChange: function onChange(event) {\n        setIsEditable(event.target.checked);\n      }\n    }),\n    label: \"Allow Edit?\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isDeletable,\n      onChange: function onChange(event) {\n        setIsDeletable(event.target.checked);\n      }\n    }),\n    label: \"Allow Delete?\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isAddable,\n      onChange: function onChange(event) {\n        setIsAddable(event.target.checked);\n      }\n    }),\n    label: \"Allow Add?\"\n  })), __jsx(ConnectionSettings, {\n    isAdding: isAdding,\n    connectionMethod: connectionMethod,\n    setConnectionMethod: setConnectionMethod,\n    setDoc: setDoc,\n    setDatasource: setDatasource,\n    setFields: setFields,\n    doc: doc,\n    datasource: datasource,\n    fields: fields,\n    primaryKey: primaryKey,\n    setPrimaryKey: setPrimaryKey,\n    url: url,\n    setURL: setURL,\n    headers: headers,\n    setHeaders: setHeaders,\n    method: method,\n    setMethod: setMethod,\n    body: body,\n    setBody: setBody,\n    query: query,\n    setQuery: setQuery\n  }), __jsx(Button, {\n    fullWidth: true,\n    className: classes.formControl,\n    onClick: saveConfigSettings\n  }, isAdding ? 'Add' : 'Save'));\n};\n\nexport default TableWidgetSettingsPanel;","map":null,"metadata":{},"sourceType":"module"}