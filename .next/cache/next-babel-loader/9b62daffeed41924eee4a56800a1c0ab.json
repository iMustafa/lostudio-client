{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nconst {\n  API_URL\n} = config().publicRuntimeConfig;\nexport default class DatasourceActions {\n  // TODO\n  static async createDatasource(data) {\n    return axios.post(`${API_URL}/DataSources`, data, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async updateDatasource(id, data) {\n    return axios.patch(`${API_URL}/DataSources/${id}`, data, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getDatasources(query) {\n    console.log('getting datasources');\n    return axios.get(`${API_URL}/DataSources`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => {\n      console.log('> RES', res);\n      return res.data;\n    }).catch(err => err);\n  } // TODO\n\n\n  static async getUserDatasources(id, query) {\n    return axios.get(`${API_URL}/users/${id}/dataSrouces`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      },\n      params: _objectSpread({}, query)\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getDatasourceById(id) {\n    return axios.get(`${API_URL}/DataSources/${id}`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async removeDatasource(id) {\n    return axios.delete(`${API_URL}/DataSources/${id}`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async queryDatasource(query) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  }\n\n}","map":{"version":3,"sources":["F:/Projects/LoStudio/client/actions/datasource.actions.ts"],"names":["axios","config","Cookie","API_URL","publicRuntimeConfig","DatasourceActions","createDatasource","data","post","headers","Authorization","get","then","res","catch","err","response","updateDatasource","id","patch","getDatasources","query","console","log","getUserDatasources","params","getDatasourceById","removeDatasource","delete","queryDatasource"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport config from 'next/config'\r\nimport Cookie from 'js-cookie'\r\nimport User from '../types/users.types'\r\nimport Dashboard from '../types/dashboard.types'\r\nimport Datasource from '../types/datasource.types'\r\nimport Widget from '../types/widget.types'\r\nimport WidgetSettings from '../types/widgetSettings.type'\r\n\r\nconst { API_URL } = config().publicRuntimeConfig\r\n\r\nexport default class DatasourceActions {\r\n\r\n  // TODO\r\n  public static async createDatasource(data: Datasource): Promise<Datasource> {\r\n    return axios\r\n      .post(`${API_URL}/DataSources`, data, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async updateDatasource(id: string, data: Datasource): Promise<Datasource> {\r\n    return axios\r\n      .patch(`${API_URL}/DataSources/${id}`, data, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async getDatasources(query?: any): Promise<Array<Datasource>> {\r\n    console.log('getting datasources')\r\n\r\n    return axios\r\n      .get(`${API_URL}/DataSources`, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => {\r\n        console.log('> RES', res)\r\n        return res.data\r\n      })\r\n      .catch(err => err)\r\n  }\r\n\r\n  // TODO\r\n  public static async getUserDatasources(id: string, query: any): Promise<Array<Datasource>> {\r\n    return axios\r\n      .get(`${API_URL}/users/${id}/dataSrouces`, { headers: { Authorization: Cookie.get('id') }, params: { ...query } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async getDatasourceById(id: string): Promise<Datasource> {\r\n    return axios\r\n      .get(`${API_URL}/DataSources/${id}`, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async removeDatasource(id: string): Promise<Datasource> {\r\n    return axios\r\n      .delete(`${API_URL}/DataSources/${id}`, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async queryDatasource(query: string): Promise<any> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}