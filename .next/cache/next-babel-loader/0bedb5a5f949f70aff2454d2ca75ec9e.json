{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DashboardActions from '../../../actions/dashboard.actions';\n\nvar SubDashboardSettings = function SubDashboardSettings(_ref) {\n  var id = _ref.id,\n      refresh = _ref.refresh,\n      setRefresh = _ref.setRefresh;\n\n  var _useState = useState([]),\n      subDashboards = _useState[0],\n      setSubDashboards = _useState[1];\n\n  var _useState2 = useState(true),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(0),\n      update = _useState3[0],\n      setUpdate = _useState3[1];\n\n  var _useState4 = useState(false),\n      isShowingAddFields = _useState4[0],\n      setIsShowingAddFields = _useState4[1];\n\n  var _useState5 = useState(false),\n      isAdding = _useState5[0],\n      setIsAdding = _useState5[1];\n\n  var _useState6 = useState({\n    title: '',\n    description: '',\n    isSub: true\n  }),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  useEffect(function () {\n    var getSubDashboards = function getSubDashboards() {\n      var $subDashBoards;\n      return _regeneratorRuntime.async(function getSubDashboards$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(DashboardActions.getSubDashboards({\n                id: id\n              }));\n\n            case 3:\n              $subDashBoards = _context.sent;\n              setSubDashboards($subDashBoards);\n              setIsLoading(false);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    getSubDashboards();\n  }, [update]);\n\n  var addNewDashboard = function addNewDashboard() {\n    var subDashboard, linkDashboard;\n    return _regeneratorRuntime.async(function addNewDashboard$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            setIsAdding(true);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(DashboardActions.createDashboard({\n              dashboard: state\n            }));\n\n          case 4:\n            subDashboard = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(DashboardActions.linkSubDashboard({\n              subDashboardId: subDashboard.id,\n              id: id\n            }));\n\n          case 7:\n            linkDashboard = _context2.sent;\n            setUpdate(update + 1);\n            setIsShowingAddFields(false);\n            setIsAdding(false);\n            setRefresh(refresh + 1);\n            _context2.next = 17;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n\n  var deleteSubDashboard = function deleteSubDashboard(subDashboardId) {\n    var subDashboard;\n    return _regeneratorRuntime.async(function deleteSubDashboard$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(DashboardActions.unLinkSubDashboard({\n              id: id,\n              subDashboardId: subDashboardId\n            }));\n\n          case 3:\n            subDashboard = _context3.sent;\n            setUpdate(update + 1);\n            setRefresh(refresh + 1);\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var renderSubDashboardCard = function renderSubDashboardCard(subDashboard) {\n    return __jsx(Card, {\n      variant: \"outlined\",\n      key: subDashboard.id,\n      style: {\n        marginTop: 15\n      }\n    }, __jsx(CardHeader, {\n      title: subDashboard.subDashboard.title,\n      subheader: subDashboard.subDashboard.createdAt\n    }), __jsx(CardContent, null, __jsx(Typography, null, subDashboard.subDashboard.description)), __jsx(CardActions, null, __jsx(Button, {\n      onClick: function onClick() {\n        deleteSubDashboard(subDashboard.id);\n      }\n    }, \"Delete\")));\n  };\n\n  return __jsx(\"div\", null, isShowingAddFields ? __jsx(Card, {\n    variant: \"outlined\"\n  }, __jsx(CardContent, null, __jsx(TextField, {\n    label: \"Title\",\n    fullWidth: true,\n    onChange: function onChange(event) {\n      setState(_objectSpread({}, state, {\n        title: event.target.value\n      }));\n    }\n  }), __jsx(TextField, {\n    style: {\n      marginTop: 10\n    },\n    fullWidth: true,\n    label: \"Description\",\n    multiline: true,\n    rows: 2,\n    rowsMax: 4,\n    onChange: function onChange(event) {\n      setState(_objectSpread({}, state, {\n        description: event.target.value\n      }));\n    }\n  })), isAdding ? __jsx(CardActions, null, __jsx(CircularProgress, null)) : __jsx(CardActions, null, __jsx(Button, {\n    onClick: addNewDashboard\n  }, \"Add\"), __jsx(Button, {\n    onClick: function onClick() {\n      setIsShowingAddFields(false);\n    }\n  }, \"Cancel\"))) : __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsShowingAddFields(true);\n    }\n  }, \"Add New Page\"), isLoading ? __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: 15\n    }\n  }, __jsx(CircularProgress, null)) : subDashboards.map(function (subDashboard) {\n    return renderSubDashboardCard(subDashboard);\n  }));\n};\n\nexport default SubDashboardSettings;","map":null,"metadata":{},"sourceType":"module"}