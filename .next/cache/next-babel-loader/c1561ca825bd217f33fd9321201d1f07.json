{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nvar API_URL = config().publicRuntimeConfig.API_URL;\n\nvar DatasourceActions = /*#__PURE__*/function () {\n  function DatasourceActions() {\n    _classCallCheck(this, DatasourceActions);\n  }\n\n  _createClass(DatasourceActions, null, [{\n    key: \"createDatasource\",\n    value: function createDatasource(data) {\n      return _regeneratorRuntime.async(function createDatasource$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", axios.post(\"\".concat(API_URL, \"/DataSources\"), data, {\n                headers: {\n                  Authorization: Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateDatasource\",\n    value: function updateDatasource(id, data) {\n      return _regeneratorRuntime.async(function updateDatasource$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", axios.patch(\"\".concat(API_URL, \"/DataSources/\").concat(id), data, {\n                headers: {\n                  Authorization: Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getDatasources\",\n    value: function getDatasources(_ref) {\n      var Authorization, query;\n      return _regeneratorRuntime.async(function getDatasources$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              Authorization = _ref.Authorization, query = _ref.query;\n              return _context3.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/DataSources\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getUserDatasources\",\n    value: function getUserDatasources(id, query) {\n      return _regeneratorRuntime.async(function getUserDatasources$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/users/\").concat(id, \"/dataSrouces\"), {\n                headers: {\n                  Authorization: Cookie.get('id')\n                },\n                params: _objectSpread({}, query)\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getDatasourceById\",\n    value: function getDatasourceById(id) {\n      return _regeneratorRuntime.async(function getDatasourceById$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/DataSources/\").concat(id), {\n                headers: {\n                  Authorization: Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"removeDatasource\",\n    value: function removeDatasource(id) {\n      return _regeneratorRuntime.async(function removeDatasource$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", axios[\"delete\"](\"\".concat(API_URL, \"/DataSources/\").concat(id), {\n                headers: {\n                  Authorization: Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getDocList\",\n    value: function getDocList(id) {\n      return _regeneratorRuntime.async(function getDocList$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/DataSources/\").concat(id, \"/doc-list\"), {\n                headers: {\n                  Authorization: Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getFieldList\",\n    value: function getFieldList(id, docId) {\n      return _regeneratorRuntime.async(function getFieldList$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/DataSources/\").concat(id, \"/field-list\"), {\n                headers: {\n                  Authorization: Cookie.get('id')\n                },\n                params: {\n                  docId: docId\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"queryDatasource\",\n    value: function queryDatasource(query) {\n      return _regeneratorRuntime.async(function queryDatasource$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return DatasourceActions;\n}();\n\nexport { DatasourceActions as default };","map":null,"metadata":{},"sourceType":"module"}