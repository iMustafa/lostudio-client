{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nconst useStyles = makeStyles(theme => ({}));\n\nconst AutoCompleteWidget = ({\n  widgetId\n}) => {\n  const classes = useStyles();\n  const {\n    0: widget,\n    1: setWidget\n  } = useState({\n    properties: {},\n    config: {\n      fields: []\n    }\n  });\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: menuState,\n    1: setMenuState\n  } = useState({\n    right: false\n  });\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId);\n        const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId);\n        setWidget($widget);\n        setData($data);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getData();\n  }, []);\n  return __jsx(Autocomplete, {\n    id: widget.properties.id,\n    placeholder: widget.properties.placeholder,\n    className: widget.properties.className,\n    value: widget.properties.value,\n    options: data,\n    getOptionLabel: option => option[widget.config.fields[0]],\n    fullWidth: true,\n    renderInput: params => __jsx(TextField, _extends({\n      fullWidth: true,\n      name: widget.properties.name\n    }, params, {\n      label: widget.properties.label\n    }))\n  });\n};\n\nexport default AutoCompleteWidget;","map":null,"metadata":{},"sourceType":"module"}