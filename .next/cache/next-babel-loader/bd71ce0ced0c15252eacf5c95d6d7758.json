{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/dashboards/settings/sub-boards-settings.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DashboardActions from '../../../actions/dashboard.actions';\n\nvar SubDashboardSettings = function SubDashboardSettings(_ref) {\n  var id = _ref.id,\n      refresh = _ref.refresh,\n      setRefresh = _ref.setRefresh;\n\n  var _useState = useState([]),\n      subDashboards = _useState[0],\n      setSubDashboards = _useState[1];\n\n  var _useState2 = useState(true),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(0),\n      udpate = _useState3[0],\n      setUpdate = _useState3[1];\n\n  var _useState4 = useState(false),\n      isShowingAddFields = _useState4[0],\n      setIsShowingAddFields = _useState4[1];\n\n  var _useState5 = useState(false),\n      isAdding = _useState5[0],\n      setIsAdding = _useState5[1];\n\n  var _useState6 = useState({\n    title: '',\n    description: '',\n    isSub: true\n  }),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  useEffect(function () {\n    var getSubDashboards = function getSubDashboards() {\n      var $subDashBoards;\n      return _regeneratorRuntime.async(function getSubDashboards$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(DashboardActions.getSubDashboards({\n                id: id\n              }));\n\n            case 3:\n              $subDashBoards = _context.sent;\n              setSubDashboards($subDashBoards);\n              setIsLoading(false);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    getSubDashboards();\n  }, [update]);\n\n  var addNewDashboard = function addNewDashboard() {\n    var subDashboard, linkDashboard;\n    return _regeneratorRuntime.async(function addNewDashboard$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            setIsAdding(true);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(DashboardActions.createDashboard({\n              dashboard: state\n            }));\n\n          case 4:\n            subDashboard = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(DashboardActions.linkSubDashboard({\n              subDashboardId: subDashboard.id,\n              id: id\n            }));\n\n          case 7:\n            linkDashboard = _context2.sent;\n            setUpdate(update + 1);\n            setIsShowingAddFields(false);\n            setIsAdding(false);\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  var renderSubDashboardCard = function renderSubDashboardCard(subDashboard) {\n    return __jsx(Card, {\n      variant: \"outlined\",\n      key: subDashboard.id,\n      style: {\n        marginTop: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, __jsx(CardHeader, {\n      title: subDashboard.subDashboard.title,\n      subheader: subDashboard.subDashboard.createdAt,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }), __jsx(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, __jsx(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, subDashboard.subDashboard.description)), __jsx(CardActions, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, \"Delete\"), __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"View\"), __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Edit\")));\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, isShowingAddFields ? __jsx(Card, {\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, __jsx(CardContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, __jsx(TextField, {\n    label: \"Title\",\n    placeholder: \"Dashboard Title\",\n    fullWidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }), __jsx(TextField, {\n    style: {\n      marginTop: 10\n    },\n    fullWidth: true,\n    label: \"Description\",\n    placeholder: \"Dashboard Description\",\n    multiline: true,\n    rows: 2,\n    rowsMax: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  })), __jsx(CardActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Add\"), __jsx(Button, {\n    onClick: function onClick() {\n      setIsShowingAddFields(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Cancel\"))) : __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsShowingAddFields(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 14\n    }\n  }, \"Add New Page\"), isLoading ? __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, __jsx(CircularProgress, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  })) : subDashboards.map(function (subDashboard) {\n    return renderSubDashboardCard(subDashboard);\n  }));\n};\n\nexport default SubDashboardSettings;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/dashboards/settings/sub-boards-settings.jsx"],"names":["useState","useEffect","Card","Grid","Button","Typography","CardHeader","CardActions","CardContent","CircularProgress","DashboardActions","SubDashboardSettings","id","refresh","setRefresh","subDashboards","setSubDashboards","isLoading","setIsLoading","udpate","setUpdate","isShowingAddFields","setIsShowingAddFields","isAdding","setIsAdding","title","description","isSub","state","setState","getSubDashboards","$subDashBoards","console","log","update","addNewDashboard","createDashboard","dashboard","subDashboard","linkSubDashboard","subDashboardId","linkDashboard","renderSubDashboardCard","marginTop","createdAt","display","justifyContent","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DashboardActions from '../../../actions/dashboard.actions'\n\nconst SubDashboardSettings = ({ id, refresh, setRefresh }) => {\n  const [subDashboards, setSubDashboards] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [udpate, setUpdate] = useState(0)\n  const [isShowingAddFields, setIsShowingAddFields] = useState(false)\n  const [isAdding, setIsAdding] = useState(false)\n  const [state, setState] = useState({ title: '', description: '', isSub: true })\n\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({ id })\n        setSubDashboards($subDashBoards)\n        setIsLoading(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getSubDashboards()\n  }, [update])\n\n  const addNewDashboard = async () => {\n    try {\n      setIsAdding(true)\n      const subDashboard = await DashboardActions.createDashboard({ dashboard: state })\n      const linkDashboard = await DashboardActions.linkSubDashboard({ subDashboardId: subDashboard.id, id })\n      setUpdate(update + 1)\n      setIsShowingAddFields(false)\n      setIsAdding(false)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n\n  const renderSubDashboardCard = subDashboard => (\n    <Card variant=\"outlined\" key={subDashboard.id} style={{ marginTop: 15 }}>\n      <CardHeader\n        title={subDashboard.subDashboard.title}\n        subheader={subDashboard.subDashboard.createdAt}\n      />\n      <CardContent>\n        <Typography>{subDashboard.subDashboard.description}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button>Delete</Button>\n        <Button>View</Button>\n        <Button>Edit</Button>\n      </CardActions>\n    </Card>\n  )\n\n  return (\n    <div>\n      {\n        isShowingAddFields ? (\n          <Card variant=\"outlined\">\n\n            <CardContent>\n              <TextField label=\"Title\" placeholder=\"Dashboard Title\" fullWidth />\n\n              <TextField\n                style={{ marginTop: 10 }}\n                fullWidth\n                label=\"Description\"\n                placeholder=\"Dashboard Description\"\n                multiline\n                rows={2}\n                rowsMax={4}\n              />\n            </CardContent>\n\n            <CardActions>\n              <Button>Add</Button>\n              <Button onClick={() => { setIsShowingAddFields(false) }}>Cancel</Button>\n            </CardActions>\n\n          </Card>\n        ) : (<Button fullWidth onClick={() => { setIsShowingAddFields(true) }}>Add New Page</Button>)\n      }\n      {\n        isLoading ? (\n          <div style={{ display: 'flex', justifyContent: 'center', marginTop: 15 }}>\n            <CircularProgress />\n          </div>) : subDashboards.map(subDashboard => (renderSubDashboardCard(subDashboard)))\n      }\n    </div>\n  )\n}\n\nexport default SubDashboardSettings"]},"metadata":{},"sourceType":"module"}