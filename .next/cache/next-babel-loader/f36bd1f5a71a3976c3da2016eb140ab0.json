{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport { ConnectionSettings } from '../helpers';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\n\nconst TableWidgetSettingsPanel = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: connectionMethod,\n    1: setConnectionMethod\n  } = useState(!isAdding ? widget.config.connectionMethod : 'database');\n  const {\n    0: doc,\n    1: setDoc\n  } = useState(!isAdding ? widget.config.docId : '');\n  const {\n    0: title,\n    1: setTitle\n  } = useState(!isAdding ? widget.title : '');\n  const {\n    0: datasource,\n    1: setDatasource\n  } = useState(!isAdding ? widget.dataSourceId : '');\n  const {\n    0: fields,\n    1: setFields\n  } = useState(!isAdding ? widget.config.fields : []);\n  const {\n    0: primaryKey,\n    1: setPrimaryKey\n  } = useState(!isAdding ? widget.config.primaryKey : null);\n  const {\n    0: isEditable,\n    1: setIsEditable\n  } = useState(isAdding ? false : widget.config.isEditable);\n  const {\n    0: isDeletable,\n    1: setIsDeletable\n  } = useState(isAdding ? false : widget.config.isDeletable);\n  const {\n    0: isAddable,\n    1: setIsAddable\n  } = useState(isAdding ? false : widget.config.isAddable);\n  const {\n    0: url,\n    1: setURL\n  } = useState(isAdding ? '' : widget.config.url);\n  const {\n    0: headers,\n    1: setHeaders\n  } = useState(isAdding ? {} : widget.config.headers || {});\n  const {\n    0: method,\n    1: setMethod\n  } = useState(isAdding ? '' : widget.config.method);\n  const {\n    0: body,\n    1: setBody\n  } = useState(isAdding ? {} : widget.config.body || {});\n  const {\n    0: query,\n    1: setQuery\n  } = useState(isAdding ? {} : widget.config.query || {});\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        title,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {},\n          isEditable,\n          isDeletable,\n          isAddable,\n          primaryKey,\n          connectionMethod,\n          url,\n          headers,\n          method,\n          body,\n          query\n        },\n        type: 'Table'\n      };\n      console.log(data);\n\n      if (isAdding) {\n        onWidgetAdd(data);\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data);\n        handleSettingsClose(update);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"title\"\n  }, \"Title\"), __jsx(Input, {\n    value: title,\n    onChange: event => {\n      setTitle(event.target.value);\n    }\n  })), __jsx(\"div\", {\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isEditable,\n      onChange: event => {\n        setIsEditable(event.target.checked);\n      }\n    }),\n    label: \"Allow Edit?\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isDeletable,\n      onChange: event => {\n        setIsDeletable(event.target.checked);\n      }\n    }),\n    label: \"Allow Delete?\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isAddable,\n      onChange: event => {\n        setIsAddable(event.target.checked);\n      }\n    }),\n    label: \"Allow Add?\"\n  })), __jsx(ConnectionSettings, {\n    isAdding: isAdding,\n    connectionMethod: connectionMethod,\n    setConnectionMethod: setConnectionMethod,\n    setDoc: setDoc,\n    setDatasource: setDatasource,\n    setFields: setFields,\n    doc: doc,\n    datasource: datasource,\n    fields: fields,\n    primaryKey: primaryKey,\n    setPrimaryKey: setPrimaryKey,\n    url: url,\n    setURL: setURL,\n    headers: headers,\n    setHeaders: setHeaders,\n    method: method,\n    setMethod: setMethod,\n    body: body,\n    setBody: setBody,\n    query: query,\n    setQuery: setQuery\n  }), __jsx(Button, {\n    fullWidth: true,\n    className: classes.formControl,\n    onClick: saveConfigSettings\n  }, isAdding ? 'Add' : 'Save'));\n};\n\nexport default TableWidgetSettingsPanel;","map":null,"metadata":{},"sourceType":"module"}