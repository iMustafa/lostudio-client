{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DashboardActions from '../../../actions/dashboard.actions';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Swal from 'sweetalert2';\nconst useStyles = makeStyles(() => ({}));\n\nconst AddCollaboratorCard = ({\n  id,\n  cancel\n}) => {\n  const classes = useStyles();\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: permissions,\n    1: setPermissions\n  } = useState({\n    viewer: false,\n    editor: false\n  });\n\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n  };\n\n  const handlePermissionsChange = event => {\n    setPermissions(_objectSpread({}, permissions, {\n      [event.target.name]: event.target.checked\n    }));\n  };\n\n  const addCollaborator = async () => {\n    const {\n      editor,\n      viewer\n    } = permissions;\n\n    try {\n      const collaboration = await DashboardActions.addCollaborator({\n        email,\n        editor,\n        viewer,\n        id\n      });\n\n      if (collaboration.status == 500) {\n        Swal.fire('Error', collaboration.data.error.message, 'error');\n      } else {\n        if (collaboration.sent) Swal.fire('Success', `${email} is now a collaborator on this board. `, 'success');else Swal.fire('Success', `${email} is not a member yet, but they'll be assigned as a collaborator as soon as they sign up. `, 'success');\n        setEmail('');\n        setPermissions({\n          editor: false,\n          viewer: false\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(Card, {\n    style: {\n      marginBottom: 10\n    }\n  }, __jsx(Grid, {\n    spacing: 2,\n    container: true,\n    style: {\n      margin: 0,\n      width: '100%'\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    className: classes.name\n  }, __jsx(TextField, {\n    type: \"email\",\n    onChange: handleEmailChange,\n    label: \"Email\",\n    placeholder: \"example@domain.com\",\n    fullWidth: true\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      display: 'flex',\n      alignItems: 'flex-end'\n    }\n  }, __jsx(FormControlLabel, {\n    style: {\n      margin: 0\n    },\n    control: __jsx(Checkbox, {\n      checked: permissions.viewer,\n      onChange: handlePermissionsChange,\n      name: \"viewer\"\n    }),\n    label: \"Editor\"\n  }), __jsx(FormControlLabel, {\n    style: {\n      margin: 0\n    },\n    control: __jsx(Checkbox, {\n      checked: permissions.editor,\n      onChange: handlePermissionsChange,\n      name: \"editor\"\n    }),\n    label: \"Viewer\"\n  }))), __jsx(Grid, {\n    spacing: 2,\n    container: true,\n    style: {\n      margin: 0,\n      width: '100%',\n      marginTop: 10\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: cancel\n  }, \"Cancel\")), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: addCollaborator\n  }, \"Add\"))));\n};\n\nexport default AddCollaboratorCard;","map":null,"metadata":{},"sourceType":"module"}