{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nvar useStyles = makeStyles({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n});\n\nvar ExportTableData = function ExportTableData(_ref) {\n  var widget = _ref.widget,\n      data = _ref.data,\n      selectedRows = _ref.selectedRows;\n  var classes = useStyles();\n\n  var _useState = useState({\n    method: 'download',\n    format: 'csv',\n    fields: widget.config.fields\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState([]),\n      fields = _useState2[0],\n      setFields = _useState2[1];\n\n  var handleDataChange = function handleDataChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, value)));\n  };\n\n  var handleFieldChange = function handleFieldChange(name) {\n    return function (event) {\n      var checked = event.target.checked;\n      checked ? setFields([].concat(_toConsumableArray(fields), [name])) : setFields(fields.filter(function (field) {\n        return field != name;\n      }));\n    };\n  };\n\n  var exportData = function exportData() {\n    var format, method, file;\n    return _regeneratorRuntime.async(function exportData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            format = state.format, method = state.method;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.exportWidgetData(widget.id, format, method, JSON.stringify(fields)));\n\n          case 4:\n            file = _context.sent;\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Export Settings\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"export-format\"\n  }, \"Export Format\"), __jsx(Select, {\n    name: \"format\",\n    labelId: \"export-format\",\n    value: state.format,\n    onChange: handleDataChange\n  }, __jsx(MenuItem, {\n    value: \"csv\"\n  }, \"CSV\"), __jsx(MenuItem, {\n    value: \"json\"\n  }, \"JSON\"))), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"export-method\"\n  }, \"Export Method\"), __jsx(Select, {\n    name: \"method\",\n    labelId: \"export-method\",\n    value: state.method,\n    onChange: handleDataChange\n  }, __jsx(MenuItem, {\n    value: \"download\"\n  }, \"Download\"), __jsx(MenuItem, {\n    value: \"email\"\n  }, \"Email\"))), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Export Fields\")), __jsx(Typography, null, \"Select fields to export from the data set.\"), state.fields.map(function (field) {\n    return __jsx(FormControlLabel, {\n      key: field,\n      control: __jsx(Checkbox, {\n        checked: fields.includes(field),\n        onChange: handleFieldChange(field),\n        value: field\n      }),\n      label: field\n    });\n  }), __jsx(Button, {\n    onClick: exportData,\n    className: classes.formControl,\n    fullWidth: true\n  }, \"Export\"));\n};\n\nexport default ExportTableData;","map":null,"metadata":{},"sourceType":"module"}