{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Colors from '../../../../helpers/css-colors';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport { conditionCases } from '../../../../helpers/measure-conditions';\n\nconst AddMeasureCondition = ({\n  widget,\n  setIsAddingMeasureCondition,\n  setRefresh,\n  refresh\n}) => {\n  const {\n    0: measureConditionsFields,\n    1: updateMeasureConditionsFields\n  } = useState({});\n  const {\n    0: fields,\n    1: setFields\n  } = useState(widget.config.fields);\n  const {\n    0: showSpinner,\n    1: setShowSpinner\n  } = useState(false);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    updateMeasureConditionsFields(_objectSpread({}, measureConditionsFields, {\n      [name]: value\n    }));\n  };\n\n  const addMeasureCondition = async () => {\n    try {\n      setShowSpinner(true);\n      const measureCondition = await WidgetSettingsActions.createWidgetSettingsMeasureConditions(widget.id, measureConditionsFields);\n      setShowSpinner(false);\n      setIsAddingMeasureCondition(false);\n      setRefresh(refresh + 1);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"field-select-label\"\n  }, \"Field\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"field-select-label\",\n    value: measureConditionsFields.field,\n    onChange: handleChange,\n    name: \"field\"\n  }, fields.map(field => __jsx(MenuItem, {\n    key: field,\n    value: field\n  }, field))))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"expression-select-label\"\n  }, \"Expression\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"expression-select-label\",\n    value: measureConditionsFields.expression,\n    onChange: handleChange,\n    name: \"expression\"\n  }, conditionCases.map(conditionCase => __jsx(MenuItem, {\n    key: conditionCase.title,\n    value: conditionCase.title\n  }, conditionCase.friendlyName))))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(Autocomplete, {\n    fullWidth: true,\n    options: Colors,\n    renderInput: params => __jsx(TextField, _extends({\n      fullWidth: true,\n      name: \"color\"\n    }, params, {\n      label: \"Color\",\n      onChange: handleChange\n    }))\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    type: \"number\",\n    label: \"Minimum Value\",\n    onChange: handleChange,\n    name: \"minValue\",\n    value: measureConditionsFields.minValue\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    type: \"number\",\n    name: \"maxValue\",\n    onChange: handleChange,\n    label: \"Maximum Value\",\n    value: measureConditionsFields.maxValue\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: () => {\n      setIsAddingMeasureCondition(false);\n    }\n  }, __jsx(CancelIcon, {\n    style: {\n      color: '#F00'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Cancel\"))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, showSpinner ? __jsx(CircularProgress, null) : __jsx(Button, {\n    fullWidth: true,\n    onClick: addMeasureCondition\n  }, __jsx(SaveIcon, {\n    style: {\n      color: '#3F51B5'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Save\")))));\n};\n\nexport default AddMeasureCondition;","map":null,"metadata":{},"sourceType":"module"}