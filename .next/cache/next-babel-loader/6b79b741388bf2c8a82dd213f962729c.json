{"ast":null,"code":"import axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nconst {\n  API_URL\n} = config().publicRuntimeConfig;\nexport default class DashboardActions {\n  // TODO\n  static async createDashboard(dashborad) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getDashboards({\n    Authorization,\n    query\n  }) {\n    console.log(Authorization);\n    return axios.get(`${API_URL}/Dashboards`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err);\n  } // TODO\n\n\n  static async getDashboardById(data) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async updateDashboard(id, data) {\n    return axios.patch(`${API_URL}/Dashboards/${id}`, data).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async deleteDashboard(data) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  }\n\n  static async getWidgetSettings({\n    Authorization,\n    id\n  }) {\n    return axios.get(`${API_URL}/Dashboards/${id}/widgetSettings`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async getCollaborators({\n    Authorization,\n    id\n  }) {\n    return axios.get(`${API_URL}/Dashboards/${id}/collaborators`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async getCollaboratorations({\n    Authorization,\n    id\n  }) {\n    return axios.get(`${API_URL}/Dashboards/${id}/collaborations`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async addWidgetToDashboard(id, fk) {\n    return axios.put(`${API_URL}/Dashboards/${id}/widgetSettings/rel/${fk}`, {\n      dashboardId: id,\n      widgetSettingsId: fk\n    }, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async removeWidgetFromDashboard(data) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  }\n\n}","map":{"version":3,"sources":["F:/Projects/LoStudio/client/actions/dashboard.actions.ts"],"names":["axios","config","Cookie","API_URL","publicRuntimeConfig","DashboardActions","createDashboard","dashborad","post","then","res","data","catch","err","response","getDashboards","Authorization","query","console","log","get","headers","getDashboardById","updateDashboard","id","patch","deleteDashboard","getWidgetSettings","getCollaborators","getCollaboratorations","addWidgetToDashboard","fk","put","dashboardId","widgetSettingsId","removeWidgetFromDashboard"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport config from 'next/config'\r\nimport Cookie from 'js-cookie'\r\nimport User from '../types/users.types'\r\nimport Dashboard from '../types/dashboard.types'\r\nimport Datasource from '../types/datasource.types'\r\nimport Widget from '../types/widget.types'\r\nimport WidgetSettings from '../types/widgetSettings.type'\r\n\r\nconst { API_URL } = config().publicRuntimeConfig\r\n\r\nexport default class DashboardActions {\r\n\r\n  // TODO\r\n  public static async createDashboard(dashborad: Dashboard): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async getDashboards({ Authorization, query }: { Authorization?: string, query?: any }): Promise<Array<Dashboard>> {\r\n    console.log(Authorization)\r\n    return axios\r\n      .get(`${API_URL}/Dashboards`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err)\r\n  }\r\n\r\n  // TODO\r\n  public static async getDashboardById(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async updateDashboard(id: string, data): Promise<Dashboard> {\r\n    return axios\r\n      .patch(`${API_URL}/Dashboards/${id}`, data)\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async deleteDashboard(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async getWidgetSettings({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<WidgetSettings>> {\r\n    return axios\r\n      .get(`${API_URL}/Dashboards/${id}/widgetSettings`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async getCollaborators({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<User>> {\r\n    return axios\r\n      .get(`${API_URL}/Dashboards/${id}/collaborators`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async getCollaboratorations({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<Dashboard>> {\r\n    return axios\r\n      .get(`${API_URL}/Dashboards/${id}/collaborations`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async addWidgetToDashboard(id: string, fk: string): Promise<Dashboard> {\r\n    return axios\r\n      .put(`${API_URL}/Dashboards/${id}/widgetSettings/rel/${fk}`, { dashboardId: id, widgetSettingsId: fk }, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async removeWidgetFromDashboard(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}