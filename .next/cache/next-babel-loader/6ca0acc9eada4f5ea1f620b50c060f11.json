{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nvar useStyles = makeStyles({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n});\nvar httpMethods = [{\n  value: 'get',\n  title: 'Get'\n}, {\n  value: 'post',\n  title: 'Post'\n}, {\n  value: 'put',\n  title: 'Put'\n}, {\n  value: 'patch',\n  title: 'Patch'\n}, {\n  value: 'head',\n  title: 'Head'\n}, {\n  value: 'delete',\n  title: 'Delete'\n}];\n\nvar HTTPConnection = function HTTPConnection(_ref) {\n  var url = _ref.url,\n      setURL = _ref.setURL,\n      method = _ref.method,\n      setMethod = _ref.setMethod,\n      headers = _ref.headers,\n      setHeaders = _ref.setHeaders,\n      body = _ref.body,\n      setBody = _ref.setBody,\n      query = _ref.query,\n      setQuery = _ref.setQuery;\n  var classes = useStyles();\n\n  var _useState = useState({\n    key: '',\n    value: ''\n  }),\n      requestHeader = _useState[0],\n      setRequestHeader = _useState[1];\n\n  var _useState2 = useState(false),\n      isAddingRequestHeader = _useState2[0],\n      setIsAddingRequestHeader = _useState2[1];\n\n  var _useState3 = useState({\n    key: '',\n    value: ''\n  }),\n      queryParam = _useState3[0],\n      setQueryParam = _useState3[1];\n\n  var _useState4 = useState(false),\n      isAddingRequestQueryParam = _useState4[0],\n      setIsAddingQueryParam = _useState4[1];\n\n  var _useState5 = useState({\n    key: '',\n    value: ''\n  }),\n      bodyParam = _useState5[0],\n      setBodyParam = _useState5[1];\n\n  var _useState6 = useState(false),\n      isAddingRequestBodyParam = _useState6[0],\n      setIsAddingRequestBodyParam = _useState6[1];\n\n  var renderRequestHeader = function renderRequestHeader(header) {};\n\n  var renderQueryParameter = function renderQueryParameter(queryParameter) {};\n\n  var renderBodyParameter = function renderBodyParameter(bodyParameter) {};\n\n  return __jsx(\"div\", null, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"title\"\n  }, \"Request URL\"), __jsx(Input, {\n    value: url,\n    onChange: function onChange(event) {\n      setURL(event.target.value);\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"http-method-label\"\n  }, \"Request Method\"), __jsx(Select, {\n    value: method,\n    onChange: function onChange(event) {\n      setMethod(event.target.value);\n    },\n    labelId: \"http-method-label\",\n    fullWidth: true,\n    className: classes.formControl\n  }, httpMethods.map(function (m) {\n    return __jsx(MenuItem, {\n      value: m.value,\n      key: m.value\n    }, m.title);\n  }))), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Request Headers\")), isAddingRequestHeader ? __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 10,\n      paddingRight: 10\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, null, \"Key\"), __jsx(Input, {\n    onChange: function onChange(event) {\n      setRequestHeader(_objectSpread({}, requestHeader, {\n        key: event.target.value\n      }));\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 10,\n      paddingRight: 10\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, null, \"Value\"), __jsx(Input, {\n    onChange: function onChange(event) {\n      setRequestHeader(_objectSpread({}, requestHeader, {\n        value: event.target.value\n      }));\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    className: classes.formControl\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsAddingRequestHeader(false);\n    }\n  }, __jsx(CancelIcon, {\n    style: {\n      color: \"#F00\"\n    }\n  }), __jsx(Typography, null, \"Cancel\"))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true\n  }, __jsx(SaveIcon, {\n    style: {\n      color: \"#3F51B5\"\n    }\n  }), __jsx(Typography, null, \"Save\"))))) : __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsAddingRequestHeader(true);\n    }\n  }, \"Add\"), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Request Query Parameters\")), isAddingRequestQueryParam ? __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    style: {\n      paddingLeft: 10,\n      paddingRight: 10\n    }\n  }, __jsx(InputLabel, null, \"Key\"), __jsx(Input, {\n    onChange: function onChange(event) {\n      setQueryParam(_objectSpread({}, queryParam, {\n        key: event.target.value\n      }));\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    style: {\n      paddingLeft: 10,\n      paddingRight: 10\n    }\n  }, __jsx(InputLabel, null, \"Value\"), __jsx(Input, {\n    onChange: function onChange(event) {\n      setQueryParam(_objectSpread({}, queryParam, {\n        value: event.target.value\n      }));\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    className: classes.formControl\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsAddingQueryParam(false);\n    }\n  }, __jsx(CancelIcon, {\n    style: {\n      color: \"#F00\"\n    }\n  }), __jsx(Typography, null, \"Cancel\"))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true\n  }, __jsx(SaveIcon, {\n    style: {\n      color: \"#3F51B5\"\n    }\n  }), __jsx(Typography, null, \"Save\"))))) : __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsAddingQueryParam(true);\n    }\n  }, \"Add\"));\n};\n\nexport default HTTPConnection;","map":null,"metadata":{},"sourceType":"module"}