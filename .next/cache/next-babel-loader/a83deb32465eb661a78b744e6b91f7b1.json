{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/charts/gantt-chart/index.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Gantt from './gantt-chart-widget';\nimport Toolbar from './gantt-chart-widget-toolbar';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst GanttChartWidget = () => {\n  const {\n    0: widget,\n    1: setWidget\n  } = useState({});\n  const {\n    0: tasks,\n    1: setTasks\n  } = useState({\n    data: [],\n    links: []\n  });\n  const {\n    0: isLoadingData,\n    1: setIsLoadingData\n  } = useState(true);\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState('Days');\n\n  const handleZoomChange = zoom => {\n    setZoom(zoom);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const Widget = await WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\");\n        const Result = await WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\");\n        setTasks({\n          data: Result[0].data,\n          links: Result[0].links\n        });\n        setWidget(_objectSpread({}, Widget));\n        setIsLoadingData(false);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getData();\n  }, []);\n\n  const renderGunttChart = () => isLoadingData || !widget ? __jsx(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 62\n    }\n  }) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"zoom-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(Toolbar, {\n    zoom: zoom,\n    onZoomChange: handleZoomChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"gantt-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(Gantt, {\n    tasks: tasks,\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  })));\n\n  return renderGunttChart();\n};\n\nexport default GanttChartWidget;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/charts/gantt-chart/index.jsx"],"names":["useState","useEffect","Gantt","Toolbar","WidgetSettingsActions","CircularProgress","GanttChartWidget","widget","setWidget","tasks","setTasks","data","links","isLoadingData","setIsLoadingData","zoom","setZoom","handleZoomChange","getData","Widget","getWidgetSettingsById","Result","executeWidgetQuery","e","console","log","renderGunttChart"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,qBAAP,MAAkC,4CAAlC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCd,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM;AAAA,OAACe,IAAD;AAAA,OAAOC;AAAP,MAAkBhB,QAAQ,CAAC,MAAD,CAAhC;;AAEA,QAAMiB,gBAAgB,GAAIF,IAAD,IAAU;AACjCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,OAAO,GAAG,YAAY;AAC1B,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMf,qBAAqB,CAACgB,qBAAtB,CAA4C,0BAA5C,CAArB;AACA,cAAMC,MAAM,GAAG,MAAMjB,qBAAqB,CAACkB,kBAAtB,CAAyC,0BAAzC,CAArB;AACAZ,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEU,MAAM,CAAC,CAAD,CAAN,CAAUV,IAAlB;AAAwBC,UAAAA,KAAK,EAAES,MAAM,CAAC,CAAD,CAAN,CAAUT;AAAzC,SAAD,CAAR;AACAJ,QAAAA,SAAS,mBAAMW,MAAN,EAAT;AACAL,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,OAND,CAME,OAAOS,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,KAVD;;AAWAL,IAAAA,OAAO;AACR,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMQ,gBAAgB,GAAG,MAAMb,aAAa,IAAI,CAACN,MAAlB,GAA4B,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B,GAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,IAAI,EAAEQ,IADR;AAEE,IAAA,YAAY,EAAEE,gBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAOE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAER,KAAd;AAAqB,IAAA,IAAI,EAAEM,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CADF;;AAcA,SACEW,gBAAgB,EADlB;AAGD,CA1CD;;AA4CA,eAAepB,gBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport Gantt from './gantt-chart-widget'\nimport Toolbar from './gantt-chart-widget-toolbar'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst GanttChartWidget = () => {\n  const [widget, setWidget] = useState({})\n  const [tasks, setTasks] = useState({ data: [], links: [] })\n  const [isLoadingData, setIsLoadingData] = useState(true)\n  const [zoom, setZoom] = useState('Days')\n\n  const handleZoomChange = (zoom) => {\n    setZoom(zoom)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const Widget = await WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\")\n        const Result = await WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\")\n        setTasks({ data: Result[0].data, links: Result[0].links })\n        setWidget({ ...Widget })\n        setIsLoadingData(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  const renderGunttChart = () => isLoadingData || !widget ? (<CircularProgress />) : (\n    <div>\n      <div className=\"zoom-bar\">\n        <Toolbar\n          zoom={zoom}\n          onZoomChange={handleZoomChange}\n        />\n      </div>\n      <div className=\"gantt-container\">\n        <Gantt tasks={tasks} zoom={zoom} />\n      </div>\n    </div>\n  )\n\n  return (\n    renderGunttChart()\n  )\n}\n\nexport default GanttChartWidget"]},"metadata":{},"sourceType":"module"}