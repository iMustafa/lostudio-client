{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/dashboards/settings/sub-boards-settings.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DashboardActions from '../../../actions/dashboard.actions';\n\nconst SubDashboardSettings = ({\n  id,\n  refresh,\n  setRefresh\n}) => {\n  const {\n    0: subDashboards,\n    1: setSubDashboards\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: update,\n    1: setUpdate\n  } = useState(0);\n  const {\n    0: isShowingAddFields,\n    1: setIsShowingAddFields\n  } = useState(false);\n  const {\n    0: isAdding,\n    1: setIsAdding\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    title: '',\n    description: '',\n    isSub: true\n  });\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({\n          id\n        });\n        setSubDashboards($subDashBoards);\n        setIsLoading(false);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getSubDashboards();\n  }, [update]);\n\n  const addNewDashboard = async () => {\n    try {\n      setIsAdding(true);\n      const subDashboard = await DashboardActions.createDashboard({\n        dashboard: state\n      });\n      const linkDashboard = await DashboardActions.linkSubDashboard({\n        subDashboardId: subDashboard.id,\n        id\n      });\n      setUpdate(update + 1);\n      setIsShowingAddFields(false);\n      setIsAdding(false);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const renderSubDashboardCard = subDashboard => __jsx(Card, {\n    variant: \"outlined\",\n    key: subDashboard.id,\n    style: {\n      marginTop: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(CardHeader, {\n    title: subDashboard.subDashboard.title,\n    subheader: subDashboard.subDashboard.createdAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, subDashboard.subDashboard.description)), __jsx(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Delete\"), __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"View\"), __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Edit\")));\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, isShowingAddFields ? __jsx(Card, {\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, __jsx(TextField, {\n    label: \"Title\",\n    fullWidth: true,\n    onChange: event => {\n      setState(_objectSpread({}, state, {\n        title: event.target.value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }), __jsx(TextField, {\n    style: {\n      marginTop: 10\n    },\n    fullWidth: true,\n    label: \"Description\",\n    multiline: true,\n    rows: 2,\n    rowsMax: 4,\n    onChange: event => {\n      setState(_objectSpread({}, state, {\n        description: event.target.value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  })), isAdding ? __jsx(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, __jsx(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  })) : __jsx(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    onClick: addNewDashboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Add\"), __jsx(Button, {\n    onClick: () => {\n      setIsShowingAddFields(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Cancel\"))) : __jsx(Button, {\n    fullWidth: true,\n    onClick: () => {\n      setIsShowingAddFields(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 14\n    }\n  }, \"Add New Page\"), isLoading ? __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, __jsx(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })) : subDashboards.map(subDashboard => renderSubDashboardCard(subDashboard)));\n};\n\nexport default SubDashboardSettings;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/dashboards/settings/sub-boards-settings.jsx"],"names":["useState","useEffect","Card","Grid","TextField","Button","Typography","CardHeader","CardActions","CardContent","CircularProgress","DashboardActions","SubDashboardSettings","id","refresh","setRefresh","subDashboards","setSubDashboards","isLoading","setIsLoading","update","setUpdate","isShowingAddFields","setIsShowingAddFields","isAdding","setIsAdding","state","setState","title","description","isSub","getSubDashboards","$subDashBoards","e","console","log","addNewDashboard","subDashboard","createDashboard","dashboard","linkDashboard","linkSubDashboard","subDashboardId","renderSubDashboardCard","marginTop","createdAt","event","target","value","display","justifyContent","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DashboardActions from '../../../actions/dashboard.actions'\n\nconst SubDashboardSettings = ({ id, refresh, setRefresh }) => {\n  const [subDashboards, setSubDashboards] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [update, setUpdate] = useState(0)\n  const [isShowingAddFields, setIsShowingAddFields] = useState(false)\n  const [isAdding, setIsAdding] = useState(false)\n  const [state, setState] = useState({ title: '', description: '', isSub: true })\n\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({ id })\n        setSubDashboards($subDashBoards)\n        setIsLoading(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getSubDashboards()\n  }, [update])\n\n  const addNewDashboard = async () => {\n    try {\n      setIsAdding(true)\n      const subDashboard = await DashboardActions.createDashboard({ dashboard: state })\n      const linkDashboard = await DashboardActions.linkSubDashboard({ subDashboardId: subDashboard.id, id })\n      setUpdate(update + 1)\n      setIsShowingAddFields(false)\n      setIsAdding(false)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n\n  const renderSubDashboardCard = subDashboard => (\n    <Card variant=\"outlined\" key={subDashboard.id} style={{ marginTop: 15 }}>\n      <CardHeader\n        title={subDashboard.subDashboard.title}\n        subheader={subDashboard.subDashboard.createdAt}\n      />\n      <CardContent>\n        <Typography>{subDashboard.subDashboard.description}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button>Delete</Button>\n        <Button>View</Button>\n        <Button>Edit</Button>\n      </CardActions>\n    </Card>\n  )\n\n  return (\n    <div>\n      {\n        isShowingAddFields ? (\n          <Card variant=\"outlined\">\n\n            <CardContent>\n              <TextField label=\"Title\" fullWidth\n                onChange={event => { setState({ ...state, title: event.target.value }) }}\n              />\n\n              <TextField\n                style={{ marginTop: 10 }}\n                fullWidth\n                label=\"Description\"\n                multiline\n                rows={2}\n                rowsMax={4}\n                onChange={event => { setState({ ...state, description: event.target.value }) }}\n              />\n            </CardContent>\n\n            {\n              isAdding ? (\n                <CardActions>\n                  <CircularProgress />\n                </CardActions>\n              ) : (\n                  <CardActions>\n                    <Button onClick={addNewDashboard}>Add</Button>\n                    <Button onClick={() => { setIsShowingAddFields(false) }}>Cancel</Button>\n                  </CardActions>\n                )\n            }\n\n          </Card >\n        ) : (<Button fullWidth onClick={() => { setIsShowingAddFields(true) }}>Add New Page</Button>)\n      }\n      {\n        isLoading ? (\n          <div style={{ display: 'flex', justifyContent: 'center', marginTop: 15 }}>\n            <CircularProgress />\n          </div>) : subDashboards.map(subDashboard => (renderSubDashboardCard(subDashboard)))\n      }\n    </div >\n  )\n}\n\nexport default SubDashboardSettings"]},"metadata":{},"sourceType":"module"}