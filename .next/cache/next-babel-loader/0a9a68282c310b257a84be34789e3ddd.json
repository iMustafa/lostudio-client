{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { makeStyles } from '@material-ui/core/styles';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport TableWidgetSettingsPanel from './table-widget-settings-panel';\nimport { ListMeasureCondition } from '../helpers';\nimport Swal from 'sweetalert2';\n\nfunction TabPanel(props) {\n  var children = props.children,\n      value = props.value,\n      index = props.index,\n      other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(\"div\", _extends({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: \"simple-tabpanel-\".concat(index),\n    \"aria-labelledby\": \"simple-tab-\".concat(index)\n  }, other), value === index && __jsx(Box, {\n    p: 3\n  }, __jsx(Typography, null, children)));\n}\n\nfunction a11yProps(index) {\n  return {\n    id: \"simple-tab-\".concat(index),\n    'aria-controls': \"simple-tabpanel-\".concat(index)\n  };\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500,\n      paddingLeft: \"15px\",\n      paddingRight: \"15px\",\n      paddingTop: \"15px\"\n    },\n    panel: {\n      backgroundColor: \"#FFF\",\n      color: \"#000\"\n    }\n  };\n});\n\nvar TableWidgetSettings = function TableWidgetSettings(_ref) {\n  var widget = _ref.widget,\n      handleSettingsClose = _ref.handleSettingsClose,\n      isAdding = _ref.isAdding,\n      onWidgetAdd = _ref.onWidgetAdd;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var handleChange = function handleChange(event, newValue) {\n    setValue(newValue);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(AppBar, {\n    position: \"static\",\n    className: classes.panel\n  }, __jsx(Tabs, {\n    value: value,\n    onChange: handleChange\n  }, __jsx(Tab, _extends({\n    icon: __jsx(SettingsIcon, null),\n    label: \"Widget Settings\"\n  }, a11yProps(0))), __jsx(Tab, _extends({\n    icon: __jsx(AssessmentIcon, null),\n    label: \"Measure Conditions\"\n  }, a11yProps(1))))), __jsx(TabPanel, {\n    value: value,\n    index: 0\n  }, __jsx(TableWidgetSettingsPanel, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose,\n    isAdding: isAdding,\n    onWidgetAdd: onWidgetAdd\n  })), __jsx(TabPanel, {\n    value: value,\n    index: 1\n  }, __jsx(ListMeasureCondition, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose,\n    isAdding: isAdding,\n    onWidgetAdd: onWidgetAdd\n  })));\n};\n\nexport default TableWidgetSettings;","map":null,"metadata":{},"sourceType":"module"}