{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport MeasureConditionItem from './measure-conditions-item';\nimport AddMeasureCondition from './add-measure-condition';\nvar useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n});\n\nvar ListMeasureConditions = function ListMeasureConditions(_ref) {\n  var widget = _ref.widget,\n      handleSettingsClose = _ref.handleSettingsClose,\n      isAdding = _ref.isAdding,\n      onWidgetAdd = _ref.onWidgetAdd;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      isAddingMeasureCondition = _useState[0],\n      setIsAddingMeasureCondition = _useState[1];\n\n  var _useState2 = useState([]),\n      measureConditions = _useState2[0],\n      setMeasureConditions = _useState2[1];\n\n  var _useState3 = useState(0),\n      refresh = _useState3[0],\n      setRefresh = _useState3[1];\n\n  useEffect(function () {\n    var getMeasureConditions = function getMeasureConditions() {\n      var $measureConditions;\n      return _regeneratorRuntime.async(function getMeasureConditions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id));\n\n            case 3:\n              $measureConditions = _context.sent;\n              setMeasureConditions($measureConditions);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    getMeasureConditions();\n  }, [refresh]);\n  return __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Measure Conditions\")), isAddingMeasureCondition ? __jsx(AddMeasureCondition, {\n    setRefresh: setRefresh,\n    refresh: refresh,\n    widget: widget,\n    setIsAddingMeasureCondition: setIsAddingMeasureCondition\n  }) : __jsx(Button, {\n    fullWidth: true,\n    style: {\n      marginBottom: 15\n    },\n    onClick: function onClick() {\n      setIsAddingMeasureCondition(true);\n    }\n  }, \"Add Measure Condition\"), measureConditions.map(function (measureCondition) {\n    return __jsx(MeasureConditionItem, {\n      setRefresh: setRefresh,\n      refresh: refresh,\n      widget: widget,\n      key: measureCondition.id,\n      measureCondition: measureCondition\n    });\n  }));\n};\n\nexport default ListMeasureConditions;","map":null,"metadata":{},"sourceType":"module"}