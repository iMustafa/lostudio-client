{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport Drawer from '@material-ui/core/Drawer';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ShareIcon from '@material-ui/icons/Share';\nimport TableWidgetSettings from './table-widget-settings';\nimport ExportTableData from './export-table-data';\nimport { measureConditionResult } from '../../../helpers/measure-conditions';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\"\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst TableWidget = ({\n  widgetId\n}) => {\n  const classes = useStyles();\n  const {\n    0: widget,\n    1: setWidget\n  } = useState(null);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: isLoadingData,\n    1: setIsLoadingData\n  } = useState(false);\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(0);\n  const {\n    0: menuState,\n    1: setMenuState\n  } = useState({\n    right: false,\n    export: false\n  });\n  const {\n    0: measureConditions,\n    1: setMeasureConditions\n  } = useState([]);\n  const {\n    0: measureConditionsFields,\n    1: setMeasureConditionsFields\n  } = useState([]);\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widgetId);\n        setMeasureConditions($measureConditions);\n        setMeasureConditionsFields($measureConditions.map(condition => condition.field));\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getMeasureConditions();\n  }, []);\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId);\n      setData($data);\n      return $data;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId);\n      setWidget($widget);\n      return $widget;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getWidget();\n    getWidgetData();\n  }, [refresh]);\n\n  const refreshData = async () => {\n    setIsLoadingData(true);\n    getWidget();\n    getWidgetData();\n    setIsLoadingData(false);\n  };\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1);\n    toggleDrawer('right', false);\n  };\n\n  const onRowAdd = async newData => {\n    try {\n      const $data = await WidgetSettingsActions.addWidgetSettingsDocument(widgetId, newData);\n      getWidgetData();\n      return $data;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onRowUpdate = async (newData, oldData) => {\n    try {\n      const keyId = oldData[widget.config.primaryKey];\n      const $data = await WidgetSettingsActions.editWidgetSettingsDocument(widgetId, newData, keyId);\n      getWidgetData();\n      return $data;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onRowDelete = async oldData => {\n    try {\n      const keyId = oldData[widget.config.primaryKey];\n      const $data = await WidgetSettingsActions.deleteWidgetSettingsDocument(widgetId, keyId);\n      getWidgetData();\n      return $data;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const editable = () => {\n    const {\n      isEditable,\n      isDeletable,\n      isAddable\n    } = widget.config;\n    const obj = {};\n    if (isEditable) obj.onRowUpdate = onRowUpdate;\n    if (isDeletable) obj.onRowDelete = onRowDelete;\n    if (isAddable) obj.onRowAdd = onRowAdd;\n    return obj;\n  };\n\n  const renderTable = () => {\n    return isLoadingData || !widget ? __jsx(CircularProgress, null) : __jsx(MaterialTable, {\n      columns: widget.config.fields.map(field => ({\n        field,\n        title: field,\n        render: rowData => {\n          const doesHaveCondition = measureConditionsFields.includes(field);\n\n          if (doesHaveCondition) {\n            const condition = measureConditions.filter(c => c.field == field)[0];\n            const isConditionMet = measureConditionResult(condition, rowData[field]);\n            return isConditionMet ? __jsx(Typography, {\n              style: {\n                backgroundColor: condition.color\n              }\n            }, rowData[field]) : __jsx(Typography, null, rowData[field]);\n          } else {\n            return __jsx(Typography, null, rowData[field]);\n          }\n        }\n      })),\n      data: data,\n      title: widget.title || '',\n      editable: editable()\n    });\n  };\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n    setMenuState(_objectSpread({}, menuState, {\n      [side]: open\n    }));\n  };\n\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.widgetActions\n  }, __jsx(\"div\", {\n    className: classes.widgetTitle\n  }, __jsx(Typography, {\n    style: {\n      color: \"#FFF\"\n    }\n  }, widget && widget.title ? widget.title : 'Widget Title')), __jsx(\"div\", {\n    className: classes.actionButtons\n  }, __jsx(IconButton, {\n    onClick: toggleDrawer('export', true)\n  }, __jsx(ShareIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })), __jsx(IconButton, {\n    onClick: toggleDrawer('right', true)\n  }, __jsx(SettingsIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })), __jsx(IconButton, {\n    onClick: refreshData\n  }, __jsx(RefreshIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })))), __jsx(\"div\", null, renderTable()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false)\n  }, __jsx(TableWidgetSettings, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose\n  })), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.export,\n    onClose: toggleDrawer('export', false)\n  }, __jsx(ExportTableData, {\n    widget: widget,\n    data: data\n  })));\n};\n\nexport default TableWidget;","map":null,"metadata":{},"sourceType":"module"}