{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nconst useStyles = makeStyles({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n});\n\nconst ExportTableData = ({\n  widget,\n  data,\n  selectedRows\n}) => {\n  const classes = useStyles();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    method: 'download',\n    format: 'csv',\n    fields: widget.config.fields\n  });\n  const {\n    0: fields,\n    1: setFields\n  } = useState([]);\n\n  const handleDataChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setState(_objectSpread({}, state, {\n      [name]: value\n    }));\n  };\n\n  const handleFieldChange = name => event => {\n    const {\n      checked\n    } = event.target;\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name));\n  };\n\n  const exportData = async () => {\n    try {\n      const {\n        format,\n        method\n      } = state;\n      const file = await WidgetSettingsActions.exportWidgetData(widget.id, format, method, JSON.stringify(fields));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Export Settings\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"export-format\"\n  }, \"Export Format\"), __jsx(Select, {\n    name: \"format\",\n    labelId: \"export-format\",\n    value: state.format,\n    onChange: handleDataChange\n  }, __jsx(MenuItem, {\n    value: \"csv\"\n  }, \"CSV\"), __jsx(MenuItem, {\n    value: \"json\"\n  }, \"JSON\"))), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"export-method\"\n  }, \"Export Method\"), __jsx(Select, {\n    name: \"method\",\n    labelId: \"export-method\",\n    value: state.method,\n    onChange: handleDataChange\n  }, __jsx(MenuItem, {\n    value: \"download\"\n  }, \"Download\"), __jsx(MenuItem, {\n    value: \"email\"\n  }, \"Email\"))), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Export Fields\")), __jsx(Typography, null, \"Select fields to export from the data set.\"), state.fields.map(field => __jsx(FormControlLabel, {\n    key: field,\n    control: __jsx(Checkbox, {\n      checked: fields.includes(field),\n      onChange: handleFieldChange(field),\n      value: field\n    }),\n    label: field\n  })), __jsx(Button, {\n    onClick: exportData,\n    className: classes.formControl,\n    fullWidth: true\n  }, \"Export\"));\n};\n\nexport default ExportTableData;","map":null,"metadata":{},"sourceType":"module"}