{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { ChartRef } from './consts';\nimport Chart from './Chart';\nimport { addWidget, updateWidget, getWidgets, getWidgetData } from './actions';\nexport default function (editor) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var updateTrait = [];\n  var domc = editor.DomComponents;\n  var defaultType = domc.getType('default');\n  var defaultModel = defaultType.model;\n  var defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    var newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(ChartRef, {\n    model: defaultModel.extend({\n      defaults: _objectSpread({}, defaultModel.prototype.defaults, {\n        droppable: true,\n        defaultData: [[{\n          \"Name\": \"Henery\",\n          \"Location\": \"Usa\",\n          \"id\": \"5c24dc26dc10670017e40921\",\n          \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n          \"notes\": \"\"\n        }]],\n        prevData: [],\n        dbId: [],\n        traits: [{\n          name: 'modify',\n          type: 'button',\n          text: \"Modify\",\n          full: true,\n          command: function command(editor) {\n            return axios.get('http://173.249.14.149:3001/api/DataSources?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ').then(function (res) {\n              var component = editor.getSelected();\n              component.addTrait({\n                name: \"dataSource\",\n                type: \"select\",\n                changeProp: 1,\n                options: res.data.map(function (op) {\n                  return {\n                    id: op.id,\n                    name: op.title\n                  };\n                })\n              });\n              component.removeTrait('modify');\n            });\n          }\n        }],\n        toHTML: function toHTML() {\n          return \"\";\n        }\n      }),\n      init: function init() {\n        this.listenTo(this, this.handlePropChange);\n\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait('modify').set('text', \"Edit\");\n          this.addTrait({\n            name: 'Prev',\n            type: 'pre',\n            text: \"\\n\\t\\t\\t\\t\\t\\tData Source : <span style=\\\"font-weight: bold;\\\">\".concat(this.attributes.prevData[0].dataSourceId === '5ec035f7bb377b08ebc8938a' ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId, \"</span><br/>\\n\\t\\t\\t\\t\\t\\t Table : <span style=\\\"font-weight: bold;\\\">\").concat(this.attributes.prevData[0].config.docId, \"</span><br/>\\n\\t\\t\\t\\t\\t\\tFields : <span style=\\\"font-weight: bold;\\\">\").concat(this.attributes.prevData[0].config.fields.toString().replace(/,/g, ' | '), \"</span><br/>\\n\\t\\t\\t\\t\\t\\tPrimary key : <span style=\\\"font-weight: bold;\\\"> \").concat(this.attributes.prevData[0].config.primaryKey, \"</span><br/>\\n\\t\\t\\t\\t\\t\")\n          }, {\n            at: 0\n          });\n        }\n\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = '';\n          this.attributes.Table = '';\n          this.attributes.collections = '';\n        } else {\n          return null;\n        }\n      }\n    }),\n    view: defaultView.extend({\n      init: function init() {\n        this.listenTo(this.model, \"change:modify change:dataSource change:Table change:console change:\".concat(updateTrait.toString()), this.handleChanges);\n      },\n      handleChanges: function handleChanges() {\n        var _this = this;\n\n        if (this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\")) {\n          axios.get(\"http://173.249.14.149:3001/api/DataSources/\".concat(this.model.attributes.dataSource, \"/doc-list?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\")).then(function (response) {\n            var component = editor.getSelected();\n\n            if (_this.model.attributes.Table) {}\n\n            component.addTrait({\n              name: \"Table\",\n              type: 'select',\n              options: response.data.map(function (t) {\n                return {\n                  id: t,\n                  name: t\n                };\n              }),\n              changeProp: 1\n            });\n          });\n        }\n\n        if (this.model.attributes.Table) {\n          axios.get(\"http://173.249.14.149:3001/api/DataSources/\".concat(this.model.attributes.dataSource, \"/field-list?docId=\").concat(this.model.attributes.Table, \"&access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\")).then(function (response) {\n            var component = editor.getSelected();\n\n            if (updateTrait.length > 1) {\n              _this.model.get('traits').each(function (trait) {\n                component.removeTrait(updateTrait.map(function (t) {\n                  return t.toString();\n                }));\n                component.removeTrait(\"collections\");\n                component.removeTrait(\"console\");\n              });\n            }\n\n            response.data.map(function (t) {\n              var res = [{\n                label: t,\n                name: t,\n                type: \"checkbox\",\n                changeProp: 1\n              }];\n              updateTrait.push(t);\n              component.addTrait(res);\n            });\n            component.addTrait({\n              label: \"Primary key\",\n              name: \"collections\",\n              type: \"select\",\n              options: response.data.map(function (t) {\n                return t;\n              }),\n              changeProp: 1\n            }, {\n              at: 40\n            });\n            component.addTrait({\n              type: 'button',\n              name: \"console\",\n              changeProp: 1,\n              label: \"log button\",\n              text: 'Click me',\n              full: true,\n              command: function command(editor) {\n                var selected = editor.getSelected();\n                var postData = {};\n                var postDataArray = [];\n                selected.attributes.traits.models.forEach(function (element) {\n                  postData[element.attributes.name] = element.attributes.value;\n                });\n                postDataArray.push(postData);\n                var arr = null;\n                arr = postDataArray.map(function (js) {\n                  return {\n                    \"dataSourceId\": js.dataSource,\n                    \"config\": {\n                      \"fields\": displayOptions(js),\n                      \"primaryKey\": js.collections,\n                      \"docId\": js.Table,\n                      \"type\": \"simple\",\n                      \"func\": \"find\",\n                      \"query\": {}\n                    },\n                    \"type\": \"Chart\"\n                  };\n                })[0];\n                addWidget(arr).then(function (res) {\n                  console.log(res.data);\n                  var customId = res.data.id;\n                  _this.model.attributes.prevData = [];\n\n                  _this.model.attributes.prevData.push(res.data);\n\n                  if (_this.model.attributes.prevData.length >= 1) {\n                    component.removeTrait('Prev');\n                  }\n\n                  axios.get(\"http://173.249.14.149:3001/api/WidgetSettings/\".concat(customId, \"/execute-query?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\")).then(function (reso) {\n                    console.log(reso.data);\n\n                    if (_this.model.attributes.defaultData.length < 1) {\n                      _this.model.attributes.defaultData.push(reso.data);\n                    } else {\n                      _this.model.attributes.defaultData = [];\n\n                      _this.model.attributes.defaultData.push(reso.data);\n                    }\n                  }).then(function () {\n                    ReactDOM.unmountComponentAtNode(_this.el);\n\n                    _this.render();\n                  });\n                });\n              }\n            });\n          });\n        }\n      },\n      onRender: function onRender(_ref) {\n        var el = _ref.el;\n        var comps = this.model.get('components');\n        comps.reset();\n        ReactDOM.render(__jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(Chart, {\n          data: this.model.attributes.defaultData[0]\n        }))), el);\n      }\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}