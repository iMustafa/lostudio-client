{"ast":null,"code":"import axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nconst {\n  API_URL\n} = config().publicRuntimeConfig;\nexport const login = data => new Promise((resolve, reject) => {\n  axios.post(`${API_URL}/users/login`, data).then(res => resolve(res.data)).catch(err => reject(err.response));\n});\nexport const register = data => new Promise((resolve, reject) => {\n  axios.post(`${API_URL}/users`, data).then(res => resolve(res.data)).catch(err => reject(err.response));\n});\nexport const logout = () => new Promise((resolve, reject) => {\n  axios.post(`${API_URL}/users/logout`, {}, {\n    headers: {\n      Authorization: Cookie.get('id')\n    }\n  }).then(res => resolve(res.data)).catch(err => reject(err));\n});\nexport const deleteCookie = () => {\n  Cookie.remove('id');\n  Cookie.remove('ttl');\n  Cookie.remove('userId');\n  Cookie.remove('created');\n};\nexport const saveLoginData = data => {\n  Object.keys(data).forEach(key => {\n    Cookie.set(key, data[key]);\n  });\n};","map":{"version":3,"sources":["F:/Projects/LoStudio/client/actions/auth.actions.ts"],"names":["axios","config","Cookie","API_URL","publicRuntimeConfig","login","data","Promise","resolve","reject","post","then","res","catch","err","response","register","logout","headers","Authorization","get","deleteCookie","remove","saveLoginData","Object","keys","forEach","key","set"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAOA,MAAM;AAAEC,EAAAA;AAAF,IAAcF,MAAM,GAAGG,mBAA7B;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAoD,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxGT,EAAAA,KAAK,CAACU,IAAN,CAAY,GAAEP,OAAQ,cAAtB,EAAqCG,IAArC,EACGK,IADH,CACQC,GAAG,IAAIJ,OAAO,CAACI,GAAG,CAACN,IAAL,CADtB,EAEGO,KAFH,CAESC,GAAG,IAAIL,MAAM,CAACK,GAAG,CAACC,QAAL,CAFtB;AAGD,CAJwE,CAAlE;AAMP,OAAO,MAAMC,QAAQ,GAAIV,IAAD,IAA4B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnFT,EAAAA,KAAK,CAACU,IAAN,CAAY,GAAEP,OAAQ,QAAtB,EAA+BG,IAA/B,EACGK,IADH,CACQC,GAAG,IAAIJ,OAAO,CAACI,GAAG,CAACN,IAAL,CADtB,EAEGO,KAFH,CAESC,GAAG,IAAIL,MAAM,CAACK,GAAG,CAACC,QAAL,CAFtB;AAGD,CAJmD,CAA7C;AAMP,OAAO,MAAME,MAAM,GAAG,MAAM,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3DT,EAAAA,KAAK,CAACU,IAAN,CAAY,GAAEP,OAAQ,eAAtB,EAAsC,EAAtC,EAA0C;AACxCe,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAEjB,MAAM,CAACkB,GAAP,CAAW,IAAX;AAAjB;AAD+B,GAA1C,EAGGT,IAHH,CAGQC,GAAG,IAAIJ,OAAO,CAACI,GAAG,CAACN,IAAL,CAHtB,EAIGO,KAJH,CAISC,GAAG,IAAIL,MAAM,CAACK,GAAD,CAJtB;AAKD,CAN2B,CAArB;AAQP,OAAO,MAAMO,YAAY,GAAG,MAAM;AAChCnB,EAAAA,MAAM,CAACoB,MAAP,CAAc,IAAd;AACApB,EAAAA,MAAM,CAACoB,MAAP,CAAc,KAAd;AACApB,EAAAA,MAAM,CAACoB,MAAP,CAAc,QAAd;AACApB,EAAAA,MAAM,CAACoB,MAAP,CAAc,SAAd;AACD,CALM;AAOP,OAAO,MAAMC,aAAa,GAAIjB,IAAD,IAAyB;AACpDkB,EAAAA,MAAM,CAACC,IAAP,CAAYnB,IAAZ,EACGoB,OADH,CACWC,GAAG,IAAI;AACdzB,IAAAA,MAAM,CAAC0B,GAAP,CAAWD,GAAX,EAAgBrB,IAAI,CAACqB,GAAD,CAApB;AACD,GAHH;AAID,CALM","sourcesContent":["import axios from 'axios'\r\nimport config from 'next/config'\r\nimport Cookie from 'js-cookie'\r\nimport {\r\n  LoginCredentials,\r\n  RegistrationData,\r\n  LoginResponse\r\n} from '../types/auth.types'\r\n\r\nconst { API_URL } = config().publicRuntimeConfig\r\n\r\nexport const login = (data: LoginCredentials): Promise<LoginResponse> => new Promise((resolve, reject) => {\r\n  axios.post(`${API_URL}/users/login`, data)\r\n    .then(res => resolve(res.data))\r\n    .catch(err => reject(err.response))\r\n})\r\n\r\nexport const register = (data: RegistrationData) => new Promise((resolve, reject) => {\r\n  axios.post(`${API_URL}/users`, data)\r\n    .then(res => resolve(res.data))\r\n    .catch(err => reject(err.response))\r\n})\r\n\r\nexport const logout = () => new Promise((resolve, reject) => {\r\n  axios.post(`${API_URL}/users/logout`, {}, {\r\n    headers: { Authorization: Cookie.get('id') }\r\n  })\r\n    .then(res => resolve(res.data))\r\n    .catch(err => reject(err))\r\n})\r\n\r\nexport const deleteCookie = () => {\r\n  Cookie.remove('id')\r\n  Cookie.remove('ttl')\r\n  Cookie.remove('userId')\r\n  Cookie.remove('created')\r\n}\r\n\r\nexport const saveLoginData = (data: LoginResponse) => {\r\n  Object.keys(data)\r\n    .forEach(key => {\r\n      Cookie.set(key, data[key])\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}