{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { ChartRef } from './consts';\nimport Chart from './Chart';\nimport { addWidget, updateWidget, getWidgets, getWidgetData } from './actions';\nexport default function (editor, opt = {}) {\n  let updateTrait = [];\n  const domc = editor.DomComponents;\n  const defaultType = domc.getType('default');\n  const defaultModel = defaultType.model;\n  const defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    let newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(ChartRef, {\n    model: defaultModel.extend({\n      defaults: _objectSpread({}, defaultModel.prototype.defaults, {\n        droppable: true,\n        defaultData: [[{\n          \"Name\": \"Henery\",\n          \"Location\": \"Usa\",\n          \"id\": \"5c24dc26dc10670017e40921\",\n          \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n          \"notes\": \"\"\n        }]],\n        prevData: [],\n        dbId: [],\n        traits: [{\n          name: 'modify',\n          type: 'button',\n          text: `Modify`,\n          full: true,\n          command: editor => axios.get('http://173.249.14.149:3001/api/DataSources?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ').then(res => {\n            let component = editor.getSelected();\n            component.addTrait({\n              name: \"dataSource\",\n              type: \"select\",\n              changeProp: 1,\n              options: res.data.map(op => {\n                return {\n                  id: op.id,\n                  name: op.title\n                };\n              })\n            });\n            component.removeTrait('modify');\n          })\n        }],\n        toHTML: function () {\n          return \"\";\n        }\n      }),\n\n      init() {\n        this.listenTo(this, this.handlePropChange);\n\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait('modify').set('text', \"Edit\");\n          this.addTrait({\n            name: 'Prev',\n            type: 'pre',\n            text: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].dataSourceId === '5ec035f7bb377b08ebc8938a' ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId}</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.docId}</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields.toString().replace(/,/g, ' | ')}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${this.attributes.prevData[0].config.primaryKey}</span><br/>\n\t\t\t\t\t`\n          }, {\n            at: 0\n          });\n        }\n\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = '';\n          this.attributes.Table = '';\n          this.attributes.collections = '';\n        } else {\n          return null;\n        }\n      }\n\n    }),\n    view: defaultView.extend({\n      init() {\n        this.listenTo(this.model, `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`, this.handleChanges);\n      },\n\n      handleChanges() {\n        if (this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\")) {\n          axios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/doc-list?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`).then(response => {\n            const component = editor.getSelected();\n\n            if (this.model.attributes.Table) {}\n\n            component.addTrait({\n              name: \"Table\",\n              type: 'select',\n              options: response.data.map(t => {\n                return {\n                  id: t,\n                  name: t\n                };\n              }),\n              changeProp: 1\n            });\n          });\n        }\n\n        if (this.model.attributes.Table) {\n          axios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/field-list?docId=${this.model.attributes.Table}&access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`).then(response => {\n            const component = editor.getSelected();\n\n            if (updateTrait.length > 1) {\n              this.model.get('traits').each(function (trait) {\n                component.removeTrait(updateTrait.map(t => t.toString()));\n                component.removeTrait(\"collections\");\n                component.removeTrait(\"console\");\n              });\n            }\n\n            response.data.map(t => {\n              let res = [{\n                label: t,\n                name: t,\n                type: \"checkbox\",\n                changeProp: 1\n              }];\n              updateTrait.push(t);\n              component.addTrait(res);\n            });\n            component.addTrait({\n              label: \"Primary key\",\n              name: \"collections\",\n              type: \"select\",\n              options: response.data.map(t => t),\n              changeProp: 1\n            }, {\n              at: 40\n            });\n            component.addTrait({\n              type: 'button',\n              name: \"console\",\n              changeProp: 1,\n              label: \"log button\",\n              text: 'Click me',\n              full: true,\n              command: editor => {\n                const selected = editor.getSelected();\n                let postData = {};\n                let postDataArray = [];\n                selected.attributes.traits.models.forEach(element => {\n                  postData[element.attributes.name] = element.attributes.value;\n                });\n                postDataArray.push(postData);\n                let arr = null;\n                arr = postDataArray.map(js => {\n                  return {\n                    \"dataSourceId\": js.dataSource,\n                    \"config\": {\n                      \"fields\": displayOptions(js),\n                      \"primaryKey\": js.collections,\n                      \"docId\": js.Table,\n                      \"type\": \"simple\",\n                      \"func\": \"find\",\n                      \"query\": {}\n                    },\n                    \"type\": \"Chart\"\n                  };\n                })[0];\n                addWidget(arr).then(res => {\n                  console.log(res.data);\n                  let customId = res.data.id;\n                  this.model.attributes.prevData = [];\n                  this.model.attributes.prevData.push(res.data);\n\n                  if (this.model.attributes.prevData.length >= 1) {\n                    component.removeTrait('Prev');\n                  }\n\n                  axios.get(`http://173.249.14.149:3001/api/WidgetSettings/${customId}/execute-query?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`).then(reso => {\n                    console.log(reso.data);\n\n                    if (this.model.attributes.defaultData.length < 1) {\n                      this.model.attributes.defaultData.push(reso.data);\n                    } else {\n                      this.model.attributes.defaultData = [];\n                      this.model.attributes.defaultData.push(reso.data);\n                    }\n                  }).then(() => {\n                    ReactDOM.unmountComponentAtNode(this.el);\n                    this.render();\n                  });\n                });\n              }\n            });\n          });\n        }\n      },\n\n      onRender({\n        el\n      }) {\n        const comps = this.model.get('components');\n        comps.reset();\n        ReactDOM.render(__jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(Chart, {\n          data: this.model.attributes.defaultData[0]\n        }))), el);\n      }\n\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}