{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Swal from 'sweetalert2';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport { register } from '../../actions/auth.actions';\nimport countries from '../../helpers/countries';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { TextField } from '@material-ui/core';\nimport router from 'next/router';\n\nfunction countryToFlag(isoCode) {\n  return typeof String.fromCodePoint !== 'undefined' ? isoCode.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397)) : isoCode;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: '80vh',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  loginCard: {\n    padding: '30px 15px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center'\n  },\n  headerHolder: {\n    borderRight: '1px solid #DEDEDE'\n  },\n  formHolder: {},\n  textField: {\n    width: '90%'\n  },\n  fieldsGrid: {\n    marginTop: theme.spacing(4)\n  },\n  signupButtonHolder: {\n    display: 'flex',\n    marginTop: theme.spacing(4),\n    justifyContent: 'center'\n  },\n  signupButton: {\n    width: '50%'\n  },\n  loginHolder: {\n    textAlign: 'center',\n    marginTop: theme.spacing(3)\n  },\n  loginText: {\n    marginRight: theme.spacing(2)\n  },\n  loginButton: {}\n}));\n\nconst personalSignUp = () => {\n  const classes = useStyles();\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    countryCode: '',\n    phoneNumber: '',\n    country: '',\n    city: '',\n    password: '',\n    confirmPassword: '',\n    roleString: 'personal'\n  });\n\n  const handleChange = e => {\n    setData(_objectSpread({}, data, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const submitSignup = async () => {\n    try {\n      const user = await register(data);\n      router.push('/login');\n    } catch (e) {\n      switch (e.status) {\n        case 422:\n          Swal.fire('Error', 'Email already exists', 'error');\n          break;\n      }\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"firstName\",\n    label: 'First Name',\n    required: true,\n    onChange: handleChange,\n    value: data.firstName\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"lastName\",\n    label: 'Last Name',\n    required: true,\n    onChange: handleChange,\n    value: data.lastName\n  })))), __jsx(Grid, {\n    container: true,\n    className: classes.fieldsGrid\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"email\",\n    label: 'Email',\n    type: 'email',\n    required: true,\n    onChange: handleChange,\n    value: data.email\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Autocomplete, {\n    options: countries,\n    getOptionLabel: option => `+${option.phone}`,\n    renderOption: option => __jsx(React.Fragment, null, __jsx(\"span\", null, countryToFlag(option.code)), __jsx(\"span\", {\n      style: {\n        fontSize: '10px'\n      }\n    }, \"+\", option.phone)),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      name: 'countryCode',\n      label: \"Country Code\"\n    }))\n  })), __jsx(Grid, {\n    item: true,\n    xs: 8\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"phoneNumber\",\n    label: 'Phone Number',\n    onChange: handleChange,\n    value: data.phoneNumber\n  })))))), __jsx(Grid, {\n    container: true,\n    className: classes.fieldsGrid\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(Autocomplete, {\n    options: countries,\n    getOptionLabel: option => option.label,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      name: 'country',\n      label: \"Country\",\n      fullWidth: true,\n      required: true\n    }))\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"city\",\n    label: 'City',\n    required: true,\n    onChange: handleChange,\n    value: data.city\n  })))), __jsx(Grid, {\n    container: true,\n    className: classes.fieldsGrid\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"password\",\n    label: 'Password',\n    required: true,\n    onChange: handleChange,\n    value: data.password,\n    type: 'password'\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"confirmPassword\",\n    label: 'Confirm Password',\n    required: true,\n    onChange: handleChange,\n    value: data.confirmPassword,\n    type: 'password'\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.signupButtonHolder\n  }, __jsx(Button, {\n    className: classes.signupButton,\n    onClick: submitSignup\n  }, \"Signup\")));\n};\n\nexport default personalSignUp;","map":null,"metadata":{},"sourceType":"module"}