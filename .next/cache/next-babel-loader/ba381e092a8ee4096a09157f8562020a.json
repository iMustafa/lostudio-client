{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DataSourceActions from '../../../../actions/datasource.actions';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\n\nconst DatabaseConnection = ({\n  isAdding,\n  setDoc,\n  setDatasource,\n  setFields,\n  doc,\n  datasource,\n  fields,\n  primaryKey,\n  setPrimaryKey\n}) => {\n  const classes = useStyles();\n  const {\n    0: datasources,\n    1: setDatasources\n  } = useState([]);\n  const {\n    0: docList,\n    1: setDocList\n  } = useState([]);\n  const {\n    0: fieldList,\n    1: setFieldList\n  } = useState([]);\n  const {\n    0: query,\n    1: setQuery\n  } = useState({});\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({});\n\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource);\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc);\n        setDocList($docList);\n        setFieldList($fieldList);\n      }\n\n      setDatasources($datasources);\n      return $datasources;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getDocList = async id => {\n    try {\n      setDatasource(id);\n      const $docList = await DataSourceActions.getDocList(id);\n      setDocList($docList);\n      return $docList;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId);\n      const $fieldList = await DataSourceActions.getFieldList(id, docId);\n      setFieldList($fieldList);\n      return $fieldList;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleDatasourceChange = async event => {\n    const {\n      value\n    } = event.target;\n    setFieldList([]);\n    setFields([]);\n    await getDocList(value);\n  };\n\n  const handleDocChange = async event => {\n    const {\n      value\n    } = event.target;\n    setFieldList([]);\n    setFields([]);\n    await getFieldList(datasource, value);\n  };\n\n  const handleFieldChange = name => event => {\n    const {\n      checked\n    } = event.target;\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name));\n  };\n\n  const renderFieldSettings = () => fieldList.length ? __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Fields Settings\")), fieldList.map(field => __jsx(FormControlLabel, {\n    key: field,\n    control: __jsx(Checkbox, {\n      checked: fields.includes(field),\n      onChange: handleFieldChange(field),\n      value: field\n    }),\n    label: field\n  })), __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"primary-key\"\n  }, \"Primary Key\"), __jsx(Select, {\n    name: \"primaryKey\",\n    labelId: \"primary-key\",\n    value: primaryKey,\n    onChange: event => setPrimaryKey(event.target.value)\n  }, fields.map(item => __jsx(MenuItem, {\n    key: item,\n    value: item\n  }, item))))) : __jsx(\"div\", null);\n\n  const renderQuerySettings = () => fields.length ? __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Query Settings\")), fields.map(field => __jsx(\"div\", null))) : __jsx(\"div\", null);\n\n  useEffect(() => {\n    getDatasources();\n  }, []);\n  return __jsx(\"div\", null, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"data-source\"\n  }, \"Data Source\"), __jsx(Select, {\n    name: \"datasource\",\n    labelId: \"data-source\",\n    value: datasource,\n    onChange: handleDatasourceChange\n  }, datasources.map(item => __jsx(MenuItem, {\n    key: item.id,\n    value: item.id\n  }, item.title)))), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    disabled: datasource ? false : true\n  }, __jsx(InputLabel, {\n    id: \"doc-list\"\n  }, \"Table/Collection\"), __jsx(Select, {\n    name: \"docList\",\n    labelId: \"doc-list\",\n    value: doc,\n    onChange: handleDocChange\n  }, docList.map(item => __jsx(MenuItem, {\n    key: item,\n    value: item\n  }, item)))), renderFieldSettings(), renderQuerySettings());\n};\n\nexport default DatabaseConnection;","map":null,"metadata":{},"sourceType":"module"}