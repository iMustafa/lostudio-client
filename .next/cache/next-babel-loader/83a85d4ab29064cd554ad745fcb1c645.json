{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport config from \"next/config\";\nimport Cookie from \"js-cookie\";\nvar API_URL = config().publicRuntimeConfig.API_URL;\n\nvar DashboardActions = /*#__PURE__*/function () {\n  function DashboardActions() {\n    _classCallCheck(this, DashboardActions);\n  }\n\n  _createClass(DashboardActions, null, [{\n    key: \"createDashboard\",\n    value: function createDashboard(_ref) {\n      var Authorization, dashboard;\n      return _regeneratorRuntime.async(function createDashboard$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Authorization = _ref.Authorization, dashboard = _ref.dashboard;\n              return _context.abrupt(\"return\", axios.post(\"\".concat(API_URL, \"/Dashboards\"), dashboard, {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getDashboards\",\n    value: function getDashboards(_ref2) {\n      var Authorization, query;\n      return _regeneratorRuntime.async(function getDashboards$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Authorization = _ref2.Authorization, query = _ref2.query;\n              return _context2.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                },\n                params: {\n                  filter: {\n                    where: {\n                      isSub: false\n                    }\n                  }\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getWebpages\",\n    value: function getWebpages(_ref3) {\n      var Authorization;\n      return _regeneratorRuntime.async(function getWebpages$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              Authorization = _ref3.Authorization;\n              return _context3.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                },\n                params: {\n                  filter: {\n                    where: {\n                      type: \"webpage\"\n                    }\n                  }\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"linkSubDashboard\",\n    value: function linkSubDashboard(_ref4) {\n      var id, subDashboardId;\n      return _regeneratorRuntime.async(function linkSubDashboard$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              id = _ref4.id, subDashboardId = _ref4.subDashboardId;\n              return _context4.abrupt(\"return\", axios.post(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/subDashboards\"), {\n                dashboardId: id,\n                subDashboardId: subDashboardId\n              }, {\n                headers: {\n                  Authorization: Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"unLinkSubDashboard\",\n    value: function unLinkSubDashboard(_ref5) {\n      var id, subDashboardId;\n      return _regeneratorRuntime.async(function unLinkSubDashboard$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              id = _ref5.id, subDashboardId = _ref5.subDashboardId;\n              return _context5.abrupt(\"return\", axios[\"delete\"](\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/subDashboards/\").concat(subDashboardId), {\n                headers: {\n                  Authorization: Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getSubDashboards\",\n    value: function getSubDashboards(_ref6) {\n      var Authorization, id;\n      return _regeneratorRuntime.async(function getSubDashboards$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              Authorization = _ref6.Authorization, id = _ref6.id;\n              return _context6.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/subDashboards\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                },\n                params: {\n                  filter: {\n                    include: \"subDashboard\"\n                  }\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getDashboardById\",\n    value: function getDashboardById(id) {\n      return _regeneratorRuntime.async(function getDashboardById$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards/\").concat(id), {\n                headers: {\n                  Authorization: Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateDashboard\",\n    value: function updateDashboard(id, data) {\n      return _regeneratorRuntime.async(function updateDashboard$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", axios.patch(\"\".concat(API_URL, \"/Dashboards/\").concat(id), data).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"deleteDashboard\",\n    value: function deleteDashboard(data) {\n      return _regeneratorRuntime.async(function deleteDashboard$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", axios.post(\"\", {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getWidgetSettings\",\n    value: function getWidgetSettings(_ref7) {\n      var Authorization, id;\n      return _regeneratorRuntime.async(function getWidgetSettings$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              Authorization = _ref7.Authorization, id = _ref7.id;\n              return _context10.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/widgetSettings\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCollaborators\",\n    value: function getCollaborators(_ref8) {\n      var Authorization, id;\n      return _regeneratorRuntime.async(function getCollaborators$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              Authorization = _ref8.Authorization, id = _ref8.id;\n              return _context11.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/collaborators\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCollaboratorations\",\n    value: function getCollaboratorations(_ref9) {\n      var Authorization;\n      return _regeneratorRuntime.async(function getCollaboratorations$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              Authorization = _ref9.Authorization;\n              return _context12.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards/collaborations\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"addCollaborator\",\n    value: function addCollaborator(_ref10) {\n      var Authorization, email, id, editor, viewer;\n      return _regeneratorRuntime.async(function addCollaborator$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              Authorization = _ref10.Authorization, email = _ref10.email, id = _ref10.id, editor = _ref10.editor, viewer = _ref10.viewer;\n              return _context13.abrupt(\"return\", axios.post(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/dashboardRoleMappings\"), {\n                email: email,\n                editor: editor,\n                viewer: viewer\n              }, {\n                headers: {\n                  Authorization: Authorization || Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"addWidgetToDashboard\",\n    value: function addWidgetToDashboard(id, fk) {\n      return _regeneratorRuntime.async(function addWidgetToDashboard$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              return _context14.abrupt(\"return\", axios.put(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/widgetSettings/rel/\").concat(fk), {\n                dashboardId: id,\n                widgetSettingsId: fk\n              }, {\n                headers: {\n                  Authorization: Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"createWidgetInDashboard\",\n    value: function createWidgetInDashboard(id, widgetData) {\n      return _regeneratorRuntime.async(function createWidgetInDashboard$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              return _context15.abrupt(\"return\", axios.post(\"\".concat(API_URL, \"/Dashboards/\").concat(id, \"/widgetSettings\"), widgetData, {\n                headers: {\n                  Authorization: Cookie.get(\"id\")\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"removeWidgetFromDashboard\",\n    value: function removeWidgetFromDashboard(data) {\n      return _regeneratorRuntime.async(function removeWidgetFromDashboard$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              return _context16.abrupt(\"return\", axios.post(\"\", {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return DashboardActions;\n}();\n\nexport { DashboardActions as default };","map":null,"metadata":{},"sourceType":"module"}