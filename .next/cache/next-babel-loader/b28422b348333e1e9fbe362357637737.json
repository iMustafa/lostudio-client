{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/dashboards/add-dashboard-card.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport DashboardActions from \"../../actions/dashboard.actions\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    card: {\n      height: 258,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      paddingTop: 15\n    },\n    media: {\n      height: 140\n    },\n    title: {\n      textAlign: \"center\",\n      textTransform: \"uppercase\",\n      color: \"#3F51B5\"\n    }\n  };\n});\n\nvar AddDashboardCard = function AddDashboardCard(_ref) {\n  var type = _ref.type;\n  var classes = useStyles();\n\n  var _useState = useState({\n    title: \"\",\n    type: type,\n    description: \"\"\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var handleChange = function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, value)));\n  };\n\n  var createProject = function createProject() {\n    var title, description, _type, project;\n\n    return _regeneratorRuntime.async(function createProject$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(state.title && state.description)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.prev = 1;\n            title = state.title, description = state.description, _type = state.type;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(DashboardActions.createDashboard({\n              dashboard: {\n                title: title,\n                description: description,\n                type: _type\n              }\n            }));\n\n          case 5:\n            project = _context.sent;\n            setState(_objectSpread({}, state, {\n              title: '',\n              description: ''\n            }));\n            console.log(project);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]], Promise);\n  };\n\n  return __jsx(Card, {\n    className: classes.card,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Create new project\"), __jsx(CardContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    required: true,\n    name: \"title\",\n    label: \"Title\",\n    onChange: handleChange,\n    value: state.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), __jsx(TextField, {\n    fullWidth: true,\n    multiline: true,\n    required: true,\n    name: \"description\",\n    label: \"Description\",\n    onChange: handleChange,\n    value: state.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })), __jsx(CardActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    fullWidth: true,\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Create\")));\n};\n\nexport default AddDashboardCard;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/dashboards/add-dashboard-card.jsx"],"names":["useState","useEffect","makeStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","FormGroup","FormControl","TextField","InputLabel","DashboardActions","useStyles","theme","card","height","display","flexDirection","justifyContent","paddingTop","media","title","textAlign","textTransform","color","AddDashboardCard","type","classes","description","state","setState","handleChange","event","target","name","value","createProject","createDashboard","dashboard","project","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport DashboardActions from \"../../actions/dashboard.actions\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    height: 258,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    paddingTop: 15,\n  },\n  media: {\n    height: 140,\n  },\n  title: {\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    color: \"#3F51B5\",\n  },\n}));\n\nconst AddDashboardCard = ({ type }) => {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    title: \"\",\n    type,\n    description: \"\",\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setState({ ...state, [name]: value });\n  };\n\n  const createProject = async () => {\n    if (state.title && state.description) {\n      try {\n        const { title, description, type } = state;\n        const project = await DashboardActions.createDashboard({\n          dashboard: { title, description, type },\n        });\n        setState({...state, title: '', description: ''})\n        console.log(project)\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  return (\n    <Card className={classes.card}>\n      <Typography className={classes.title}>Create new project</Typography>\n\n      <CardContent>\n        <TextField\n          fullWidth\n          required\n          name=\"title\"\n          label=\"Title\"\n          onChange={handleChange}\n          value={state.title}\n        />\n        <TextField\n          fullWidth\n          multiline\n          required\n          name=\"description\"\n          label=\"Description\"\n          onChange={handleChange}\n          value={state.description}\n        />\n      </CardContent>\n\n      <CardActions>\n        <Button fullWidth color=\"primary\">\n          Create\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default AddDashboardCard;\n"]},"metadata":{},"sourceType":"module"}