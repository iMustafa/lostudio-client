{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Swal from 'sweetalert2';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport { register } from '../../actions/auth.actions';\nimport countries from '../../helpers/countries';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { TextField } from '@material-ui/core';\nimport router from 'next/router';\n\nfunction countryToFlag(isoCode) {\n  return typeof String.fromCodePoint !== 'undefined' ? isoCode.toUpperCase().replace(/./g, function (_char) {\n    return String.fromCodePoint(_char.charCodeAt(0) + 127397);\n  }) : isoCode;\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      minHeight: '80vh',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    loginCard: {\n      padding: '30px 15px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'center'\n    },\n    headerHolder: {\n      borderRight: '1px solid #DEDEDE'\n    },\n    formHolder: {},\n    textField: {\n      width: '90%'\n    },\n    fieldsGrid: {\n      marginTop: theme.spacing(4)\n    },\n    signupButtonHolder: {\n      display: 'flex',\n      marginTop: theme.spacing(4),\n      justifyContent: 'center'\n    },\n    signupButton: {\n      width: '50%'\n    },\n    loginHolder: {\n      textAlign: 'center',\n      marginTop: theme.spacing(3)\n    },\n    loginText: {\n      marginRight: theme.spacing(2)\n    },\n    loginButton: {}\n  };\n});\n\nvar personalSignUp = function personalSignUp() {\n  var classes = useStyles();\n\n  var _useState = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    countryCode: '',\n    phoneNumber: '',\n    country: '',\n    city: '',\n    password: '',\n    confirmPassword: '',\n    roleString: 'personal'\n  }),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var handleChange = function handleChange(e) {\n    setData(_objectSpread({}, data, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var submitSignup = function submitSignup() {\n    var user;\n    return _regeneratorRuntime.async(function submitSignup$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(register(data));\n\n          case 3:\n            user = _context.sent;\n            router.push('/login');\n            _context.next = 14;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            _context.t1 = _context.t0.status;\n            _context.next = _context.t1 === 422 ? 12 : 14;\n            break;\n\n          case 12:\n            Swal.fire('Error', 'Email already exists', 'error');\n            return _context.abrupt(\"break\", 14);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return __jsx(\"div\", null, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"firstName\",\n    label: 'First Name',\n    required: true,\n    onChange: handleChange,\n    value: data.firstName\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"lastName\",\n    label: 'Last Name',\n    required: true,\n    onChange: handleChange,\n    value: data.lastName\n  })))), __jsx(Grid, {\n    container: true,\n    className: classes.fieldsGrid\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"email\",\n    label: 'Email',\n    type: 'email',\n    required: true,\n    onChange: handleChange,\n    value: data.email\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Autocomplete, {\n    options: countries,\n    getOptionLabel: function getOptionLabel(option) {\n      return \"+\".concat(option.phone);\n    },\n    renderOption: function renderOption(option) {\n      return __jsx(React.Fragment, null, __jsx(\"span\", null, countryToFlag(option.code)), __jsx(\"span\", {\n        style: {\n          fontSize: '10px'\n        }\n      }, \"+\", option.phone));\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        name: 'countryCode',\n        label: \"Country Code\"\n      }));\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 8\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"phoneNumber\",\n    label: 'Phone Number',\n    onChange: handleChange,\n    value: data.phoneNumber\n  })))))), __jsx(Grid, {\n    container: true,\n    className: classes.fieldsGrid\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(Autocomplete, {\n    options: countries,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.label;\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        name: 'country',\n        label: \"Country\",\n        fullWidth: true,\n        required: true\n      }));\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"city\",\n    label: 'City',\n    required: true,\n    onChange: handleChange,\n    value: data.city\n  })))), __jsx(Grid, {\n    container: true,\n    className: classes.fieldsGrid\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"password\",\n    label: 'Password',\n    required: true,\n    onChange: handleChange,\n    value: data.password,\n    type: 'password'\n  }))), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(FormControl, {\n    className: classes.textField\n  }, __jsx(TextField, {\n    name: \"confirmPassword\",\n    label: 'Confirm Password',\n    required: true,\n    onChange: handleChange,\n    value: data.confirmPassword,\n    type: 'password'\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.signupButtonHolder\n  }, __jsx(Button, {\n    className: classes.signupButton,\n    onClick: submitSignup\n  }, \"Signup\")));\n};\n\nexport default personalSignUp;","map":null,"metadata":{},"sourceType":"module"}