{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/form-controls/file/file-widget-settings.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport Swal from 'sweetalert2';\nimport { Typography } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\nconst acceptedFileFormats = [\"text/plain\", \"application/pdf\", \"image/png\", \"image/tiff\", \"image/webp\", \"image/gif\", \"image/jpeg\", \"application/json\", \"audio/mpeg\", \"audio/wav\", \"audio/webm\", \"video/mpeg\", \"video/ogg\", \"video/mp2t\", \"video/webm\", \"video/3gpp\", \"video/3gpp2\", \"application/xml\", \"text/csv\"];\n\nconst FileWidgetSettings = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: properties,\n    1: setProperties\n  } = useState({\n    id: '',\n    name: '',\n    className: ''\n  });\n  const {\n    0: selectedFileFormats,\n    1: setSelectedFileFormats\n  } = useState([]);\n\n  const handlePropertiesChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setProperties(_objectSpread({}, properties, {\n      [name]: value\n    }));\n  };\n\n  const handleFieldChange = name => event => {\n    const {\n      checked\n    } = event.target;\n    checked ? setSelectedFileFormats([...selectedFileFormats, name]) : setSelectedFileFormats(selectedFileFormats.filter(format => format != name));\n  };\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        properties: _objectSpread({}, properties, {\n          acceptedFileFormats: selectedFileFormats\n        }),\n        type: 'File'\n      };\n\n      if (isAdding) {\n        onWidgetAdd(data);\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data);\n        handleSettingsClose(update);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Widget Info\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Title\"), __jsx(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), __jsx(\"h2\", {\n    className: classes.h2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"ID\"), __jsx(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Name\"), __jsx(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Class name\"), __jsx(Input, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), __jsx(\"h2\", {\n    className: classes.h2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Unique Properties\")), __jsx(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Accepted File Formats\"), acceptedFileFormats.map(format => __jsx(FormControlLabel, {\n    key: format,\n    control: __jsx(Checkbox, {\n      checked: selectedFileFormats.includes(format),\n      onChange: handleFieldChange(format),\n      value: format,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }),\n    label: format,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), __jsx(Button, {\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Save\"));\n};\n\nexport default FileWidgetSettings;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/form-controls/file/file-widget-settings.jsx"],"names":["useState","useEffect","makeStyles","Button","Input","InputLabel","FormControl","FormControlLabel","Checkbox","WidgetSettingsActions","Swal","Typography","useStyles","theme","list","width","paddingLeft","paddingRight","paddingTop","h2","textAlign","borderBottom","lineHeight","marginTop","marginBottom","fontFamily","fontSize","color","span","background","padding","formControl","acceptedFileFormats","FileWidgetSettings","widget","handleSettingsClose","isAdding","onWidgetAdd","classes","properties","setProperties","id","name","className","selectedFileFormats","setSelectedFileFormats","handlePropertiesChange","event","value","target","handleFieldChange","checked","filter","format","saveConfigData","data","dataSourceId","datasource","type","update","updateWidgetSettings","e","console","log","map","includes"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst acceptedFileFormats = [\n  \"text/plain\", \"application/pdf\", \"image/png\", \"image/tiff\", \"image/webp\", \"image/gif\", \"image/jpeg\",\n  \"application/json\", \"audio/mpeg\", \"audio/wav\", \"audio/webm\", \"video/mpeg\", \"video/ogg\", \"video/mp2t\",\n  \"video/webm\", \"video/3gpp\", \"video/3gpp2\", \"application/xml\", \"text/csv\"\n]\n\nconst FileWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [properties, setProperties] = useState({\n    id: '', name: '', className: ''\n  })\n  const [selectedFileFormats, setSelectedFileFormats] = useState([])\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setSelectedFileFormats([...selectedFileFormats, name]) : setSelectedFileFormats(selectedFileFormats.filter(format => format != name))\n  }\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        properties: {\n          ...properties,\n          acceptedFileFormats: selectedFileFormats\n        },\n        type: 'File'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Unique Properties</span>\n      </h2>\n      <Typography>Accepted File Formats</Typography>\n      {acceptedFileFormats.map(format => (<FormControlLabel\n        key={format}\n        control={\n          <Checkbox checked={selectedFileFormats.includes(format)} onChange={handleFieldChange(format)} value={format} />\n        }\n        label={format}\n      />))}\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default FileWidgetSettings"]},"metadata":{},"sourceType":"module"}