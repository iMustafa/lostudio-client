{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport Drawer from '@material-ui/core/Drawer';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ShareIcon from '@material-ui/icons/Share';\nimport TableWidgetSettings from './table-widget-settings';\nimport ExportTableData from './export-table-data';\nimport { measureConditionResult } from '../../../helpers/measure-conditions';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500\n    },\n    widgetActions: {\n      display: 'flex',\n      backgroundColor: \"#3F51B5\",\n      borderTopRightRadius: \"5px\",\n      borderTopLeftRadius: \"5px\"\n    },\n    widgetTitle: {\n      flex: 1,\n      display: 'flex',\n      alignContent: 'center',\n      alignItems: 'center',\n      paddingLeft: \"10px\"\n    },\n    actionButtons: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'flex-end'\n    }\n  };\n});\n\nvar TableWidget = function TableWidget(_ref) {\n  var widgetId = _ref.widgetId;\n  var classes = useStyles();\n\n  var _useState = useState(null),\n      widget = _useState[0],\n      setWidget = _useState[1];\n\n  var _useState2 = useState([]),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoadingData = _useState3[0],\n      setIsLoadingData = _useState3[1];\n\n  var _useState4 = useState(0),\n      refresh = _useState4[0],\n      setRefresh = _useState4[1];\n\n  var _useState5 = useState({\n    right: false,\n    \"export\": false\n  }),\n      menuState = _useState5[0],\n      setMenuState = _useState5[1];\n\n  var _useState6 = useState([]),\n      measureConditions = _useState6[0],\n      setMeasureConditions = _useState6[1];\n\n  var _useState7 = useState([]),\n      measureConditionsFields = _useState7[0],\n      setMeasureConditionsFields = _useState7[1];\n\n  useEffect(function () {\n    var getMeasureConditions = function getMeasureConditions() {\n      var $measureConditions;\n      return _regeneratorRuntime.async(function getMeasureConditions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsMeasureConditions(widgetId));\n\n            case 3:\n              $measureConditions = _context.sent;\n              setMeasureConditions($measureConditions);\n              setMeasureConditionsFields($measureConditions.map(function (condition) {\n                return condition.field;\n              }));\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    getMeasureConditions();\n  }, []);\n\n  var getWidgetData = function getWidgetData() {\n    var $data;\n    return _regeneratorRuntime.async(function getWidgetData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.executeWidgetQuery(widgetId));\n\n          case 3:\n            $data = _context2.sent;\n            setData($data);\n            return _context2.abrupt(\"return\", $data);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var getWidget = function getWidget() {\n    var $widget;\n    return _regeneratorRuntime.async(function getWidget$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsById(widgetId));\n\n          case 3:\n            $widget = _context3.sent;\n            setWidget($widget);\n            return _context3.abrupt(\"return\", $widget);\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    getWidget();\n    getWidgetData();\n  }, [refresh]);\n\n  var refreshData = function refreshData() {\n    return _regeneratorRuntime.async(function refreshData$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setIsLoadingData(true);\n            getWidget();\n            getWidgetData();\n            setIsLoadingData(false);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleSettingsClose = function handleSettingsClose() {\n    setRefresh(refresh + 1);\n    toggleDrawer('right', false);\n  };\n\n  var onRowAdd = function onRowAdd(newData) {\n    var $data;\n    return _regeneratorRuntime.async(function onRowAdd$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.addWidgetSettingsDocument(widgetId, newData));\n\n          case 3:\n            $data = _context5.sent;\n            getWidgetData();\n            return _context5.abrupt(\"return\", $data);\n\n          case 8:\n            _context5.prev = 8;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(_context5.t0);\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var onRowUpdate = function onRowUpdate(newData, oldData) {\n    var keyId, $data;\n    return _regeneratorRuntime.async(function onRowUpdate$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            keyId = oldData[widget.config.primaryKey];\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.editWidgetSettingsDocument(widgetId, newData, keyId));\n\n          case 4:\n            $data = _context6.sent;\n            getWidgetData();\n            return _context6.abrupt(\"return\", $data);\n\n          case 9:\n            _context6.prev = 9;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(_context6.t0);\n\n          case 12:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var onRowDelete = function onRowDelete(oldData) {\n    var keyId, $data;\n    return _regeneratorRuntime.async(function onRowDelete$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            keyId = oldData[widget.config.primaryKey];\n            _context7.next = 4;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.deleteWidgetSettingsDocument(widgetId, keyId));\n\n          case 4:\n            $data = _context7.sent;\n            getWidgetData();\n            return _context7.abrupt(\"return\", $data);\n\n          case 9:\n            _context7.prev = 9;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.log(_context7.t0);\n\n          case 12:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var editable = function editable() {\n    var _widget$config = widget.config,\n        isEditable = _widget$config.isEditable,\n        isDeletable = _widget$config.isDeletable,\n        isAddable = _widget$config.isAddable;\n    var obj = {};\n    if (isEditable) obj.onRowUpdate = onRowUpdate;\n    if (isDeletable) obj.onRowDelete = onRowDelete;\n    if (isAddable) obj.onRowAdd = onRowAdd;\n    return obj;\n  };\n\n  var renderTable = function renderTable() {\n    return isLoadingData || !widget ? __jsx(CircularProgress, null) : __jsx(MaterialTable, {\n      columns: widget.config.fields.map(function (field) {\n        return {\n          field: field,\n          title: field,\n          render: function render(rowData) {\n            var doesHaveCondition = measureConditionsFields.includes(field);\n\n            if (doesHaveCondition) {\n              var condition = measureConditions.filter(function (c) {\n                return c.field == field;\n              })[0];\n              var isConditionMet = measureConditionResult(condition, rowData[field]);\n              return isConditionMet ? __jsx(Typography, {\n                style: {\n                  backgroundColor: condition.color\n                }\n              }, rowData[field]) : __jsx(Typography, null, rowData[field]);\n            } else {\n              return __jsx(Typography, null, rowData[field]);\n            }\n          }\n        };\n      }),\n      data: data,\n      title: widget.title || '',\n      editable: editable()\n    });\n  };\n\n  var toggleDrawer = function toggleDrawer(side, open) {\n    return function (event) {\n      if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n      setMenuState(_objectSpread({}, menuState, _defineProperty({}, side, open)));\n    };\n  };\n\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.widgetActions\n  }, __jsx(\"div\", {\n    className: classes.widgetTitle\n  }, __jsx(Typography, {\n    style: {\n      color: \"#FFF\"\n    }\n  }, widget && widget.title ? widget.title : 'Widget Title')), __jsx(\"div\", {\n    className: classes.actionButtons\n  }, __jsx(IconButton, {\n    onClick: toggleDrawer('export', true)\n  }, __jsx(ShareIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })), __jsx(IconButton, {\n    onClick: toggleDrawer('right', true)\n  }, __jsx(SettingsIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })), __jsx(IconButton, {\n    onClick: refreshData\n  }, __jsx(RefreshIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })))), __jsx(\"div\", null, renderTable()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false)\n  }, __jsx(TableWidgetSettings, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose\n  })), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState[\"export\"],\n    onClose: toggleDrawer('export', false)\n  }, __jsx(ExportTableData, {\n    widget: widget,\n    data: data\n  })));\n};\n\nexport default TableWidget;","map":null,"metadata":{},"sourceType":"module"}