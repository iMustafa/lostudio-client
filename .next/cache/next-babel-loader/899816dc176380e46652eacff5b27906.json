{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TableRef } from \"./consts\";\nimport Material from \"./Material\";\nimport DashboardActions from \"../../../../actions/dashboard.actions\";\nimport DatasourceActions from \"../../../../actions/datasource.actions\";\nimport WidgetSettingsActions from \"../../../../actions/widgetSettings.actions\";\nexport default function (editor) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var id = opt.id;\n  var d = [[{\n    Name: \"Henery\",\n    Location: \"Usa\",\n    id: \"5c24dc26dc10670017e40921\",\n    \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n    notes: \"\"\n  }]];\n  var updateTrait = [];\n  var domc = editor.DomComponents;\n  var defaultType = domc.getType(\"default\");\n  var defaultModel = defaultType.model;\n  var defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    var newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(TableRef, {\n    model: defaultModel.extend({\n      defaults: _objectSpread({}, defaultModel.prototype.defaults, {\n        droppable: true,\n        defaultData: [[{\n          Name: \"Henery\",\n          Location: \"Usa\",\n          id: \"5c24dc26dc10670017e40921\",\n          \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n          notes: \"\"\n        }]],\n        prevData: [],\n        dbId: [],\n        keys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n        traits: [{\n          name: \"modify\",\n          type: \"button\",\n          text: \"Modify\",\n          full: true,\n          command: function command(editor) {\n            var datasources, component;\n            return _regeneratorRuntime.async(function command$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(DatasourceActions.getDatasources({}));\n\n                  case 3:\n                    datasources = _context.sent;\n                    component = editor.getSelected();\n                    component.addTrait({\n                      name: \"dataSource\",\n                      type: \"select\",\n                      changeProp: 1,\n                      options: datasources.map(function (op) {\n                        return {\n                          id: op.id,\n                          name: op.title\n                        };\n                      })\n                    });\n                    component.removeTrait(\"modify\");\n                    _context.next = 12;\n                    break;\n\n                  case 9:\n                    _context.prev = 9;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0, 9]], Promise);\n          }\n        }],\n        toHTML: function toHTML() {\n          return \"\";\n        }\n      }),\n      init: function init() {\n        this.listenTo(this, this.handlePropChange);\n\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait(\"modify\").set(\"text\", \"Edit\");\n          this.addTrait({\n            name: \"Prev\",\n            type: \"pre\",\n            text: \"\\n\\t\\t\\t\\t\\t\\tData Source : <span style=\\\"font-weight: bold;\\\">\".concat(this.attributes.prevData[0].dataSourceId === \"5ec035f7bb377b08ebc8938a\" ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId, \"</span><br/>\\n\\t\\t\\t\\t\\t\\t Table : <span style=\\\"font-weight: bold;\\\">\").concat(this.attributes.prevData[0].config.docId, \"</span><br/>\\n\\t\\t\\t\\t\\t\\tFields : <span style=\\\"font-weight: bold;\\\">\").concat(this.attributes.prevData[0].config.fields.toString().replace(/,/g, \" | \"), \"</span><br/>\\n\\t\\t\\t\\t\\t\\tPrimary key : <span style=\\\"font-weight: bold;\\\"> \").concat(this.attributes.prevData[0].config.primaryKey, \"</span><br/>\\n\\t\\t\\t\\t\\t\")\n          }, {\n            at: 0\n          });\n        }\n\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = \"\";\n          this.attributes.Table = \"\";\n          this.attributes.collections = \"\";\n        } else {\n          return null;\n        }\n      }\n    }),\n    view: defaultView.extend({\n      init: function init() {\n        this.listenTo(this.model, \"change:modify change:dataSource change:Table change:console change:\".concat(updateTrait.toString()), this.handleChanges);\n      },\n      handleChanges: function handleChanges() {\n        var _this = this;\n\n        var docList, component, fieldList, _component;\n\n        return _regeneratorRuntime.async(function handleChanges$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n\n                if (!(this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\"))) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 4;\n                return _regeneratorRuntime.awrap(DatasourceActions.getDocList(this.model.attributes.dataSource));\n\n              case 4:\n                docList = _context3.sent;\n                component = editor.getSelected();\n                component.addTrait({\n                  name: \"Table\",\n                  type: \"select\",\n                  options: docList.map(function (t) {\n                    return {\n                      id: t,\n                      name: t\n                    };\n                  }),\n                  changeProp: 1\n                });\n\n              case 7:\n                if (!this.model.attributes.Table) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.next = 10;\n                return _regeneratorRuntime.awrap(DatasourceActions.getFieldList(this.model.attributes.dataSource, this.model.attributes.Table));\n\n              case 10:\n                fieldList = _context3.sent;\n                _component = editor.getSelected();\n\n                if (updateTrait.length > 1) {\n                  this.model.get(\"traits\").each(function (trait) {\n                    _component.removeTrait(updateTrait.map(function (t) {\n                      return t.toString();\n                    }));\n\n                    _component.removeTrait(\"collections\");\n\n                    _component.removeTrait(\"console\");\n                  });\n                }\n\n                fieldList.map(function (t) {\n                  var res = [{\n                    label: t,\n                    name: t,\n                    type: \"checkbox\",\n                    changeProp: 1\n                  }];\n                  updateTrait.push(t);\n\n                  _component.addTrait(res);\n                });\n\n                _component.addTrait({\n                  label: \"Primary key\",\n                  name: \"collections\",\n                  type: \"select\",\n                  options: fieldList.map(function (t) {\n                    return t;\n                  }),\n                  changeProp: 1\n                }, {\n                  at: 40\n                });\n\n                _component.addTrait({\n                  type: \"button\",\n                  name: \"console\",\n                  changeProp: 1,\n                  label: \"log button\",\n                  text: \"Click me\",\n                  full: true,\n                  command: function command(editor) {\n                    var selected, postData, postDataArray, arr, widget, customId, queryResult;\n                    return _regeneratorRuntime.async(function command$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            selected = editor.getSelected();\n                            postData = {};\n                            postDataArray = [];\n                            selected.attributes.traits.models.forEach(function (element) {\n                              postData[element.attributes.name] = element.attributes.value;\n                            });\n                            postDataArray.push(postData);\n                            arr = null;\n                            _this.model.attributes.keys = [];\n                            arr = postDataArray.map(function (js) {\n                              _this.model.attributes.keys.push(displayOptions(js));\n\n                              return {\n                                dataSourceId: js.dataSource,\n                                config: {\n                                  fields: displayOptions(js),\n                                  primaryKey: js.collections,\n                                  docId: js.Table,\n                                  type: \"simple\",\n                                  func: \"find\",\n                                  query: {}\n                                },\n                                type: \"Table\"\n                              };\n                            })[0];\n                            _context2.next = 11;\n                            return _regeneratorRuntime.awrap(DashboardActions.createWidgetInDashboard(id, arr));\n\n                          case 11:\n                            widget = _context2.sent;\n                            customId = widget.id;\n                            _this.model.attributes.prevData = [];\n\n                            _this.model.attributes.prevData.push(widget);\n\n                            if (_this.model.attributes.prevData.length >= 1) {\n                              _component.removeTrait(\"Prev\");\n                            }\n\n                            _context2.next = 18;\n                            return _regeneratorRuntime.awrap(WidgetSettingsActions.executeWidgetQuery(customId));\n\n                          case 18:\n                            queryResult = _context2.sent;\n\n                            if (_this.model.attributes.defaultData.length < 1) {\n                              _this.model.attributes.defaultData.push(queryResult);\n                            } else {\n                              _this.model.attributes.defaultData = [];\n\n                              _this.model.attributes.defaultData.push(queryResult);\n                            }\n\n                            ReactDOM.unmountComponentAtNode(_this.el);\n\n                            _this.render();\n\n                            _context2.next = 27;\n                            break;\n\n                          case 24:\n                            _context2.prev = 24;\n                            _context2.t0 = _context2[\"catch\"](0);\n                            console.log(\">> Error:\", _context2.t0);\n\n                          case 27:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, null, null, [[0, 24]], Promise);\n                  }\n                });\n\n              case 16:\n                _context3.next = 21;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this, [[0, 18]], Promise);\n      },\n      onRender: function onRender(_ref) {\n        var el = _ref.el;\n        var comps = this.model.get(\"components\");\n        comps.reset();\n        ReactDOM.render(__jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(Material, {\n          keys: this.model.attributes.keys,\n          data: this.model.attributes.defaultData[0]\n        }))), el);\n      }\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}