{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/helpers/measure-conditions/add-measure-condition.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Colors from '../../../../helpers/css-colors';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport { conditionCases } from '../../../../helpers/measure-conditions';\n\nconst AddMeasureCondition = ({\n  widget,\n  setIsAddingMeasureCondition,\n  setRefresh,\n  refresh\n}) => {\n  const {\n    0: measureConditionsFields,\n    1: updateMeasureConditionsFields\n  } = useState({});\n  const {\n    0: fields,\n    1: setFields\n  } = useState(widget.config.fields);\n  const {\n    0: showSpinner,\n    1: setShowSpinner\n  } = useState(false);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    updateMeasureConditionsFields(_objectSpread({}, measureConditionsFields, {\n      [name]: value\n    }));\n  };\n\n  const addMeasureCondition = async () => {\n    try {\n      setShowSpinner(true);\n      const measureCondition = await WidgetSettingsActions.createWidgetSettingsMeasureConditions(widget.id, measureConditionsFields);\n      setShowSpinner(false);\n      setIsAddingMeasureCondition(false);\n      setRefresh(refresh + 1);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, __jsx(InputLabel, {\n    id: \"field-select-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Field\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"field-select-label\",\n    value: measureConditionsFields.field,\n    onChange: handleChange,\n    name: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, fields.map(field => __jsx(MenuItem, {\n    key: field,\n    value: field,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 36\n    }\n  }, field))))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, __jsx(InputLabel, {\n    id: \"expression-select-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"Expression\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"expression-select-label\",\n    value: measureConditionsFields.expression,\n    onChange: handleChange,\n    name: \"expression\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, conditionCases.map(conditionCase => __jsx(MenuItem, {\n    key: conditionCase.title,\n    value: conditionCase.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 52\n    }\n  }, conditionCase.friendlyName))))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(Autocomplete, {\n    fullWidth: true,\n    value: measureConditionsFields.color,\n    options: Colors,\n    getOptionLabel: option => option,\n    renderInput: _ => __jsx(TextField, {\n      fullWidth: true,\n      name: \"color\",\n      label: \"Color\",\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    type: \"number\",\n    label: \"Minimum Value\",\n    onChange: handleChange,\n    name: \"minValue\",\n    value: measureConditionsFields.minValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    type: \"number\",\n    name: \"maxValue\",\n    onChange: handleChange,\n    label: \"Maximum Value\",\n    value: measureConditionsFields.maxValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: () => {\n      setIsAddingMeasureCondition(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(CancelIcon, {\n    style: {\n      color: '#F00'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Cancel\"))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, showSpinner ? __jsx(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }) : __jsx(Button, {\n    fullWidth: true,\n    onClick: addMeasureCondition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, __jsx(SaveIcon, {\n    style: {\n      color: '#3F51B5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }\n  }, \"Save\")))));\n};\n\nexport default AddMeasureCondition;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/helpers/measure-conditions/add-measure-condition.jsx"],"names":["useState","Grid","Card","Button","InputLabel","Select","MenuItem","FormControl","TextField","Typography","SaveIcon","CancelIcon","CircularProgress","Colors","Autocomplete","WidgetSettingsActions","conditionCases","AddMeasureCondition","widget","setIsAddingMeasureCondition","setRefresh","refresh","measureConditionsFields","updateMeasureConditionsFields","fields","setFields","config","showSpinner","setShowSpinner","handleChange","event","name","value","target","addMeasureCondition","measureCondition","createWidgetSettingsMeasureConditions","id","e","console","log","padding","marginBottom","paddingLeft","paddingRight","field","map","expression","conditionCase","title","friendlyName","color","option","_","marginTop","minValue","maxValue","marginLeft"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Colors from '../../../../helpers/css-colors'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport { conditionCases } from '../../../../helpers/measure-conditions'\n\nconst AddMeasureCondition = ({ widget, setIsAddingMeasureCondition, setRefresh, refresh }) => {\n  const [measureConditionsFields, updateMeasureConditionsFields] = useState({})\n  const [fields, setFields] = useState(widget.config.fields)\n  const [showSpinner, setShowSpinner] = useState(false)\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    updateMeasureConditionsFields({ ...measureConditionsFields, [name]: value })\n  }\n\n  const addMeasureCondition = async () => {\n    try {\n      setShowSpinner(true)\n      const measureCondition = await WidgetSettingsActions.createWidgetSettingsMeasureConditions(widget.id, measureConditionsFields)\n      setShowSpinner(false)\n      setIsAddingMeasureCondition(false)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card style={{ padding: 15, marginBottom: 15 }}>\n      <Grid container spacing={0}>\n        <Grid item xs={4} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"field-select-label\">Field</InputLabel>\n            <Select\n              fullWidth\n              labelId=\"field-select-label\"\n              value={measureConditionsFields.field}\n              onChange={handleChange}\n              name=\"field\"\n            >\n              {fields.map(field => <MenuItem key={field} value={field}>{field}</MenuItem>)}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={4} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"expression-select-label\">Expression</InputLabel>\n            <Select\n              fullWidth\n              labelId=\"expression-select-label\"\n              value={measureConditionsFields.expression}\n              onChange={handleChange}\n              name=\"expression\"\n            >\n              {conditionCases.map(conditionCase => <MenuItem key={conditionCase.title} value={conditionCase.title}>{conditionCase.friendlyName}</MenuItem>)}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={4} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <Autocomplete\n            fullWidth\n            value={measureConditionsFields.color}\n            options={Colors}\n            getOptionLabel={option => option}\n            renderInput={_ => (\n              <TextField fullWidth name=\"color\" label=\"Color\" onChange={handleChange} />\n            )}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={0} style={{ marginTop: 15 }}>\n        <Grid item xs={6} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Minimum Value\"\n            onChange={handleChange}\n            name=\"minValue\"\n            value={measureConditionsFields.minValue}\n          />\n        </Grid>\n        <Grid item xs={6} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <TextField\n            fullWidth\n            type=\"number\"\n            name=\"maxValue\"\n            onChange={handleChange}\n            label=\"Maximum Value\"\n            value={measureConditionsFields.maxValue}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={0} style={{ marginTop: 15 }}>\n        <Grid item xs={6}>\n          <Button fullWidth onClick={() => { setIsAddingMeasureCondition(false) }}>\n            <CancelIcon style={{ color: '#F00' }} />\n            <Typography style={{ marginLeft: 10 }}>Cancel</Typography>\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          {\n            showSpinner ?\n              (\n                <CircularProgress />\n              ) : (\n                <Button fullWidth onClick={addMeasureCondition}>\n                  <SaveIcon style={{ color: '#3F51B5' }} />\n                  <Typography style={{ marginLeft: 10 }}>Save</Typography>\n                </Button>\n              )\n          }\n        </Grid>\n      </Grid>\n    </Card >\n  )\n}\n\nexport default AddMeasureCondition"]},"metadata":{},"sourceType":"module"}