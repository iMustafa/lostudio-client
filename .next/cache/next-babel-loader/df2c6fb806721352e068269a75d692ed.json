{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"F:\\\\Projects\\\\LoStudio\\\\client\\\\components\\\\notifications\\\\NotificationsItem.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport NotificationsActions from '../../actions/notifications.actions';\nimport Typography from '@material-ui/core/Typography';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    gridItem: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    },\n    message: {\n      alignSelf: 'flex-start',\n      fontSize: 14\n    },\n    date: {\n      alignSelf: 'flex-start',\n      fontSize: 12,\n      color: \"#555\"\n    }\n  };\n});\n\nvar NotificationItem = function NotificationItem(_ref) {\n  var notification = _ref.notification;\n  var classes = useStyles();\n\n  var _useState = useState(notification.seen),\n      isSeen = _useState[0],\n      setIsSeen = _useState[1];\n\n  var decideNotificationIcon = function decideNotificationIcon() {\n    switch (notification.type) {\n      case \"Dashboard Collaboration\":\n        return __jsx(DashboardIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n    }\n  };\n\n  var markSeen = function markSeen() {\n    return _regeneratorRuntime.async(function markSeen$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (notification.seen) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(NotificationsActions.markAsSeen({\n              id: notification.id\n            }));\n\n          case 4:\n            setIsSeen(true);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 7]]);\n  };\n\n  return __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(Grid, {\n    spacing: 0,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2,\n    className: classes.gridItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, decideNotificationIcon()), __jsx(Grid, {\n    item: true,\n    xs: 10,\n    className: classes.gridItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, notification.message), __jsx(Typography, {\n    className: classes.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, moment(notification.createdAt).format('YYYY/MM/DD HH:mm')))));\n};\n\nexport default NotificationItem;","map":{"version":3,"sources":["F:/Projects/LoStudio/client/components/notifications/NotificationsItem.jsx"],"names":["useEffect","useState","moment","makeStyles","Card","Grid","NotificationsActions","Typography","DashboardIcon","useStyles","theme","gridItem","display","flexDirection","justifyContent","alignContent","alignItems","message","alignSelf","fontSize","date","color","NotificationItem","notification","classes","seen","isSeen","setIsSeen","decideNotificationIcon","type","markSeen","markAsSeen","id","console","log","createdAt","format"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport moment from 'moment'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport NotificationsActions from '../../actions/notifications.actions'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  gridItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  message: {\r\n    alignSelf: 'flex-start',\r\n    fontSize: 14\r\n  },\r\n  date: {\r\n    alignSelf: 'flex-start',\r\n    fontSize: 12,\r\n    color: \"#555\"\r\n  }\r\n}))\r\n\r\nconst NotificationItem = ({ notification }) => {\r\n  const classes = useStyles()\r\n  const [isSeen, setIsSeen] = useState(notification.seen)\r\n\r\n  const decideNotificationIcon = () => {\r\n    switch (notification.type) {\r\n      case \"Dashboard Collaboration\":\r\n        return (<DashboardIcon />)\r\n    }\r\n  }\r\n\r\n  const markSeen = async () => {\r\n    if (!notification.seen) {\r\n      try {\r\n        await NotificationsActions.markAsSeen({ id: notification.id })\r\n        setIsSeen(true)\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Grid spacing={0} container>\r\n        <Grid item xs={2} className={classes.gridItem}>\r\n          {decideNotificationIcon()}\r\n        </Grid>\r\n        <Grid item xs={10} className={classes.gridItem}>\r\n          <Typography className={classes.message}>{notification.message}</Typography>\r\n          <Typography className={classes.date}>{moment(notification.createdAt).format('YYYY/MM/DD HH:mm')}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NotificationItem"]},"metadata":{},"sourceType":"module"}