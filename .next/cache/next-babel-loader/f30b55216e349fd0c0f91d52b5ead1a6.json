{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\LoStudio\\\\client\\\\components\\\\dashboards\\\\create-dashboard.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '25px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n  },\n  emptyCardBody: {\n    padding: 10,\n    height: 200,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center'\n  }\n}));\n\nconst CreateDashboard = () => {\n  const classes = useStyles();\n  const {\n    0: activeStep,\n    1: setActiveStep\n  } = useState(0);\n  const {\n    0: skipped,\n    1: setSkipped\n  } = useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = step => step === 1;\n\n  const isStepSkipped = step => skipped.has(step);\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return __jsx(Card, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Create new dashboard\"), __jsx(\"div\", {\n    className: classes.cardBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, steps.map((label, index) => {\n    const stepProps = {};\n    const labelProps = {};\n\n    if (isStepOptional(index)) {\n      labelProps.optional = __jsx(Typography, {\n        variant: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return __jsx(Step, _extends({\n      key: label\n    }, stepProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), __jsx(StepLabel, _extends({}, labelProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), label));\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, activeStep === steps.length ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"All steps completed - you're finished\"), __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Reset\")) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, getStepContent(activeStep)), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Back\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, activeStep === steps.length - 1 ? 'Finish' : 'Next')))))));\n};\n\nexport default CreateDashboard;","map":{"version":3,"sources":["F:/Projects/LoStudio/client/components/dashboards/create-dashboard.jsx"],"names":["useState","makeStyles","Grid","Card","Stepper","Step","StepLabel","Button","Typography","useStyles","theme","root","marginTop","cardBody","padding","cardTitle","fontSize","backgroundColor","color","fontFamily","emptyCardBody","height","display","flexDirection","justifyContent","alignContent","alignItems","CreateDashboard","classes","activeStep","setActiveStep","skipped","setSkipped","Set","steps","getSteps","isStepOptional","step","isStepSkipped","has","handleNext","newSkipped","values","delete","prevActiveStep","handleBack","handleReset","map","label","index","stepProps","labelProps","optional","completed","length","instructions","button","getStepContent"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop: '25px'\r\n  },\r\n  cardBody: {\r\n    padding: '10px'\r\n  },\r\n  cardTitle: {\r\n    fontSize: '12px',\r\n    backgroundColor: '#3F51B5',\r\n    padding: '3px 3px 3px 6px',\r\n    color: '#FFF',\r\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\r\n  },\r\n  emptyCardBody: {\r\n    padding: 10,\r\n    height: 200,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n}))\r\n\r\n\r\nconst CreateDashboard = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n  const [skipped, setSkipped] = useState(new Set())\r\n  const steps = getSteps()\r\n\r\n  const isStepOptional = step => step === 1\r\n  const isStepSkipped = step => skipped.has(step)\r\n  const handleNext = () => {\r\n    let newSkipped = skipped\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values())\r\n      newSkipped.delete(activeStep)\r\n    }\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    setSkipped(newSkipped)\r\n  }\r\n  const handleBack = () => { setActiveStep((prevActiveStep) => prevActiveStep - 1) }\r\n  const handleReset = () => { setActiveStep(0) }\r\n\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <div className={classes.cardTitle}>Create new dashboard</div>\r\n      <div className={classes.cardBody}>\r\n        <div className={classes.root}>\r\n          <Stepper activeStep={activeStep}>\r\n            {steps.map((label, index) => {\r\n              const stepProps = {};\r\n              const labelProps = {};\r\n              if (isStepOptional(index)) {\r\n                labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n              }\r\n              if (isStepSkipped(index)) {\r\n                stepProps.completed = false;\r\n              }\r\n              return (\r\n                <Step key={label} {...stepProps}>\r\n                  <StepLabel {...labelProps}>{label}</StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n          <div>\r\n            {activeStep === steps.length ? (\r\n              <div>\r\n                <Typography className={classes.instructions}>\r\n                  All steps completed - you&apos;re finished\r\n            </Typography>\r\n                <Button onClick={handleReset} className={classes.button}>\r\n                  Reset\r\n            </Button>\r\n              </div>\r\n            ) : (\r\n                <div>\r\n                  <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n                  <div>\r\n                    <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                      Back\r\n                    </Button>\r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleNext}\r\n                      className={classes.button}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CreateDashboard"]},"metadata":{},"sourceType":"module"}