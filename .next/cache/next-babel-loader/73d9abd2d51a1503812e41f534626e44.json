{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nvar API_URL = config().publicRuntimeConfig.API_URL;\n\nvar NotificationsActions = /*#__PURE__*/function () {\n  function NotificationsActions() {\n    _classCallCheck(this, NotificationsActions);\n  }\n\n  _createClass(NotificationsActions, null, [{\n    key: \"getMyNotificationsCount\",\n    value: function getMyNotificationsCount(_ref) {\n      var Authorization, userId;\n      return _regeneratorRuntime.async(function getMyNotificationsCount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Authorization = _ref.Authorization, userId = _ref.userId;\n              return _context.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/users/\").concat(userId || Cookie.get('userId'), \"/notifications/count\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                },\n                params: {\n                  filter: {\n                    where: {\n                      seen: false\n                    }\n                  }\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getMyNotifications\",\n    value: function getMyNotifications(_ref2) {\n      var Authorization, userId;\n      return _regeneratorRuntime.async(function getMyNotifications$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Authorization = _ref2.Authorization, userId = _ref2.userId;\n              return _context2.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/users/\").concat(userId || Cookie.get('userId'), \"/notifications\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"markAsSeen\",\n    value: function markAsSeen(_ref3) {\n      var Authorization, id;\n      return _regeneratorRuntime.async(function markAsSeen$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              Authorization = _ref3.Authorization, id = _ref3.id;\n              return _context3.abrupt(\"return\", axios.patch(\"\".concat(API_URL, \"/Notifications/\").concat(id), {\n                seen: true\n              }, {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return NotificationsActions;\n}();\n\nexport { NotificationsActions as default };","map":null,"metadata":{},"sourceType":"module"}