{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/dashboards/create-dashboard.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport DatasourceActions from '../../actions/datasource.actions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport DashboardActions from '../../actions/dashboard.actions';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '25px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n  },\n  actionButtons: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}));\n\nconst getSteps = () => ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation'];\n\nconst CreateDashboard = () => {\n  const classes = useStyles();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    title: '',\n    description: '',\n    datasourceId: '',\n    collaborators: []\n  });\n  const {\n    0: activeStep,\n    1: setActiveStep\n  } = useState(0);\n  const {\n    0: datasources,\n    1: setDatasources\n  } = useState([]);\n  const {\n    0: skipped,\n    1: setSkipped\n  } = useState(new Set());\n  const steps = getSteps();\n  useEffect(() => {\n    const getDataSources = async () => {\n      try {\n        const data = await DatasourceActions.getDatasources({});\n        console.log(data);\n        setDatasources(data);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getDataSources();\n  }, []);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setState(_objectSpread({}, state, {\n      [name]: value\n    }));\n  };\n\n  const getStepContent = step => {\n    switch (step) {\n      case 0:\n        return __jsx(FormGroup, {\n          row: true,\n          style: {\n            marginBottom: 15\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, __jsx(TextField, {\n          onChange: handleChange,\n          fullWidth: true,\n          label: \"Title\",\n          type: \"text\",\n          name: \"title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }), __jsx(TextField, {\n          onChange: handleChange,\n          fullWidth: true,\n          label: \"Description\",\n          multiline: true,\n          type: \"text\",\n          name: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }));\n\n      case 1:\n        return __jsx(FormGroup, {\n          row: true,\n          style: {\n            marginBottom: 15\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, __jsx(InputLabel, {\n          id: \"datasource-label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"Default DataSource\"), __jsx(Select, {\n          value: state.datasourceId,\n          onChange: handleChange,\n          name: \"datasourceId\",\n          fullWidth: true,\n          labelId: \"datasource-label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, datasources.map(datasource => __jsx(MenuItem, {\n          value: datasource.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, datasource.title))));\n\n      case 2:\n        return 'Allow people to help you build your dashboard!';\n\n      case 3:\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"Name: \", state.title), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"Description: \", state.description), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"Datasource: \", state.datasourceId));\n\n      default:\n        return 'Unknown step';\n    }\n  };\n\n  const isStepOptional = step => step === 2;\n\n  const isStepSkipped = step => skipped.has(step);\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const submitData = async () => {\n    try {\n      const dashboard = await DashboardActions.createDashboard({\n        dashboard: state\n      });\n      console.log(dashboard);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(Card, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Create new dashboard\"), __jsx(\"div\", {\n    className: classes.cardBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, steps.map((label, index) => {\n    const stepProps = {};\n    const labelProps = {};\n\n    if (isStepOptional(index)) {\n      labelProps.optional = __jsx(Typography, {\n        variant: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return __jsx(Step, _extends({\n      key: label\n    }, stepProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), __jsx(StepLabel, _extends({}, labelProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), label));\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, activeStep === steps.length ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"All steps completed - you're finished\"), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Reset\"))) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, getStepContent(activeStep)), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Back\"), activeStep === steps.length - 1 ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: submitData,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Finish\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Next\")))))));\n};\n\nexport default CreateDashboard;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/dashboards/create-dashboard.jsx"],"names":["useState","useEffect","DatasourceActions","makeStyles","Grid","Card","Stepper","Step","StepLabel","Button","Typography","FormGroup","FormControl","TextField","Select","MenuItem","InputLabel","DashboardActions","useStyles","theme","root","marginTop","cardBody","padding","cardTitle","fontSize","backgroundColor","color","fontFamily","actionButtons","display","justifyContent","getSteps","CreateDashboard","classes","state","setState","title","description","datasourceId","collaborators","activeStep","setActiveStep","datasources","setDatasources","skipped","setSkipped","Set","steps","getDataSources","data","getDatasources","console","log","e","handleChange","event","name","value","target","getStepContent","step","marginBottom","map","datasource","id","isStepOptional","isStepSkipped","has","handleNext","newSkipped","values","delete","prevActiveStep","handleBack","handleReset","submitData","dashboard","createDashboard","label","index","stepProps","labelProps","optional","completed","length","instructions","button"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport DatasourceActions from '../../actions/datasource.actions'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport DashboardActions from '../../actions/dashboard.actions'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '25px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n  },\n  actionButtons: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}))\n\nconst getSteps = () => ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation']\n\nconst CreateDashboard = () => {\n  const classes = useStyles()\n  const [state, setState] = useState({\n    title: '',\n    description: '',\n    datasourceId: '',\n    collaborators: []\n  })\n  const [activeStep, setActiveStep] = useState(0)\n  const [datasources, setDatasources] = useState([])\n  const [skipped, setSkipped] = useState(new Set())\n  const steps = getSteps()\n\n  useEffect(() => {\n    const getDataSources = async () => {\n      try {\n        const data = await DatasourceActions.getDatasources({})\n        console.log(data)\n        setDatasources(data)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getDataSources()\n  }, [])\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    setState({ ...state, [name]: value })\n  }\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return (\n          <FormGroup row style={{ marginBottom: 15 }}>\n            <TextField onChange={handleChange} fullWidth label=\"Title\" type='text' name='title' />\n            <TextField onChange={handleChange} fullWidth label=\"Description\" multiline={true} type='text' name='description' />\n          </FormGroup>\n        );\n      case 1:\n        return (\n          <FormGroup row style={{ marginBottom: 15 }}>\n            <InputLabel id='datasource-label'>Default DataSource</InputLabel>\n            <Select value={state.datasourceId} onChange={handleChange} name='datasourceId' fullWidth labelId='datasource-label'>\n              {datasources.map(datasource => (\n                <MenuItem value={datasource.id}>{datasource.title}</MenuItem>\n              ))}\n            </Select>\n          </FormGroup>\n        );\n      case 2:\n        return 'Allow people to help you build your dashboard!';\n      case 3:\n        return (\n          <div>\n            <p>Name: {state.title}</p>\n            <p>Description: {state.description}</p>\n            <p>Datasource: {state.datasourceId}</p>\n          </div>\n        );\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  const isStepOptional = step => step === 2\n  const isStepSkipped = step => skipped.has(step)\n  const handleNext = () => {\n    let newSkipped = skipped\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values())\n      newSkipped.delete(activeStep)\n    }\n    setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    setSkipped(newSkipped)\n  }\n  const handleBack = () => { setActiveStep((prevActiveStep) => prevActiveStep - 1) }\n  const handleReset = () => { setActiveStep(0) }\n\n  const submitData = async () => {\n    try {\n      const dashboard = await DashboardActions.createDashboard({ dashboard: state })\n      console.log(dashboard)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.cardTitle}>Create new dashboard</div>\n      <div className={classes.cardBody}>\n        <div className={classes.root}>\n          <Stepper activeStep={activeStep}>\n            {steps.map((label, index) => {\n              const stepProps = {};\n              const labelProps = {};\n              if (isStepOptional(index)) {\n                labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n              }\n              if (isStepSkipped(index)) {\n                stepProps.completed = false;\n              }\n              return (\n                <Step key={label} {...stepProps}>\n                  <StepLabel {...labelProps}>{label}</StepLabel>\n                </Step>\n              );\n            })}\n          </Stepper>\n          <div>\n            {\n              activeStep === steps.length ?\n                (\n                  <div>\n                    <Typography className={classes.instructions}>\n                      All steps completed - you&apos;re finished\n                    </Typography>\n                    <div className={classes.actionButtons}>\n                      <Button onClick={handleReset} className={classes.button}>\n                        Reset\n                     </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                    <div className={classes.actionButtons}>\n                      <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                        Back\n                      </Button>\n                      {\n                        activeStep === steps.length - 1 ?\n                          (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={submitData}\n                              className={classes.button}\n                            >\n                              Finish\n                            </Button>\n                          ) : (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={handleNext}\n                              className={classes.button}\n                            >\n                              Next\n                            </Button>\n                          )\n                      }\n                    </div>\n                  </div>\n                )\n            }\n          </div>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default CreateDashboard"]},"metadata":{},"sourceType":"module"}