{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/charts/line-chart/line-chart-widget.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Chart, ArgumentAxis, ValueAxis, LineSeries, Legend } from '@devexpress/dx-react-chart-material-ui';\nimport { ValueScale } from '@devexpress/dx-react-chart';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Drawer from '@material-ui/core/Drawer';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport LineChartWidgetSettings from './line-chart-widget-settings';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500\n    },\n    widgetActions: {\n      display: 'flex',\n      backgroundColor: \"#3F51B5\",\n      borderTopRightRadius: \"5px\",\n      borderTopLeftRadius: \"5px\"\n    },\n    widgetTitle: {\n      flex: 1,\n      display: 'flex',\n      alignContent: 'center',\n      alignItems: 'center',\n      paddingLeft: \"10px\"\n    },\n    actionButtons: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'flex-end'\n    }\n  };\n});\n\nvar LineChartWidget = function LineChartWidget(_ref) {\n  var widgetId = _ref.widgetId;\n  var classes = useStyles();\n\n  var _useState = useState(null),\n      widget = _useState[0],\n      setWidget = _useState[1];\n\n  var _useState2 = useState([]),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoadingData = _useState3[0],\n      setIsLoadingData = _useState3[1];\n\n  var _useState4 = useState(0),\n      refresh = _useState4[0],\n      setRefresh = _useState4[1];\n\n  var _useState5 = useState({\n    right: false\n  }),\n      menuState = _useState5[0],\n      setMenuState = _useState5[1];\n\n  var getWidgetData = function getWidgetData() {\n    var $data;\n    return _regeneratorRuntime.async(function getWidgetData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.executeWidgetQuery(widgetId));\n\n          case 3:\n            $data = _context.sent;\n            setData($data);\n            return _context.abrupt(\"return\", $data);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]]);\n  };\n\n  var getWidget = function getWidget() {\n    var $widget;\n    return _regeneratorRuntime.async(function getWidget$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsById(widgetId));\n\n          case 3:\n            $widget = _context2.sent;\n            setWidget($widget);\n            return _context2.abrupt(\"return\", $widget);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]]);\n  };\n\n  useEffect(function () {\n    getWidget();\n    getWidgetData();\n  }, [refresh]);\n\n  var refreshData = function refreshData() {\n    return _regeneratorRuntime.async(function refreshData$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setIsLoadingData(true);\n            getWidget();\n            getWidgetData();\n            setIsLoadingData(false);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  };\n\n  var handleSettingsClose = function handleSettingsClose() {\n    setRefresh(refresh + 1);\n    toggleDrawer('right', false);\n  };\n\n  var toggleDrawer = function toggleDrawer(side, open) {\n    return function (event) {\n      if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n      setMenuState(_objectSpread({}, menuState, _defineProperty({}, side, open)));\n    };\n  };\n\n  var renderTable = function renderTable() {\n    return isLoadingData || !widget ? __jsx(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }) : __jsx(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, __jsx(Chart, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, __jsx(ValueScale, {\n      name: \"total\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), __jsx(ArgumentAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), __jsx(ValueAxis, {\n      scaleName: \"total\",\n      position: \"left\",\n      showGrid: true,\n      showLine: true,\n      showTicks: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), __jsx(LineSeries, {\n      name: \"Total Transactions\",\n      valueField: \"total\",\n      argumentField: \"month\",\n      scaleName: \"total\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), __jsx(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.widgetActions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.widgetTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(Typography, {\n    style: {\n      color: \"#FFF\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Widget Title\")), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(IconButton, {\n    onClick: toggleDrawer('right', true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(SettingsIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), __jsx(IconButton, {\n    onClick: refreshData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(RefreshIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })))), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, renderTable()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(LineChartWidgetSettings, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })));\n};\n\nexport default LineChartWidget;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/charts/line-chart/line-chart-widget.jsx"],"names":["useState","useEffect","makeStyles","Paper","Chart","ArgumentAxis","ValueAxis","LineSeries","Legend","ValueScale","Typography","CircularProgress","IconButton","RefreshIcon","SettingsIcon","Drawer","WidgetSettingsActions","LineChartWidgetSettings","useStyles","theme","list","width","widgetActions","display","backgroundColor","borderTopRightRadius","borderTopLeftRadius","widgetTitle","flex","alignContent","alignItems","paddingLeft","actionButtons","justifyContent","LineChartWidget","widgetId","classes","widget","setWidget","data","setData","isLoadingData","setIsLoadingData","refresh","setRefresh","right","menuState","setMenuState","getWidgetData","executeWidgetQuery","$data","console","log","getWidget","getWidgetSettingsById","$widget","refreshData","handleSettingsClose","toggleDrawer","side","open","event","type","key","renderTable","color"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  LineSeries,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { ValueScale } from '@devexpress/dx-react-chart'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport LineChartWidgetSettings from './line-chart-widget-settings'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\",\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))\n\nconst LineChartWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [data, setData] = useState([])\n  const [isLoadingData, setIsLoadingData] = useState(false)\n  const [refresh, setRefresh] = useState(0)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n      setData($data)\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n      setWidget($widget)\n      return $widget\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getWidget()\n    getWidgetData()\n  }, [refresh])\n\n  const refreshData = async () => {\n    setIsLoadingData(true)\n    getWidget()\n    getWidgetData()\n    setIsLoadingData(false)\n  }\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1)\n    toggleDrawer('right', false)\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const renderTable = () => {\n    return isLoadingData || !widget ? (<CircularProgress />) : <Paper>\n      <Chart data={data}>\n        <ValueScale name=\"total\" />\n        <ArgumentAxis />\n        <ValueAxis scaleName=\"total\" position=\"left\" showGrid={true} showLine showTicks />\n        <LineSeries\n          name=\"Total Transactions\"\n          valueField=\"total\"\n          argumentField=\"month\"\n          scaleName=\"total\"\n        />\n        <Legend />\n      </Chart>\n    </Paper>\n  }\n\n  return (\n    <div>\n      <div className={classes.widgetActions}>\n        <div className={classes.widgetTitle}>\n          <Typography style={{ color: \"#FFF\" }}>Widget Title</Typography>\n        </div>\n        <div className={classes.actionButtons}>\n          <IconButton onClick={toggleDrawer('right', true)}>\n            <SettingsIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={refreshData}>\n            <RefreshIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n        </div>\n      </div>\n      <div>\n        {renderTable()}\n      </div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        <LineChartWidgetSettings widget={widget} handleSettingsClose={handleSettingsClose} />\n      </Drawer>\n    </div>\n  )\n}\n\nexport default LineChartWidget"]},"metadata":{},"sourceType":"module"}