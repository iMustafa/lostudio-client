{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { Button } from '@material-ui/core';\nimport DatasourceActions from '../../../actions/datasource.actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      padding: '30px 15px 15px 15px'\n    },\n    cardBody: {\n      padding: '10px'\n    },\n    cardTitle: {\n      fontSize: '12px',\n      backgroundColor: '#3F51B5',\n      padding: '3px 3px 3px 6px',\n      color: '#FFF',\n      fontFamily: \"Roboto\"\n    },\n    gridStyles: {\n      margin: '10px 0 5px 0',\n      width: '100%'\n    },\n    h2: {\n      width: '100%',\n      textAlign: 'center',\n      borderBottom: '1px solid #000',\n      lineHeight: '0.1em',\n      margin: '10px 0 20px',\n      fontFamily: 'Roboto',\n      fontSize: '13px',\n      color: \"#3F51B5\"\n    },\n    span: {\n      background: '#fff',\n      padding: '0 10px'\n    },\n    card: {\n      padding: '10px 15px 20px 15px',\n      marginBottom: '20px'\n    }\n  };\n});\n\nvar AddMsSQLDataSource = function AddMsSQLDataSource() {\n  var classes = useStyles();\n\n  var _useState = useState({\n    showPassword: false,\n    useAuth: 0,\n    isLoading: false\n  }),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useState2 = useState(0),\n      attempts = _useState2[0],\n      setAttempts = _useState2[1];\n\n  var _useState3 = useState({\n    title: '',\n    type: 'mssql',\n    force: false,\n    description: '',\n    config: {\n      port: 27017,\n      server: '',\n      db: '',\n      user: '',\n      password: ''\n    }\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var handleSubmitData = function handleSubmitData() {\n    var res;\n    return _regeneratorRuntime.async(function handleSubmitData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setValues(_objectSpread({}, values, {\n              isLoading: true\n            }));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(DatasourceActions.createDatasource(state));\n\n          case 4:\n            res = _context.sent;\n            setValues(_objectSpread({}, values, {\n              isLoading: false\n            }));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (_context.t0.error.message == 'Connection Failed') {\n              setState(_objectSpread({}, state, {\n                force: true\n              }));\n              setAttempts(1);\n            }\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    var _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n    setState(_objectSpread({}, state, _defineProperty({}, name, value)));\n    setAttempts(0);\n  };\n\n  var handleAuthChange = function handleAuthChange(event) {\n    var _event$target2 = event.target,\n        value = _event$target2.value,\n        name = _event$target2.name;\n    setState(_objectSpread({}, state, {\n      config: _objectSpread({}, state.config, _defineProperty({}, name, value))\n    }));\n  };\n\n  var handleMouseDownPassword = function handleMouseDownPassword(event) {\n    event.preventDefault();\n  };\n\n  var renderSubmitButtons = function renderSubmitButtons() {\n    return values.isLoading ? __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(CircularProgress, null)) : attempts >= 1 ? __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"alert alert-info\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(\"p\", {\n      style: {\n        fontFamily: 'Roboto',\n        margin: '0'\n      }\n    }, \"Connection failed to this database, would you like to save it anyway?\")), __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(Button, null, \"Cancel\"), __jsx(Button, null, \"Save\"))) : __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(Button, null, \"Cancel\"), __jsx(Button, {\n      onClick: handleSubmitData\n    }, \"Save\"));\n  };\n\n  return __jsx(Card, null, __jsx(\"div\", {\n    className: classes.cardTitle\n  }, \"Add a New Data Source - Microsoft SQL Server\"), __jsx(Card, {\n    className: classes.root\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Basic\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    onChange: handleInputChange.bind(_this),\n    fullWidth: true,\n    id: \"name\",\n    name: \"title\",\n    label: \"Name\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    onChange: handleInputChange.bind(_this),\n    fullWidth: true,\n    id: \"description\",\n    name: \"description\",\n    label: \"Description\"\n  })))), __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Database Properties\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 8\n  }, __jsx(TextField, {\n    onChange: handleAuthChange.bind(_this),\n    fullWidth: true,\n    id: \"server\",\n    name: \"server\",\n    label: \"Server\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(TextField, {\n    onChange: handleAuthChange.bind(_this),\n    fullWidth: true,\n    id: \"port\",\n    name: \"port\",\n    label: \"Port\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(TextField, {\n    onChange: handleAuthChange.bind(_this),\n    fullWidth: true,\n    id: \"database\",\n    name: \"database\",\n    label: \"Database\"\n  })))), __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Authentication\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(TextField, {\n    onChange: handleAuthChange.bind(_this),\n    fullWidth: true,\n    id: \"username\",\n    name: \"user\",\n    label: \"Username\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(TextField, {\n    onChange: handleAuthChange.bind(_this),\n    fullWidth: true,\n    id: \"password\",\n    name: \"password\",\n    label: \"Password\"\n  })))), renderSubmitButtons()));\n};\n\nexport default AddMsSQLDataSource;","map":null,"metadata":{},"sourceType":"module"}