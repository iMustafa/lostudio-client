{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\nimport { Card, Box } from '@material-ui/core';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Lock from '@material-ui/icons/Lock';\nimport { login, saveLoginData } from '../actions/auth.actions';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: '80vh',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textInput: {\n    margin: theme.spacing(2),\n    width: '40%'\n  },\n  loginCard: {\n    padding: '30px 15px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    minHeight: '35vh'\n  },\n  loginButton: {\n    border: '1px solid #DEDEDE',\n    width: '45%'\n  },\n  buttonHolder: {\n    display: 'flex',\n    width: '90%',\n    justifyContent: 'center',\n    borderBottom: '1px solid #DEDEDE',\n    paddingBottom: theme.spacing(4)\n  },\n  forgetPassword: {\n    fontSize: '13px',\n    color: '#333',\n    alignSelf: 'flex-start',\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(5),\n    cursor: 'pointer'\n  },\n  signupHolder: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(2)\n  },\n  signupText: {\n    color: '#333',\n    position: 'relative',\n    top: '6px'\n  },\n  signupButton: {\n    marginLeft: theme.spacing(4),\n    border: '1px solid #DEDEDE',\n    width: '20%'\n  }\n}));\n\nconst LoginPage = () => {\n  const classes = useStyles();\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    password: '',\n    email: ''\n  });\n  const {\n    0: invalidPasswordCount,\n    1: setInvalidPasswordCount\n  } = useState(0);\n\n  const handleChange = e => {\n    setData(_objectSpread({}, data, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const submitLogin = async () => {\n    try {\n      const loginInfo = await login(data);\n      saveLoginData(loginInfo);\n      Router.push('/dashboards').then(_ => {\n        location.reload();\n      });\n    } catch (e) {\n      switch (e.status) {\n        case 401:\n          setInvalidPasswordCount(invalidPasswordCount + 1);\n\n          if (invalidPasswordCount >= 3) {\n            Swal.fire({\n              title: e.statusText,\n              text: 'Did you forget your email/password?',\n              icon: 'error',\n              showCancelButton: true,\n              confirmButtonText: 'Reset password',\n              cancelButtonText: 'Close'\n            }).then(result => {\n              if (result.value) Router.push('/reset-password');\n            });\n          } else {\n            Swal.fire(e.statusText, \"Invalid email/password combination.\", 'error');\n          }\n\n          break;\n      }\n    }\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 10\n  }, __jsx(Card, {\n    className: classes.loginCard\n  }, __jsx(FormControl, {\n    className: classes.textInput\n  }, __jsx(InputLabel, {\n    htmlFor: \"input-with-icon-adornment\"\n  }, \"Email\"), __jsx(Input, {\n    name: \"email\",\n    startAdornment: __jsx(InputAdornment, {\n      position: \"start\"\n    }, __jsx(AccountCircle, null)),\n    type: 'email',\n    onChange: handleChange,\n    required: true\n  })), __jsx(FormControl, {\n    className: classes.textInput\n  }, __jsx(InputLabel, {\n    htmlFor: \"input-with-icon-adornment\"\n  }, \"Password\"), __jsx(Input, {\n    name: \"password\",\n    startAdornment: __jsx(InputAdornment, {\n      position: \"start\"\n    }, __jsx(Lock, null)),\n    onChange: handleChange,\n    type: 'password',\n    required: true\n  })), __jsx(Box, {\n    className: classes.buttonHolder\n  }, __jsx(Button, {\n    className: classes.loginButton,\n    onClick: submitLogin\n  }, \"Login\")), __jsx(Box, {\n    className: classes.forgetPassword,\n    onClick: () => {\n      Router.push('/reset-password');\n    }\n  }, \"Did you forget your username/password?\")), __jsx(Box, {\n    className: classes.signupHolder\n  }, __jsx(\"span\", {\n    className: classes.signupText\n  }, \"New Customer Signup.\"), __jsx(Button, {\n    className: classes.signupButton,\n    onClick: () => {\n      Router.push('/signup');\n    }\n  }, \"Signup\"))));\n};\n\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module"}