{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/helpers/measure-conditions/measure-conditions.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport MeasureConditionItem from './measure-conditions-item';\nimport AddMeasureCondition from './add-measure-condition';\nvar useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n});\n\nvar ListMeasureConditions = function ListMeasureConditions(_ref) {\n  var widget = _ref.widget,\n      handleSettingsClose = _ref.handleSettingsClose,\n      isAdding = _ref.isAdding,\n      onWidgetAdd = _ref.onWidgetAdd;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      isAddingMeasureCondition = _useState[0],\n      setIsAddingMeasureCondition = _useState[1];\n\n  var _useState2 = useState([]),\n      measureConditions = _useState2[0],\n      setMeasureConditions = _useState2[1];\n\n  var _useState3 = useState(0),\n      refresh = _useState3[0],\n      setRefresh = _useState3[1];\n\n  useEffect(function () {\n    var getMeasureConditions = function getMeasureConditions() {\n      var $measureConditions;\n      return _regeneratorRuntime.async(function getMeasureConditions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id));\n\n            case 3:\n              $measureConditions = _context.sent;\n              setMeasureConditions($measureConditions);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    getMeasureConditions();\n  }, [refresh]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Measure Conditions\")), isAddingMeasureCondition ? __jsx(AddMeasureCondition, {\n    setRefresh: setRefresh,\n    refresh: refresh,\n    widget: widget,\n    setIsAddingMeasureCondition: setIsAddingMeasureCondition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }) : __jsx(Button, {\n    fullWidth: true,\n    style: {\n      marginBottom: 15\n    },\n    onClick: function onClick() {\n      setIsAddingMeasureCondition(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Add Measure Condition\"), measureConditions.map(function (measureCondition) {\n    return __jsx(MeasureConditionItem, {\n      setRefresh: setRefresh,\n      refresh: refresh,\n      widget: widget,\n      key: measureCondition.id,\n      measureCondition: measureCondition,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport default ListMeasureConditions;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/helpers/measure-conditions/measure-conditions.jsx"],"names":["useState","useEffect","makeStyles","Button","WidgetSettingsActions","MeasureConditionItem","AddMeasureCondition","useStyles","h2","width","textAlign","borderBottom","lineHeight","marginTop","marginBottom","fontFamily","fontSize","color","span","background","padding","ListMeasureConditions","widget","handleSettingsClose","isAdding","onWidgetAdd","classes","isAddingMeasureCondition","setIsAddingMeasureCondition","measureConditions","setMeasureConditions","refresh","setRefresh","getMeasureConditions","getWidgetSettingsMeasureConditions","id","$measureConditions","console","log","map","measureCondition"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport MeasureConditionItem from './measure-conditions-item'\nimport AddMeasureCondition from './add-measure-condition'\n\nconst useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n})\n\nconst ListMeasureConditions = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [isAddingMeasureCondition, setIsAddingMeasureCondition] = useState(false)\n  const [measureConditions, setMeasureConditions] = useState([])\n  const [refresh, setRefresh] = useState(0)\n\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id)\n        setMeasureConditions($measureConditions)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getMeasureConditions()\n  }, [refresh])\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Measure Conditions</span>\n      </h2>\n      {\n        isAddingMeasureCondition ?\n          <AddMeasureCondition\n            setRefresh={setRefresh}\n            refresh={refresh}\n            widget={widget}\n            setIsAddingMeasureCondition={setIsAddingMeasureCondition}\n          /> :\n          (\n            <Button\n              fullWidth\n              style={{ marginBottom: 15 }}\n              onClick={() => { setIsAddingMeasureCondition(true) }}>\n              Add Measure Condition\n            </Button>\n          )\n      }\n      {\n        measureConditions.map(measureCondition => (\n          <MeasureConditionItem\n            setRefresh={setRefresh}\n            refresh={refresh}\n            widget={widget}\n            key={measureCondition.id}\n            measureCondition={measureCondition}\n          />\n        ))\n      }\n    </div>\n  )\n}\n\nexport default ListMeasureConditions"]},"metadata":{},"sourceType":"module"}