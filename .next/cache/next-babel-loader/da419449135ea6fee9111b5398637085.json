{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridLayout from 'react-grid-layout';\nimport Cookies from 'next-cookies';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport Drawer from '@material-ui/core/Drawer';\nimport DashboardActions from '../../../actions/dashboard.actions';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu';\nimport { TableWidget, LineChartWidget, PieChartWidget, DonutChartWidget, BarChartWidget, AreaChartWidget } from '../../../components/widgets';\nimport { useRouter } from 'next/router';\nconst useStyles = makeStyles({\n  list: {\n    width: 500\n  },\n  fullList: {\n    width: 'auto'\n  }\n});\n\nconst EditDashboard = WidgetSettings => {\n  const classes = useStyles();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: menuState,\n    1: setMenuState\n  } = useState({\n    right: false\n  });\n  const {\n    0: layout,\n    1: setLayout\n  } = useState(Object.values(WidgetSettings));\n\n  const onLayoutChange = async $event => {\n    try {\n      const layouts = layout.map(item => {\n        const $eventItem = $event.filter($item => $item.i == item.layout.i)[0];\n        return _objectSpread({}, item, {\n          layout: $eventItem\n        });\n      });\n      await Promise.all(layouts.map(item => WidgetSettingsActions.updateWidgetSettings(item.id, item)));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n    setMenuState(_objectSpread({}, menuState, {\n      [side]: open\n    }));\n  };\n\n  const decideWidget = widget => {\n    switch (widget.type) {\n      case 'Table':\n        return __jsx(TableWidget, {\n          widgetId: widget.id\n        });\n\n      case 'Line Chart':\n        return __jsx(LineChartWidget, null);\n\n      case 'Bar Chart':\n        return __jsx(BarChartWidget, null);\n\n      case 'Pie Chart':\n        return __jsx(PieChartWidget, null);\n\n      case 'Donut Chart':\n        return __jsx(DonutChartWidget, null);\n\n      case 'Area Chart':\n        return __jsx(AreaChartWidget, null);\n    }\n  };\n\n  const addWidget = async (title, _) => {\n    try {\n      const layoutItem = {\n        layout: {\n          i: uuidv4(),\n          x: 0,\n          y: 0,\n          w: 6,\n          h: 11,\n          maxW: 16,\n          isDraggable: true,\n          isResizable: true\n        },\n        type: title\n      };\n      const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem);\n      await DashboardActions.addWidgetToDashboard(id, saveWidget.id);\n      layoutItem.id = saveWidget.id;\n      setLayout([...layout, layoutItem]);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sideList = () => __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(WidgetSidemenu, {\n    onWidgetClick: addWidget,\n    widgetSettings: Object.values(WidgetSettings)\n  }));\n\n  const renderWidgets = () => layout.map((item, i) => __jsx(\"div\", {\n    key: item.layout.i\n  }, decideWidget(item)));\n\n  return __jsx(\"div\", null, __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false)\n  }, sideList('right')), __jsx(Card, {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      justifySelf: 'flex-start',\n      display: 'flex',\n      flex: 1\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"back\",\n    size: \"medium\",\n    style: {\n      outline: 'none'\n    }\n  }, __jsx(ArrowLeft, {\n    fontSize: \"default\"\n  }))), __jsx(\"div\", {\n    style: {\n      justifySelf: 'flex-end',\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'flex-end',\n      paddingRight: '10px'\n    }\n  }, __jsx(Button, {\n    style: {\n      outline: 'none'\n    },\n    size: \"small\",\n    startIcon: __jsx(SaveIcon, null)\n  }, \"Save\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('right', true),\n    startIcon: __jsx(DashboardIcon, null)\n  }, \"Widgets\"))), __jsx(GridLayout, {\n    className: \"layout\",\n    cols: 16,\n    rowHeight: 30,\n    width: 1920,\n    layout: layout.map(item => item.layout),\n    onLayoutChange: onLayoutChange\n  }, renderWidgets()));\n};\n\nEditDashboard.getInitialProps = async req => {\n  const Authorization = Cookies(req).id;\n  const WidgetSettings = await DashboardActions.getWidgetSettings({\n    Authorization,\n    id: \"5e413f33f6af6d17b44df269\"\n  });\n  return WidgetSettings;\n};\n\nexport default EditDashboard;","map":null,"metadata":{},"sourceType":"module"}