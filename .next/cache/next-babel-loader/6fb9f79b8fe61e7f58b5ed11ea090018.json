{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/dashboards/settings/sub-boards-settings.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DashboardActions from '../../../actions/dashboard.actions';\n\nvar SubDashboardSettings = function SubDashboardSettings(_ref) {\n  var id = _ref.id,\n      refresh = _ref.refresh,\n      setRefresh = _ref.setRefresh;\n\n  var _useState = useState([]),\n      subDashboards = _useState[0],\n      setSubDashboards = _useState[1];\n\n  var _useState2 = useState(true),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  useEffect(function () {\n    var getSubDashboards = function getSubDashboards() {\n      var $subDashBoards;\n      return _regeneratorRuntime.async(function getSubDashboards$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(DashboardActions.getSubDashboards({\n                id: id\n              }));\n\n            case 3:\n              $subDashBoards = _context.sent;\n              setSubDashboards($subDashBoards);\n              setIsLoading(true);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    getSubDashboards();\n  }, []);\n\n  var renderSubDashboardCard = function renderSubDashboardCard(subDashboard) {\n    return __jsx(Card, {\n      variant: \"outlined\",\n      key: subDashboard.id,\n      style: {\n        marginTop: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, __jsx(CardHeader, {\n      title: subDashboard.subDashboard.title,\n      subheader: subDashboard.subDashboard.createdAt,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }), __jsx(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, __jsx(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, subDashboard.subDashboard.description)), __jsx(CardActions, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, \"Delete\"), __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"View\"), __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"Edit\")));\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    fullWidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Add New Page\"), isLoading ? __jsx(CircularProgress, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }) : subDashboards.map(function (subDashboard) {\n    return renderSubDashboardCard(subDashboard);\n  }));\n};\n\nexport default SubDashboardSettings;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/dashboards/settings/sub-boards-settings.jsx"],"names":["useState","useEffect","Card","Grid","Button","Typography","CardHeader","CardActions","CardContent","CircularProgress","DashboardActions","SubDashboardSettings","id","refresh","setRefresh","subDashboards","setSubDashboards","isLoading","setIsLoading","getSubDashboards","$subDashBoards","console","log","renderSubDashboardCard","subDashboard","marginTop","title","createdAt","description","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DashboardActions from '../../../actions/dashboard.actions'\n\nconst SubDashboardSettings = ({ id, refresh, setRefresh }) => {\n  const [subDashboards, setSubDashboards] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({ id })\n        setSubDashboards($subDashBoards)\n        setIsLoading(true)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getSubDashboards()\n  }, [])\n\n  const renderSubDashboardCard = subDashboard => (\n    <Card variant=\"outlined\" key={subDashboard.id} style={{ marginTop: 15 }}>\n      <CardHeader\n        title={subDashboard.subDashboard.title}\n        subheader={subDashboard.subDashboard.createdAt}\n      />\n      <CardContent>\n        <Typography>{subDashboard.subDashboard.description}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button>Delete</Button>\n        <Button>View</Button>\n        <Button>Edit</Button>\n      </CardActions>\n    </Card>\n  )\n\n  return (\n    <div>\n      <Button fullWidth>Add New Page</Button>\n      {\n        isLoading ? <CircularProgress /> : subDashboards.map(subDashboard => (renderSubDashboardCard(subDashboard)))\n      }\n    </div>\n  )\n}\n\nexport default SubDashboardSettings"]},"metadata":{},"sourceType":"module"}