{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/notifications/NotificationsItem.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport NotificationsActions from '../../actions/notifications.actions';\nimport Typography from '@material-ui/core/Typography';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    gridItem: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    },\n    message: {\n      alignSelf: 'flex-start',\n      justifySelf: 'flex-start',\n      fontSize: 14\n    },\n    date: {\n      alignSelf: 'flex-start',\n      fontSize: 12,\n      color: \"#555\"\n    }\n  };\n});\n\nvar NotificationItem = function NotificationItem(_ref) {\n  var notification = _ref.notification;\n  var classes = useStyles();\n\n  var _useState = useState(notification.seen),\n      isSeen = _useState[0],\n      setIsSeen = _useState[1];\n\n  var decideNotificationIcon = function decideNotificationIcon() {\n    switch (notification.type) {\n      case \"Dashboard Collaboration\":\n        return __jsx(DashboardIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }\n        });\n    }\n  };\n\n  var markSeen = function markSeen() {\n    return _regeneratorRuntime.async(function markSeen$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (notification.seen) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(NotificationsActions.markAsSeen({\n              id: notification.id\n            }));\n\n          case 4:\n            setIsSeen(true);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  };\n\n  return __jsx(Card, {\n    onClick: markSeen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    spacing: 0,\n    container: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2,\n    className: classes.gridItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, decideNotificationIcon()), __jsx(Grid, {\n    item: true,\n    xs: 8,\n    className: classes.gridItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    className: classes.message,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, notification.message), __jsx(Typography, {\n    className: classes.date,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, moment(notification.createdAt).format('YYYY/MM/DD HH:mm'))), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    className: classes.gridItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton, {\n    style: {\n      outline: 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(RadioButtonUncheckedIcon, {\n    fontSize: \"small\",\n    style: {\n      color: \"#3F51B5\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default NotificationItem;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/notifications/NotificationsItem.jsx"],"names":["useEffect","useState","moment","makeStyles","Card","Grid","IconButton","NotificationsActions","Typography","DashboardIcon","RadioButtonUncheckedIcon","useStyles","theme","gridItem","display","flexDirection","justifyContent","alignContent","alignItems","message","alignSelf","justifySelf","fontSize","date","color","NotificationItem","notification","classes","seen","isSeen","setIsSeen","decideNotificationIcon","type","markSeen","markAsSeen","id","console","log","createdAt","format","outline"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport IconButton from '@material-ui/core/IconButton'\nimport NotificationsActions from '../../actions/notifications.actions'\nimport Typography from '@material-ui/core/Typography'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\n\nconst useStyles = makeStyles(theme => ({\n  gridItem: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center'\n  },\n  message: {\n    alignSelf: 'flex-start',\n    justifySelf: 'flex-start',\n    fontSize: 14\n  },\n  date: {\n    alignSelf: 'flex-start',\n    fontSize: 12,\n    color: \"#555\"\n  }\n}))\n\nconst NotificationItem = ({ notification }) => {\n  const classes = useStyles()\n  const [isSeen, setIsSeen] = useState(notification.seen)\n\n  const decideNotificationIcon = () => {\n    switch (notification.type) {\n      case \"Dashboard Collaboration\":\n        return (<DashboardIcon />)\n    }\n  }\n\n  const markSeen = async () => {\n    if (!notification.seen) {\n      try {\n        await NotificationsActions.markAsSeen({ id: notification.id })\n        setIsSeen(true)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n  }\n\n  return (\n    <Card onClick={markSeen}>\n      <Grid spacing={0} container>\n        <Grid item xs={2} className={classes.gridItem}>\n          {decideNotificationIcon()}\n        </Grid>\n        <Grid item xs={8} className={classes.gridItem}>\n          <Typography className={classes.message}>{notification.message}</Typography>\n          <Typography className={classes.date}>{moment(notification.createdAt).format('YYYY/MM/DD HH:mm')}</Typography>\n        </Grid>\n        <Grid item xs={2} className={classes.gridItem}>\n          <IconButton style={{ outline: 'none' }}>\n            <RadioButtonUncheckedIcon fontSize=\"small\" style={{ color: \"#3F51B5\" }} />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </Card>\n  )\n}\n\nexport default NotificationItem"]},"metadata":{},"sourceType":"module"}