{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Select from '@material-ui/core/Select';\nimport DataSourceActions from '../../../../actions/datasource.actions';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport Swal from 'sweetalert2';\nimport { Typography } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\n\nconst AutoCompleteWidgetSettings = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: linkToFormGroup,\n    1: setLinkToFormGroup\n  } = useState(false);\n  const {\n    0: formGroups,\n    1: setFormGroups\n  } = useState([]);\n  const {\n    0: selectedFormGroup,\n    1: setSelectedFormGroup\n  } = useState(null);\n  const {\n    0: selectionOption,\n    1: setSelectionOption\n  } = useState('datasource');\n  const {\n    0: properties,\n    1: setProperties\n  } = useState({\n    label: '',\n    id: '',\n    name: '',\n    placeholder: '',\n    className: '',\n    value: ''\n  });\n  const {\n    0: datasources,\n    1: setDatasources\n  } = useState([]);\n  const {\n    0: datasource,\n    1: setDatasource\n  } = useState(!isAdding ? widget.dataSourceId : '');\n  const {\n    0: docList,\n    1: setDocList\n  } = useState([]);\n  const {\n    0: doc,\n    1: setDoc\n  } = useState(!isAdding ? widget.config.docId : '');\n  const {\n    0: fieldList,\n    1: setFieldList\n  } = useState([]);\n  const {\n    0: fields,\n    1: setFields\n  } = useState(!isAdding ? widget.config.fields : '');\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets();\n        setFormGroups($formGroups);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getFormGroups();\n  }, []);\n\n  const handleSelectFormGroup = event => {\n    const {\n      value\n    } = event.target;\n    setSelectedFormGroup(value);\n  };\n\n  const handleLinkToFormGroup = event => {\n    const {\n      checked\n    } = event.target;\n    if (!checked) setSelectedFormGroup(null);\n    setLinkToFormGroup(checked);\n  };\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"form-group-title\"\n  }, \"Form Group\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"form-group-title\",\n    value: selectedFormGroup,\n    onChange: handleSelectFormGroup\n  }, formGroups.map(formGroup => __jsx(MenuItem, {\n    value: formGroup.id\n  }, formGroup.properties.name)))) : __jsx(\"div\", null);\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({});\n\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource);\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc);\n        setDocList($docList);\n        setFieldList($fieldList);\n      }\n\n      setDatasources($datasources);\n      return $datasources;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getDocList = async id => {\n    try {\n      setDatasource(id);\n      const $docList = await DataSourceActions.getDocList(id);\n      setDocList($docList);\n      return $docList;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId);\n      const $fieldList = await DataSourceActions.getFieldList(id, docId);\n      setFieldList($fieldList);\n      return $fieldList;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleDatasourceChange = async event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFieldList([]);\n    setFields([]);\n    await getDocList(value);\n  };\n\n  const handleDocChange = async event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFieldList([]);\n    setFields([]);\n    await getFieldList(datasource, value);\n  };\n\n  const handleFieldChange = event => {\n    const {\n      value\n    } = event.target;\n    setFields(value);\n  };\n\n  const handlePropertiesChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setProperties(_objectSpread({}, properties, {\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    getDatasources();\n  }, []);\n\n  const handleSourceChange = event => {\n    const {\n      value\n    } = event.target;\n    setSelectionOption(value);\n  };\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields: [fields],\n          type: selectionOption == 'datasource' ? 'simple' : 'constant',\n          func: 'find',\n          query: {},\n          values: selectionOption == 'datasource' ? [] : []\n        },\n        properties,\n        type: 'Auto Complete'\n      };\n\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup);\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data);\n        handleSettingsClose(update);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const renderFieldSettings = () => fieldList.length ? __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Fields Settings\")), __jsx(RadioGroup, {\n    onChange: handleFieldChange\n  }, fieldList.map(field => __jsx(FormControlLabel, {\n    key: field,\n    control: __jsx(Radio, {\n      value: field\n    }),\n    label: field\n  }))), __jsx(Typography, {\n    style: {\n      fontSize: 12,\n      color: '#F00',\n      marginTop: 10\n    }\n  }, \"* You can only select one field in an autocomplete textfield.\")) : __jsx(\"div\", null);\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Info\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Title\"), __jsx(Input, null)), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Label\"), __jsx(Input, {\n    name: \"label\",\n    onChange: handlePropertiesChange,\n    value: properties.label\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"ID\"), __jsx(Input, {\n    name: \"id\",\n    onChange: handlePropertiesChange,\n    value: properties.id\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Name\"), __jsx(Input, {\n    name: \"name\",\n    onChange: handlePropertiesChange,\n    value: properties.name\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Placeholder\"), __jsx(Input, {\n    name: \"placeholder\",\n    onChange: handlePropertiesChange,\n    value: properties.placeholder\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Class name\"), __jsx(Input, {\n    name: \"className\",\n    onChange: handlePropertiesChange,\n    value: properties.className\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: linkToFormGroup,\n      onChange: handleLinkToFormGroup\n    }),\n    label: \"Link To Form Group?\"\n  })), renderFormGroupSelection(), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Unique Properties\")), __jsx(FormGroup, {\n    row: true\n  }, __jsx(RadioGroup, {\n    onChange: handleSourceChange,\n    value: selectionOption,\n    style: {\n      justifyContent: 'space-evenly',\n      width: '100%',\n      flexDirection: 'row'\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"datasource\",\n    control: __jsx(Radio, null),\n    label: \"From Data Source\"\n  }), __jsx(FormControlLabel, {\n    value: \"fixed\",\n    control: __jsx(Radio, null),\n    label: \"Fixed Values\"\n  }))), selectionOption == 'datasource' ? __jsx(\"div\", null, __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"data-source\"\n  }, \"Data Source\"), __jsx(Select, {\n    name: \"datasource\",\n    labelId: \"data-source\",\n    value: datasource,\n    onChange: handleDatasourceChange\n  }, datasources.map(item => __jsx(MenuItem, {\n    key: item.id,\n    value: item.id\n  }, item.title)))), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    disabled: datasource ? false : true\n  }, __jsx(InputLabel, {\n    id: \"doc-list\"\n  }, \"Table/Collection\"), __jsx(Select, {\n    name: \"docList\",\n    labelId: \"doc-list\",\n    value: doc,\n    onChange: handleDocChange\n  }, docList.map(item => __jsx(MenuItem, {\n    key: item,\n    value: item\n  }, item)))), renderFieldSettings()) : __jsx(\"div\", null), __jsx(Button, {\n    onClick: saveConfigData,\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.formControl,\n    style: {\n      marginBottom: 10\n    }\n  }, \"Save\"));\n};\n\nexport default AutoCompleteWidgetSettings;","map":null,"metadata":{},"sourceType":"module"}