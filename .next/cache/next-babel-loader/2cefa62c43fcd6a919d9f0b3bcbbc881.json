{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/form-controls/button/button-widget-settings.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport DataSourceActions from '../../../../actions/datasource.actions';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport Swal from 'sweetalert2';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\n\nconst ButtonWidgetSettings = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: linkToFormGroup,\n    1: setLinkToFormGroup\n  } = useState(false);\n  const {\n    0: formGroups,\n    1: setFormGroups\n  } = useState([]);\n  const {\n    0: selectedFormGroup,\n    1: setSelectedFormGroup\n  } = useState(null);\n  const {\n    0: properties,\n    1: setProperties\n  } = useState({\n    label: '',\n    id: '',\n    className: ''\n  });\n  const {\n    0: code,\n    1: setCode\n  } = useState(`function (a, b) {\n    alert(a + b)\n  }`);\n\n  const handlePropertiesChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setProperties(_objectSpread({}, properties, {\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets();\n        setFormGroups($formGroups);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getFormGroups();\n  }, []);\n\n  const handleSelectFormGroup = event => {\n    const {\n      value\n    } = event.target;\n    setSelectedFormGroup(value);\n  };\n\n  const handleLinkToFormGroup = event => {\n    const {\n      checked\n    } = event.target;\n    if (!checked) setSelectedFormGroup(null);\n    setLinkToFormGroup(checked);\n  };\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? __jsx(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(InputLabel, {\n    id: \"form-group-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Form Group\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"form-group-title\",\n    value: selectedFormGroup,\n    onChange: handleSelectFormGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, formGroups.map(formGroup => __jsx(MenuItem, {\n    value: formGroup.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, formGroup.properties.name)))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  });\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties: _objectSpread({}, properties, {\n          code\n        }),\n        type: 'Button'\n      };\n\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup);\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data);\n        handleSettingsClose(update);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Widget Info\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Title\"), __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"Label\"), __jsx(Input, {\n    name: \"label\",\n    onChange: handlePropertiesChange,\n    value: properties.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"ID\"), __jsx(Input, {\n    name: \"id\",\n    onChange: handlePropertiesChange,\n    value: properties.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"Class name\"), __jsx(Input, {\n    name: \"className\",\n    onChange: handlePropertiesChange,\n    value: properties.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: linkToFormGroup,\n      onChange: handleLinkToFormGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 20\n      }\n    }),\n    label: \"Link To Form Group?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })), renderFormGroupSelection(), __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"Unique Properties\")), __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"OnClick Event\"), __jsx(Editor, {\n    value: code,\n    onValueChange: code => setCode(code),\n    highlight: code => highlight(code, languages.javascript),\n    padding: 10,\n    style: {\n      fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n      fontSize: 12,\n      border: '1px solid #DEDEDE'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    onClick: saveConfigData,\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, \"Save\"));\n};\n\nexport default ButtonWidgetSettings;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/form-controls/button/button-widget-settings.jsx"],"names":["useState","useEffect","makeStyles","Button","Input","InputLabel","FormControl","Typography","Select","DataSourceActions","WidgetSettingsActions","Swal","Editor","highlight","languages","useStyles","theme","list","width","paddingLeft","paddingRight","paddingTop","h2","textAlign","borderBottom","lineHeight","marginTop","marginBottom","fontFamily","fontSize","color","span","background","padding","formControl","ButtonWidgetSettings","widget","handleSettingsClose","isAdding","onWidgetAdd","classes","linkToFormGroup","setLinkToFormGroup","formGroups","setFormGroups","selectedFormGroup","setSelectedFormGroup","properties","setProperties","label","id","className","code","setCode","handlePropertiesChange","event","name","value","target","getFormGroups","$formGroups","getFormGroupWidgets","e","console","log","handleSelectFormGroup","handleLinkToFormGroup","checked","renderFormGroupSelection","_","map","formGroup","saveConfigData","data","type","update","updateWidgetSettings","javascript","border"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Typography from '@material-ui/core/Typography'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\nimport Editor from 'react-simple-code-editor'\nimport { highlight, languages } from 'prismjs/components/prism-core'\nimport 'prismjs/components/prism-clike'\nimport 'prismjs/components/prism-javascript'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst ButtonWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', className: '',\n  })\n  const [code, setCode] = useState(`function (a, b) {\n    alert(a + b)\n  }`)\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties: {\n          ...properties,\n          code\n        },\n        type: 'Button'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  \n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Unique Properties</span>\n      </h2>\n      <Typography>OnClick Event</Typography>\n      <Editor\n        value={code}\n        onValueChange={code => setCode(code)}\n        highlight={code => highlight(code, languages.javascript)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          border: '1px solid #DEDEDE'\n        }}\n      />\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default ButtonWidgetSettings"]},"metadata":{},"sourceType":"module"}