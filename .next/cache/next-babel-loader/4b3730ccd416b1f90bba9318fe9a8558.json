{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DataSourceActions from '../../../../actions/datasource.actions';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport Swal from 'sweetalert2';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\n\nconst DateTimeWidgetSettings = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: linkToFormGroup,\n    1: setLinkToFormGroup\n  } = useState(false);\n  const {\n    0: formGroups,\n    1: setFormGroups\n  } = useState([]);\n  const {\n    0: selectedFormGroup,\n    1: setSelectedFormGroup\n  } = useState(null);\n  const {\n    0: properties,\n    1: setProperties\n  } = useState({\n    label: '',\n    id: '',\n    name: '',\n    className: ''\n  });\n\n  const handlePropertiesChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setProperties(_objectSpread({}, properties, {\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets();\n        setFormGroups($formGroups);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getFormGroups();\n  }, []);\n\n  const handleSelectFormGroup = event => {\n    const {\n      value\n    } = event.target;\n    setSelectedFormGroup(value);\n  };\n\n  const handleLinkToFormGroup = event => {\n    const {\n      checked\n    } = event.target;\n    if (!checked) setSelectedFormGroup(null);\n    setLinkToFormGroup(checked);\n  };\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"form-group-title\"\n  }, \"Form Group\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"form-group-title\",\n    value: selectedFormGroup,\n    onChange: handleSelectFormGroup\n  }, formGroups.map(formGroup => __jsx(MenuItem, {\n    value: formGroup.id\n  }, formGroup.properties.name)))) : __jsx(\"div\", null);\n\n  const handleFieldChange = name => event => {\n    const {\n      checked\n    } = event.target;\n    checked ? setSelectedFileFormats([...selectedFileFormats, name]) : setSelectedFileFormats(selectedFileFormats.filter(format => format != name));\n  };\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Date Time'\n      };\n\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup);\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data);\n        handleSettingsClose(update);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Info\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Title\"), __jsx(Input, null)), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Label\"), __jsx(Input, {\n    name: \"label\",\n    onChange: handlePropertiesChange,\n    value: properties.label\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"ID\"), __jsx(Input, {\n    name: \"id\",\n    onChange: handlePropertiesChange,\n    value: properties.id\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Name\"), __jsx(Input, {\n    name: \"name\",\n    onChange: handlePropertiesChange,\n    value: properties.name\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Class name\"), __jsx(Input, {\n    name: \"className\",\n    onChange: handlePropertiesChange,\n    value: properties.className\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: linkToFormGroup,\n      onChange: handleLinkToFormGroup\n    }),\n    label: \"Link To Form Group?\"\n  })), renderFormGroupSelection(), __jsx(Button, {\n    onClick: saveConfigData,\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.formControl\n  }, \"Save\"));\n};\n\nexport default DateTimeWidgetSettings;","map":null,"metadata":{},"sourceType":"module"}