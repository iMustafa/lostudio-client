{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/helpers/measure-conditions/measure-conditions.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport MeasureConditionItem from './measure-conditions-item';\nimport AddMeasureCondition from './add-measure-condition';\nconst useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n});\n\nconst ListMeasureConditions = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: isAddingMeasureCondition,\n    1: setIsAddingMeasureCondition\n  } = useState(false);\n  const {\n    0: measureConditions,\n    1: setMeasureConditions\n  } = useState([]);\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id);\n        setMeasureConditions($measureConditions);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getMeasureConditions();\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Measure Conditions\")), isAddingMeasureCondition ? __jsx(AddMeasureCondition, {\n    widget: widget,\n    setIsAddingMeasureCondition: setIsAddingMeasureCondition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 36\n    }\n  }) : __jsx(Button, {\n    fullWidth: true,\n    style: {\n      marginBottom: 15\n    },\n    onClick: () => {\n      setIsAddingMeasureCondition(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"Add Measure Condition\"), measureConditions.map(measureCondition => __jsx(MeasureConditionItem, {\n    key: measureCondition.id,\n    measureCondition: measureCondition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 51\n    }\n  })));\n};\n\nexport default ListMeasureConditions;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/helpers/measure-conditions/measure-conditions.jsx"],"names":["useState","useEffect","makeStyles","Button","WidgetSettingsActions","MeasureConditionItem","AddMeasureCondition","useStyles","h2","width","textAlign","borderBottom","lineHeight","marginTop","marginBottom","fontFamily","fontSize","color","span","background","padding","ListMeasureConditions","widget","handleSettingsClose","isAdding","onWidgetAdd","classes","isAddingMeasureCondition","setIsAddingMeasureCondition","measureConditions","setMeasureConditions","getMeasureConditions","$measureConditions","getWidgetSettingsMeasureConditions","id","e","console","log","map","measureCondition"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,qBAAP,MAAkC,4CAAlC;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,mBAAP,MAAgC,yBAAhC;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAC;AAC3BM,EAAAA,EAAE,EAAE;AACFC,IAAAA,KAAK,EAAE,MADL;AAEFC,IAAAA,SAAS,EAAE,QAFT;AAGFC,IAAAA,YAAY,EAAE,gBAHZ;AAIFC,IAAAA,UAAU,EAAE,OAJV;AAKFC,IAAAA,SAAS,EAAE,MALT;AAMFC,IAAAA,YAAY,EAAE,MANZ;AAOFC,IAAAA,UAAU,EAAE,QAPV;AAQFC,IAAAA,QAAQ,EAAE,MARR;AASFC,IAAAA,KAAK,EAAE;AATL,GADuB;AAY3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,MADR;AAEJC,IAAAA,OAAO,EAAE;AAFL;AAZqB,CAAD,CAA5B;;AAkBA,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,mBAAV;AAA+BC,EAAAA,QAA/B;AAAyCC,EAAAA;AAAzC,CAAD,KAA4D;AACxF,QAAMC,OAAO,GAAGnB,SAAS,EAAzB;AACA,QAAM;AAAA,OAACoB,wBAAD;AAAA,OAA2BC;AAA3B,MAA0D5B,QAAQ,CAAC,KAAD,CAAxE;AACA,QAAM;AAAA,OAAC6B,iBAAD;AAAA,OAAoBC;AAApB,MAA4C9B,QAAQ,CAAC,EAAD,CAA1D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,oBAAoB,GAAG,YAAY;AACvC,UAAI;AACF,cAAMC,kBAAkB,GAAG,MAAM5B,qBAAqB,CAAC6B,kCAAtB,CAAyDX,MAAM,CAACY,EAAhE,CAAjC;AACAJ,QAAAA,oBAAoB,CAACE,kBAAD,CAApB;AACD,OAHD,CAGE,OAAOG,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,KAPD;;AAQAJ,IAAAA,oBAAoB;AACrB,GAVQ,EAUN,EAVM,CAAT;AAYA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAEL,OAAO,CAAClB,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEkB,OAAO,CAACR,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,EAKIS,wBAAwB,GAAG,MAAC,mBAAD;AAAqB,IAAA,MAAM,EAAEL,MAA7B;AAAqC,IAAA,2BAA2B,EAAEM,2BAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACtB,MAAC,MAAD;AAAQ,IAAA,SAAS,MAAjB;AAAkB,IAAA,KAAK,EAAE;AAAEd,MAAAA,YAAY,EAAE;AAAhB,KAAzB;AAA+C,IAAA,OAAO,EAAE,MAAM;AAAEc,MAAAA,2BAA2B,CAAC,IAAD,CAA3B;AAAmC,KAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BANN,EAUIC,iBAAiB,CAACS,GAAlB,CAAsBC,gBAAgB,IAAI,MAAC,oBAAD;AAAsB,IAAA,GAAG,EAAEA,gBAAgB,CAACL,EAA5C;AAAgD,IAAA,gBAAgB,EAAEK,gBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1C,CAVJ,CADF;AAeD,CAhCD;;AAkCA,eAAelB,qBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport MeasureConditionItem from './measure-conditions-item'\nimport AddMeasureCondition from './add-measure-condition'\n\nconst useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n})\n\nconst ListMeasureConditions = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [isAddingMeasureCondition, setIsAddingMeasureCondition] = useState(false)\n  const [measureConditions, setMeasureConditions] = useState([])\n\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id)\n        setMeasureConditions($measureConditions)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getMeasureConditions()\n  }, [])\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Measure Conditions</span>\n      </h2>\n      {\n        isAddingMeasureCondition ? <AddMeasureCondition widget={widget} setIsAddingMeasureCondition={setIsAddingMeasureCondition} /> : (\n          <Button fullWidth style={{ marginBottom: 15 }} onClick={() => { setIsAddingMeasureCondition(true) }}>Add Measure Condition</Button>\n        )\n      }\n      {\n        measureConditions.map(measureCondition => <MeasureConditionItem key={measureCondition.id} measureCondition={measureCondition} />)\n      }\n    </div>\n  )\n}\n\nexport default ListMeasureConditions"]},"metadata":{},"sourceType":"module"}