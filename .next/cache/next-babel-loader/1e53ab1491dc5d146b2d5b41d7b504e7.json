{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport Gantt from './gantt-chart-widget';\nimport Toolbar from './gantt-chart-widget-toolbar';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nvar GanttChartWidget = function GanttChartWidget() {\n  var _useState = useState({}),\n      widget = _useState[0],\n      setWidget = _useState[1];\n\n  var _useState2 = useState({\n    data: [],\n    links: []\n  }),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  var _useState3 = useState(true),\n      isLoadingData = _useState3[0],\n      setIsLoadingData = _useState3[1];\n\n  var _useState4 = useState('Days'),\n      zoom = _useState4[0],\n      setZoom = _useState4[1];\n\n  var handleZoomChange = function handleZoomChange(zoom) {\n    setZoom(zoom);\n  };\n\n  useEffect(function () {\n    var getData = function getData() {\n      var Widget, Result;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\"));\n\n            case 3:\n              Widget = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\"));\n\n            case 6:\n              Result = _context.sent;\n              setTasks({\n                data: Result[0].data,\n                links: Result[0].links\n              });\n              setWidget(_objectSpread({}, Widget));\n              setIsLoadingData(false);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    getData();\n  }, []);\n\n  var renderGunttChart = function renderGunttChart() {\n    return isLoadingData || !widget ? __jsx(CircularProgress, null) : __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"zoom-bar\"\n    }, __jsx(Toolbar, {\n      zoom: zoom,\n      onZoomChange: handleZoomChange\n    })), __jsx(\"div\", {\n      className: \"gantt-container\"\n    }, __jsx(Gantt, {\n      tasks: tasks,\n      zoom: zoom\n    })));\n  };\n\n  return renderGunttChart();\n};\n\nexport default GanttChartWidget;","map":null,"metadata":{},"sourceType":"module"}