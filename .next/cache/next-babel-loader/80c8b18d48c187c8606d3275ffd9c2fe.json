{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Colors from '../../../../helpers/css-colors';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport { conditionCases } from '../../../../helpers/measure-conditions';\n\nvar AddMeasureCondition = function AddMeasureCondition(_ref) {\n  var widget = _ref.widget,\n      setIsAddingMeasureCondition = _ref.setIsAddingMeasureCondition,\n      setRefresh = _ref.setRefresh,\n      refresh = _ref.refresh;\n\n  var _useState = useState({}),\n      measureConditionsFields = _useState[0],\n      updateMeasureConditionsFields = _useState[1];\n\n  var _useState2 = useState(widget.config.fields),\n      fields = _useState2[0],\n      setFields = _useState2[1];\n\n  var _useState3 = useState(false),\n      showSpinner = _useState3[0],\n      setShowSpinner = _useState3[1];\n\n  var handleChange = function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    updateMeasureConditionsFields(_objectSpread({}, measureConditionsFields, _defineProperty({}, name, value)));\n  };\n\n  var addMeasureCondition = function addMeasureCondition() {\n    var measureCondition;\n    return _regeneratorRuntime.async(function addMeasureCondition$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setShowSpinner(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.createWidgetSettingsMeasureConditions(widget.id, measureConditionsFields));\n\n          case 4:\n            measureCondition = _context.sent;\n            setShowSpinner(false);\n            setIsAddingMeasureCondition(false);\n            setRefresh(refresh + 1);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  return __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"field-select-label\"\n  }, \"Field\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"field-select-label\",\n    value: measureConditionsFields.field,\n    onChange: handleChange,\n    name: \"field\"\n  }, fields.map(function (field) {\n    return __jsx(MenuItem, {\n      key: field,\n      value: field\n    }, field);\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"expression-select-label\"\n  }, \"Expression\"), __jsx(Select, {\n    fullWidth: true,\n    labelId: \"expression-select-label\",\n    value: measureConditionsFields.expression,\n    onChange: handleChange,\n    name: \"expression\"\n  }, conditionCases.map(function (conditionCase) {\n    return __jsx(MenuItem, {\n      key: conditionCase.title,\n      value: conditionCase.title\n    }, conditionCase.friendlyName);\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(Autocomplete, {\n    fullWidth: true,\n    options: Colors,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        name: \"color\"\n      }, params, {\n        label: \"Color\",\n        onChange: handleChange\n      }));\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    type: \"number\",\n    label: \"Minimum Value\",\n    onChange: handleChange,\n    name: \"minValue\",\n    value: measureConditionsFields.minValue\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  }, __jsx(TextField, {\n    fullWidth: true,\n    type: \"number\",\n    name: \"maxValue\",\n    onChange: handleChange,\n    label: \"Maximum Value\",\n    value: measureConditionsFields.maxValue\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: function onClick() {\n      setIsAddingMeasureCondition(false);\n    }\n  }, __jsx(CancelIcon, {\n    style: {\n      color: '#F00'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Cancel\"))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, showSpinner ? __jsx(CircularProgress, null) : __jsx(Button, {\n    fullWidth: true,\n    onClick: addMeasureCondition\n  }, __jsx(SaveIcon, {\n    style: {\n      color: '#3F51B5'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Save\")))));\n};\n\nexport default AddMeasureCondition;","map":null,"metadata":{},"sourceType":"module"}