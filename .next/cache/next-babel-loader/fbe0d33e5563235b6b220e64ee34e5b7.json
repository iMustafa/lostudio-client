{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/grapes/table-widgets/html-table-widget/components.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TableRef } from \"./consts\";\nimport Material from \"./Material\";\nimport DashboardActions from \"../../../../actions/dashboard.actions\";\nimport DatasourceActions from \"../../../../actions/datasource.actions\";\nimport WidgetSettingsActions from \"../../../../actions/widgetSettings.actions\";\nexport default function (editor) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(opt);\n  var d = [[{\n    Name: \"Henery\",\n    Location: \"Usa\",\n    id: \"5c24dc26dc10670017e40921\",\n    \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n    notes: \"\"\n  }]];\n  var updateTrait = [];\n  var domc = editor.DomComponents;\n  var defaultType = domc.getType(\"default\");\n  var defaultModel = defaultType.model;\n  var defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    var newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(TableRef, {\n    model: defaultModel.extend({\n      defaults: _objectSpread({}, defaultModel.prototype.defaults, {\n        droppable: true,\n        defaultData: [[{\n          Name: \"Henery\",\n          Location: \"Usa\",\n          id: \"5c24dc26dc10670017e40921\",\n          \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n          notes: \"\"\n        }]],\n        prevData: [],\n        dbId: [],\n        keys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n        traits: [{\n          name: \"modify\",\n          type: \"button\",\n          text: \"Modify\",\n          full: true,\n          command: function command(editor) {\n            var datasources, component;\n            return _regeneratorRuntime.async(function command$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(DatasourceActions.getDatasources({}));\n\n                  case 3:\n                    datasources = _context.sent;\n                    component = editor.getSelected();\n                    component.addTrait({\n                      name: \"dataSource\",\n                      type: \"select\",\n                      changeProp: 1,\n                      options: datasources.map(function (op) {\n                        return {\n                          id: op.id,\n                          name: op.title\n                        };\n                      })\n                    });\n                    component.removeTrait(\"modify\");\n                    _context.next = 12;\n                    break;\n\n                  case 9:\n                    _context.prev = 9;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0, 9]], Promise);\n          }\n        }],\n        toHTML: function toHTML() {\n          return \"\";\n        }\n      }),\n      init: function init() {\n        this.listenTo(this, this.handlePropChange);\n\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait(\"modify\").set(\"text\", \"Edit\");\n          this.addTrait({\n            name: \"Prev\",\n            type: \"pre\",\n            text: \"\\n\\t\\t\\t\\t\\t\\tData Source : <span style=\\\"font-weight: bold;\\\">\".concat(this.attributes.prevData[0].dataSourceId === \"5ec035f7bb377b08ebc8938a\" ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId, \"</span><br/>\\n\\t\\t\\t\\t\\t\\t Table : <span style=\\\"font-weight: bold;\\\">\").concat(this.attributes.prevData[0].config.docId, \"</span><br/>\\n\\t\\t\\t\\t\\t\\tFields : <span style=\\\"font-weight: bold;\\\">\").concat(this.attributes.prevData[0].config.fields.toString().replace(/,/g, \" | \"), \"</span><br/>\\n\\t\\t\\t\\t\\t\\tPrimary key : <span style=\\\"font-weight: bold;\\\"> \").concat(this.attributes.prevData[0].config.primaryKey, \"</span><br/>\\n\\t\\t\\t\\t\\t\")\n          }, {\n            at: 0\n          });\n        }\n\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = \"\";\n          this.attributes.Table = \"\";\n          this.attributes.collections = \"\";\n        } else {\n          return null;\n        }\n      }\n    }),\n    view: defaultView.extend({\n      init: function init() {\n        this.listenTo(this.model, \"change:modify change:dataSource change:Table change:console change:\".concat(updateTrait.toString()), this.handleChanges);\n      },\n      handleChanges: function handleChanges() {\n        var _this = this;\n\n        var docList, component, fieldList, _component;\n\n        return _regeneratorRuntime.async(function handleChanges$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n\n                if (!(this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\"))) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 4;\n                return _regeneratorRuntime.awrap(DatasourceActions.getDocList(this.model.attributes.dataSource));\n\n              case 4:\n                docList = _context3.sent;\n                component = editor.getSelected();\n                component.addTrait({\n                  name: \"Table\",\n                  type: \"select\",\n                  options: docList.map(function (t) {\n                    return {\n                      id: t,\n                      name: t\n                    };\n                  }),\n                  changeProp: 1\n                });\n\n              case 7:\n                if (!this.model.attributes.Table) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.next = 10;\n                return _regeneratorRuntime.awrap(DatasourceActions.getFieldList(this.model.attributes.dataSource, this.model.attributes.Table));\n\n              case 10:\n                fieldList = _context3.sent;\n                _component = editor.getSelected();\n\n                if (updateTrait.length > 1) {\n                  this.model.get(\"traits\").each(function (trait) {\n                    _component.removeTrait(updateTrait.map(function (t) {\n                      return t.toString();\n                    }));\n\n                    _component.removeTrait(\"collections\");\n\n                    _component.removeTrait(\"console\");\n                  });\n                }\n\n                fieldList.map(function (t) {\n                  var res = [{\n                    label: t,\n                    name: t,\n                    type: \"checkbox\",\n                    changeProp: 1\n                  }];\n                  updateTrait.push(t);\n\n                  _component.addTrait(res);\n                });\n\n                _component.addTrait({\n                  label: \"Primary key\",\n                  name: \"collections\",\n                  type: \"select\",\n                  options: fieldList.map(function (t) {\n                    return t;\n                  }),\n                  changeProp: 1\n                }, {\n                  at: 40\n                });\n\n                _component.addTrait({\n                  type: \"button\",\n                  name: \"console\",\n                  changeProp: 1,\n                  label: \"log button\",\n                  text: \"Click me\",\n                  full: true,\n                  command: function command(editor) {\n                    var selected, postData, postDataArray, arr, widget, customId, queryResult;\n                    return _regeneratorRuntime.async(function command$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            selected = editor.getSelected();\n                            postData = {};\n                            postDataArray = [];\n                            selected.attributes.traits.models.forEach(function (element) {\n                              postData[element.attributes.name] = element.attributes.value;\n                            });\n                            postDataArray.push(postData);\n                            arr = null;\n                            _this.model.attributes.keys = [];\n                            arr = postDataArray.map(function (js) {\n                              _this.model.attributes.keys.push(displayOptions(js));\n\n                              return {\n                                dataSourceId: js.dataSource,\n                                config: {\n                                  fields: displayOptions(js),\n                                  primaryKey: js.collections,\n                                  docId: js.Table,\n                                  type: \"simple\",\n                                  func: \"find\",\n                                  query: {}\n                                },\n                                type: \"Table\"\n                              };\n                            })[0];\n                            _context2.next = 11;\n                            return _regeneratorRuntime.awrap(DashboardActions.createWidgetInDashboard(\"5efdea1c72c7e92ca5cc362f\", arr));\n\n                          case 11:\n                            widget = _context2.sent;\n                            customId = widget.id;\n                            _this.model.attributes.prevData = [];\n\n                            _this.model.attributes.prevData.push(widget);\n\n                            if (_this.model.attributes.prevData.length >= 1) {\n                              _component.removeTrait(\"Prev\");\n                            }\n\n                            _context2.next = 18;\n                            return _regeneratorRuntime.awrap(WidgetSettingsActions.executeWidgetQuery(customId));\n\n                          case 18:\n                            queryResult = _context2.sent;\n\n                            if (_this.model.attributes.defaultData.length < 1) {\n                              _this.model.attributes.defaultData.push(queryResult);\n                            } else {\n                              _this.model.attributes.defaultData = [];\n\n                              _this.model.attributes.defaultData.push(queryResult);\n                            }\n\n                            ReactDOM.unmountComponentAtNode(_this.el);\n\n                            _this.render();\n\n                            _context2.next = 27;\n                            break;\n\n                          case 24:\n                            _context2.prev = 24;\n                            _context2.t0 = _context2[\"catch\"](0);\n                            console.log(\">> Error:\", _context2.t0);\n\n                          case 27:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, null, null, [[0, 24]], Promise);\n                  }\n                });\n\n              case 16:\n                _context3.next = 21;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this, [[0, 18]], Promise);\n      },\n      onRender: function onRender(_ref) {\n        var el = _ref.el;\n        var comps = this.model.get(\"components\");\n        comps.reset();\n        ReactDOM.render(__jsx(React.Fragment, null, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }\n        }, __jsx(Material, {\n          keys: this.model.attributes.keys,\n          data: this.model.attributes.defaultData[0],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }\n        }))), el);\n      }\n    })\n  });\n}","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/grapes/table-widgets/html-table-widget/components.jsx"],"names":["React","ReactDOM","TableRef","Material","DashboardActions","DatasourceActions","WidgetSettingsActions","editor","opt","console","log","d","Name","Location","id","notes","updateTrait","domc","DomComponents","defaultType","getType","defaultModel","model","defaultView","view","displayOptions","displayDevice","newObj","key","push","addType","extend","defaults","prototype","droppable","defaultData","prevData","dbId","keys","traits","name","type","text","full","command","getDatasources","datasources","component","getSelected","addTrait","changeProp","options","map","op","title","removeTrait","toHTML","init","listenTo","handlePropChange","attributes","length","getTrait","set","dataSourceId","config","docId","fields","toString","replace","primaryKey","at","dataSource","Table","collections","handleChanges","undefined","getDocList","docList","t","getFieldList","fieldList","get","each","trait","res","label","selected","postData","postDataArray","models","forEach","element","value","arr","js","func","query","createWidgetInDashboard","widget","customId","executeWidgetQuery","queryResult","unmountComponentAtNode","el","render","onRender","comps","reset"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TableRef } from \"./consts\";\nimport Material from \"./Material\";\nimport DashboardActions from \"../../../../actions/dashboard.actions\";\nimport DatasourceActions from \"../../../../actions/datasource.actions\";\nimport WidgetSettingsActions from \"../../../../actions/widgetSettings.actions\";\n\nexport default function (editor, opt = {}) {\n  console.log(opt)\n  let d = [\n    [\n      {\n        Name: \"Henery\",\n        Location: \"Usa\",\n        id: \"5c24dc26dc10670017e40921\",\n        \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n        notes: \"\",\n      },\n    ],\n  ];\n\n  let updateTrait = [];\n  const domc = editor.DomComponents;\n  const defaultType = domc.getType(\"default\");\n  const defaultModel = defaultType.model;\n  const defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    let newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(TableRef, {\n    model: defaultModel.extend({\n      defaults: {\n        ...defaultModel.prototype.defaults,\n        droppable: true,\n        defaultData: [\n          [\n            {\n              Name: \"Henery\",\n              Location: \"Usa\",\n              id: \"5c24dc26dc10670017e40921\",\n              \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n              notes: \"\",\n            },\n          ],\n        ],\n        prevData: [],\n        dbId: [],\n        keys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n        traits: [\n          {\n            name: \"modify\",\n            type: \"button\",\n            text: `Modify`,\n            full: true,\n            command: async (editor) => {\n              try {\n                const datasources = await DatasourceActions.getDatasources({});\n                let component = editor.getSelected();\n                component.addTrait({\n                  name: \"dataSource\",\n                  type: \"select\",\n                  changeProp: 1,\n                  options: datasources.map((op) => {\n                    return { id: op.id, name: op.title };\n                  }),\n                });\n                component.removeTrait(\"modify\");\n              } catch (e) {\n                console.log(e);\n              }\n            },\n          },\n        ],\n        toHTML: function () {\n          return \"\";\n        },\n      },\n      init() {\n        this.listenTo(this, this.handlePropChange);\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait(\"modify\").set(\"text\", \"Edit\");\n          this.addTrait(\n            {\n              name: \"Prev\",\n              type: \"pre\",\n              text: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${\n              this.attributes.prevData[0].dataSourceId ===\n              \"5ec035f7bb377b08ebc8938a\"\n                ? \"MongoDB\"\n                : this.attributes.prevData[0].dataSourceId\n            }</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${\n               this.attributes.prevData[0].config.docId\n             }</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields\n              .toString()\n              .replace(/,/g, \" | \")}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${\n              this.attributes.prevData[0].config.primaryKey\n            }</span><br/>\n\t\t\t\t\t`,\n            },\n            { at: 0 }\n          );\n        }\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = \"\";\n          this.attributes.Table = \"\";\n          this.attributes.collections = \"\";\n        } else {\n          return null;\n        }\n      },\n    }),\n\n    view: defaultView.extend({\n      init() {\n        this.listenTo(\n          this.model,\n          `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`,\n          this.handleChanges\n        );\n      },\n      async handleChanges() {\n        try {\n          if (\n            this.model.attributes.dataSource &&\n            (this.model.attributes.Table == undefined ||\n              this.model.attributes.Table == \"\")\n          ) {\n            const docList = await DatasourceActions.getDocList(\n              this.model.attributes.dataSource\n            );\n            const component = editor.getSelected();\n            component.addTrait({\n              name: \"Table\",\n              type: \"select\",\n              options: docList.map((t) => {\n                return { id: t, name: t };\n              }),\n              changeProp: 1,\n            });\n          }\n          if (this.model.attributes.Table) {\n            const fieldList = await DatasourceActions.getFieldList(\n              this.model.attributes.dataSource,\n              this.model.attributes.Table\n            );\n            const component = editor.getSelected();\n\n            if (updateTrait.length > 1) {\n              this.model.get(\"traits\").each(function (trait) {\n                component.removeTrait(updateTrait.map((t) => t.toString()));\n                component.removeTrait(\"collections\");\n                component.removeTrait(\"console\");\n              });\n            }\n            fieldList.map((t) => {\n              let res = [\n                {\n                  label: t,\n                  name: t,\n                  type: \"checkbox\",\n                  changeProp: 1,\n                },\n              ];\n              updateTrait.push(t);\n              component.addTrait(res);\n            });\n\n            component.addTrait(\n              {\n                label: \"Primary key\",\n                name: \"collections\",\n                type: \"select\",\n                options: fieldList.map((t) => t),\n                changeProp: 1,\n              },\n              { at: 40 }\n            );\n\n            component.addTrait({\n              type: \"button\",\n              name: \"console\",\n              changeProp: 1,\n              label: \"log button\",\n              text: \"Click me\",\n              full: true,\n              command: async (editor) => {\n                try {\n                  const selected = editor.getSelected();\n                  let postData = {};\n                  let postDataArray = [];\n                  selected.attributes.traits.models.forEach((element) => {\n                    postData[element.attributes.name] =\n                      element.attributes.value;\n                  });\n                  postDataArray.push(postData);\n                  let arr = null;\n                  this.model.attributes.keys = [];\n                  arr = postDataArray.map((js) => {\n                    this.model.attributes.keys.push(displayOptions(js));\n\n                    return {\n                      dataSourceId: js.dataSource,\n                      config: {\n                        fields: displayOptions(js),\n                        primaryKey: js.collections,\n                        docId: js.Table,\n                        type: \"simple\",\n                        func: \"find\",\n                        query: {},\n                      },\n                      type: \"Table\",\n                    };\n                  })[0];\n                  const widget = await DashboardActions.createWidgetInDashboard(\n                    \"5efdea1c72c7e92ca5cc362f\",\n                    arr\n                  );\n                  let customId = widget.id;\n                  this.model.attributes.prevData = [];\n                  this.model.attributes.prevData.push(widget);\n                  if (this.model.attributes.prevData.length >= 1) {\n                    component.removeTrait(\"Prev\");\n                  }\n                  const queryResult = await WidgetSettingsActions.executeWidgetQuery(\n                    customId\n                  );\n\n                  if (this.model.attributes.defaultData.length < 1) {\n                    this.model.attributes.defaultData.push(queryResult);\n                  } else {\n                    this.model.attributes.defaultData = [];\n                    this.model.attributes.defaultData.push(queryResult);\n                  }\n\n                  ReactDOM.unmountComponentAtNode(this.el);\n                  this.render();\n                } catch (e) {\n                  console.log(\">> Error:\", e);\n                }\n              },\n            });\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      onRender({ el }) {\n        const comps = this.model.get(\"components\");\n        comps.reset();\n        ReactDOM.render(\n          <>\n            <div>\n              <Material\n                keys={this.model.attributes.keys}\n                data={this.model.attributes.defaultData[0]}\n              />\n            </div>\n          </>,\n          el\n        );\n      },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}