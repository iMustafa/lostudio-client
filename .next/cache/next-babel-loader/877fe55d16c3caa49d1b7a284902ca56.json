{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/charts/gantt-chart/index.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport Gantt from './gantt-chart-widget';\nimport Toolbar from './gantt-chart-widget-toolbar';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nvar GanttChartWidget = function GanttChartWidget() {\n  var _useState = useState({}),\n      widget = _useState[0],\n      setWidget = _useState[1];\n\n  var _useState2 = useState({\n    data: [],\n    links: []\n  }),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  var _useState3 = useState(true),\n      isLoadingData = _useState3[0],\n      setIsLoadingData = _useState3[1];\n\n  var _useState4 = useState('Days'),\n      zoom = _useState4[0],\n      setZoom = _useState4[1];\n\n  var handleZoomChange = function handleZoomChange(zoom) {\n    setZoom(zoom);\n  };\n\n  useEffect(function () {\n    var getData = function getData() {\n      var Widget, Result;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\"));\n\n            case 3:\n              Widget = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\"));\n\n            case 6:\n              Result = _context.sent;\n              setTasks({\n                data: Result[0].data,\n                links: Result[0].links\n              });\n              setWidget(_objectSpread({}, Widget));\n              setIsLoadingData(false);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    getData();\n  }, []);\n\n  var renderGunttChart = function renderGunttChart() {\n    return isLoadingData || !widget ? __jsx(CircularProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 62\n      }\n    }) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, __jsx(\"div\", {\n      className: \"zoom-bar\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(Toolbar, {\n      zoom: zoom,\n      onZoomChange: handleZoomChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    })), __jsx(\"div\", {\n      className: \"gantt-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, __jsx(Gantt, {\n      tasks: tasks,\n      zoom: zoom,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  return renderGunttChart();\n};\n\nexport default GanttChartWidget;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/charts/gantt-chart/index.jsx"],"names":["useState","useEffect","Gantt","Toolbar","WidgetSettingsActions","CircularProgress","GanttChartWidget","widget","setWidget","data","links","tasks","setTasks","isLoadingData","setIsLoadingData","zoom","setZoom","handleZoomChange","getData","getWidgetSettingsById","Widget","executeWidgetQuery","Result","console","log","renderGunttChart"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,qBAAP,MAAkC,4CAAlC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA,kBACDN,QAAQ,CAAC,EAAD,CADP;AAAA,MACtBO,MADsB;AAAA,MACdC,SADc;;AAAA,mBAEHR,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAFL;AAAA,MAEtBC,KAFsB;AAAA,MAEfC,QAFe;;AAAA,mBAGaZ,QAAQ,CAAC,IAAD,CAHrB;AAAA,MAGtBa,aAHsB;AAAA,MAGPC,gBAHO;;AAAA,mBAILd,QAAQ,CAAC,MAAD,CAJH;AAAA,MAItBe,IAJsB;AAAA,MAIhBC,OAJgB;;AAM7B,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,IAAD,EAAU;AACjCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAFD;;AAIAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiB,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAESd,qBAAqB,CAACe,qBAAtB,CAA4C,0BAA5C,CAFT;;AAAA;AAENC,cAAAA,MAFM;AAAA;AAAA,+CAGShB,qBAAqB,CAACiB,kBAAtB,CAAyC,0BAAzC,CAHT;;AAAA;AAGNC,cAAAA,MAHM;AAIZV,cAAAA,QAAQ,CAAC;AAAEH,gBAAAA,IAAI,EAAEa,MAAM,CAAC,CAAD,CAAN,CAAUb,IAAlB;AAAwBC,gBAAAA,KAAK,EAAEY,MAAM,CAAC,CAAD,CAAN,CAAUZ;AAAzC,eAAD,CAAR;AACAF,cAAAA,SAAS,mBAAMY,MAAN,EAAT;AACAN,cAAAA,gBAAgB,CAAC,KAAD,CAAhB;AANY;AAAA;;AAAA;AAAA;AAAA;AAQZS,cAAAA,OAAO,CAACC,GAAR;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAWAN,IAAAA,OAAO;AACR,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WAAMZ,aAAa,IAAI,CAACN,MAAlB,GAA4B,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B,GAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,IAAI,EAAEQ,IADR;AAEE,MAAA,YAAY,EAAEE,gBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAOE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEN,KAAd;AAAqB,MAAA,IAAI,EAAEI,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,CADuB;AAAA,GAAzB;;AAcA,SACEU,gBAAgB,EADlB;AAGD,CA1CD;;AA4CA,eAAenB,gBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport Gantt from './gantt-chart-widget'\nimport Toolbar from './gantt-chart-widget-toolbar'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst GanttChartWidget = () => {\n  const [widget, setWidget] = useState({})\n  const [tasks, setTasks] = useState({ data: [], links: [] })\n  const [isLoadingData, setIsLoadingData] = useState(true)\n  const [zoom, setZoom] = useState('Days')\n\n  const handleZoomChange = (zoom) => {\n    setZoom(zoom)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const Widget = await WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\")\n        const Result = await WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\")\n        setTasks({ data: Result[0].data, links: Result[0].links })\n        setWidget({ ...Widget })\n        setIsLoadingData(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  const renderGunttChart = () => isLoadingData || !widget ? (<CircularProgress />) : (\n    <div>\n      <div className=\"zoom-bar\">\n        <Toolbar\n          zoom={zoom}\n          onZoomChange={handleZoomChange}\n        />\n      </div>\n      <div className=\"gantt-container\">\n        <Gantt tasks={tasks} zoom={zoom} />\n      </div>\n    </div>\n  )\n\n  return (\n    renderGunttChart()\n  )\n}\n\nexport default GanttChartWidget"]},"metadata":{},"sourceType":"module"}