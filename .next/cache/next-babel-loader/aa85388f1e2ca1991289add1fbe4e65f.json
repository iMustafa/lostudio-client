{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport MeasureConditionItem from './measure-conditions-item';\nimport AddMeasureCondition from './add-measure-condition';\nconst useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n});\n\nconst ListMeasureConditions = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: isAddingMeasureCondition,\n    1: setIsAddingMeasureCondition\n  } = useState(false);\n  const {\n    0: measureConditions,\n    1: setMeasureConditions\n  } = useState([]);\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(0);\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id);\n        setMeasureConditions($measureConditions);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getMeasureConditions();\n  }, [refresh]);\n  return __jsx(\"div\", null, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Measure Conditions\")), isAddingMeasureCondition ? __jsx(AddMeasureCondition, {\n    setRefresh: setRefresh,\n    refresh: refresh,\n    widget: widget,\n    setIsAddingMeasureCondition: setIsAddingMeasureCondition\n  }) : __jsx(Button, {\n    fullWidth: true,\n    style: {\n      marginBottom: 15\n    },\n    onClick: () => {\n      setIsAddingMeasureCondition(true);\n    }\n  }, \"Add Measure Condition\"), measureConditions.map(measureCondition => __jsx(MeasureConditionItem, {\n    setRefresh: setRefresh,\n    refresh: refresh,\n    widget: widget,\n    key: measureCondition.id,\n    measureCondition: measureCondition\n  })));\n};\n\nexport default ListMeasureConditions;","map":null,"metadata":{},"sourceType":"module"}