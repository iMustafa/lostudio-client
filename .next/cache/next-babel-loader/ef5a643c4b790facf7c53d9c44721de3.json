{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Gantt from './gantt-chart-widget';\nimport Toolbar from './gantt-chart-widget-toolbar';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst GanttChartWidget = () => {\n  const {\n    0: widget,\n    1: setWidget\n  } = useState({});\n  const {\n    0: tasks,\n    1: setTasks\n  } = useState({\n    data: [],\n    links: []\n  });\n  const {\n    0: isLoadingData,\n    1: setIsLoadingData\n  } = useState(true);\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState('Days');\n\n  const handleZoomChange = zoom => {\n    setZoom(zoom);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const Widget = await WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\");\n        const Result = await WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\");\n        setTasks({\n          data: Result[0].data,\n          links: Result[0].links\n        });\n        setWidget(_objectSpread({}, Widget));\n        setIsLoadingData(false);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getData();\n  }, []);\n\n  const renderGunttChart = () => isLoadingData || !widget ? __jsx(CircularProgress, null) : __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"zoom-bar\"\n  }, __jsx(Toolbar, {\n    zoom: zoom,\n    onZoomChange: handleZoomChange\n  })), __jsx(\"div\", {\n    className: \"gantt-container\"\n  }, __jsx(Gantt, {\n    tasks: tasks,\n    zoom: zoom\n  })));\n\n  return renderGunttChart();\n};\n\nexport default GanttChartWidget;","map":null,"metadata":{},"sourceType":"module"}