{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nvar API_URL = config().publicRuntimeConfig.API_URL;\n\nvar NotificationsActions =\n/*#__PURE__*/\nfunction () {\n  function NotificationsActions() {\n    _classCallCheck(this, NotificationsActions);\n  }\n\n  _createClass(NotificationsActions, null, [{\n    key: \"getMyNotificationsCount\",\n    value: function getMyNotificationsCount(_ref) {\n      var Authorization, userId;\n      return _regeneratorRuntime.async(function getMyNotificationsCount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Authorization = _ref.Authorization, userId = _ref.userId;\n              return _context.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/users/\").concat(userId || Cookie.get('userId'), \"/notifications/count\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                },\n                params: {\n                  filter: {\n                    where: {\n                      seen: false\n                    }\n                  }\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getMyNotifications\",\n    value: function getMyNotifications(_ref2) {\n      var Authorization, userId;\n      return _regeneratorRuntime.async(function getMyNotifications$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Authorization = _ref2.Authorization, userId = _ref2.userId;\n              return _context2.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/users/\").concat(userId || Cookie.get('userId'), \"/notifications\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"markAsSeen\",\n    value: function markAsSeen(_ref3) {\n      var Authorization, id;\n      return _regeneratorRuntime.async(function markAsSeen$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              Authorization = _ref3.Authorization, id = _ref3.id;\n              return _context3.abrupt(\"return\", axios.patch(\"\".concat(API_URL, \"/Notifications/\").concat(id), {\n                seen: true\n              }, {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return NotificationsActions;\n}();\n\nexport { NotificationsActions as default };","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/actions/notifications.actions.ts"],"names":["axios","config","Cookie","API_URL","publicRuntimeConfig","NotificationsActions","Authorization","userId","get","headers","params","filter","where","seen","then","res","data","err","id","patch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;IAGQC,O,GAAYF,MAAM,GAAGG,mB,CAArBD,O;;IAEaE,oB;;;;;;;;;;;;;;;AAE2BC,cAAAA,a,QAAAA,a,EAAeC,M,QAAAA,M;+CACpDP,KAAK,CACTQ,GADI,WAEAL,OAFA,oBAEiBI,MAAM,IAAIL,MAAM,CAACM,GAAP,CAAW,QAAX,CAF3B,2BAGH;AACEC,gBAAAA,OAAO,EAAE;AAAEH,kBAAAA,aAAa,EAAEA,aAAa,IAAIJ,MAAM,CAACM,GAAP,CAAW,IAAX;AAAlC,iBADX;AAEEE,gBAAAA,MAAM,EAAE;AAAEC,kBAAAA,MAAM,EAAE;AAAEC,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,IAAI,EAAE;AAAR;AAAT;AAAV;AAFV,eAHG,EAOJC,IAPI,CAOC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAPJ,WAQE,UAAAC,GAAG;AAAA,uBAAIA,GAAJ;AAAA,eARL,C;;;;;;;;;;;;;;;;;AAWgCX,cAAAA,a,SAAAA,a,EAAeC,M,SAAAA,M;gDAC/CP,KAAK,CACTQ,GADI,WACGL,OADH,oBACoBI,MAAM,IAAIL,MAAM,CAACM,GAAP,CAAW,QAAX,CAD9B,qBACoE;AAAEC,gBAAAA,OAAO,EAAE;AAAEH,kBAAAA,aAAa,EAAEA,aAAa,IAAIJ,MAAM,CAACM,GAAP,CAAW,IAAX;AAAlC;AAAX,eADpE,EAEJM,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAJ;AAAA,eAHL,C;;;;;;;;;;;;;;;;;AAMwBX,cAAAA,a,SAAAA,a,EAAeY,E,SAAAA,E;gDACvClB,KAAK,CACTmB,KADI,WACKhB,OADL,4BAC8Be,EAD9B,GACoC;AAAEL,gBAAAA,IAAI,EAAE;AAAR,eADpC,EACoD;AAAEJ,gBAAAA,OAAO,EAAE;AAAEH,kBAAAA,aAAa,EAAEA,aAAa,IAAIJ,MAAM,CAACM,GAAP,CAAW,IAAX;AAAlC;AAAX,eADpD,EAEJM,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAJ;AAAA,eAHL,C;;;;;;;;;;;;;;SAtBUZ,oB","sourcesContent":["import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport Notification from '../types/notification.types'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class NotificationsActions {\n\n  public static async getMyNotificationsCount({ Authorization, userId }: { Authorization?: string, userId?: string }): Promise<{ count: Number }> {\n    return axios\n      .get(\n        `${API_URL}/users/${userId || Cookie.get('userId')}/notifications/count`,\n        {\n          headers: { Authorization: Authorization || Cookie.get('id') },\n          params: { filter: { where: { seen: false } } }\n        })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getMyNotifications({ Authorization, userId }: { Authorization?: string, userId?: string }): Promise<Array<Notification>> {\n    return axios\n      .get(`${API_URL}/users/${userId || Cookie.get('userId')}/notifications`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async markAsSeen({ Authorization, id }: { Authorization?: string, id: string }): Promise<Notification> {\n    return axios\n      .patch(`${API_URL}/Notifications/${id}`, { seen: true }, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n}"]},"metadata":{},"sourceType":"module"}