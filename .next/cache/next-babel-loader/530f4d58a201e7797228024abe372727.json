{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/form-controls/textfield/text-field-widget-settings.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DataSourceActions from '../../../../actions/datasource.actions';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport Swal from 'sweetalert2';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500,\n      paddingLeft: \"15px\",\n      paddingRight: \"15px\",\n      paddingTop: \"15px\"\n    },\n    h2: {\n      width: '100%',\n      textAlign: 'center',\n      borderBottom: '1px solid #000',\n      lineHeight: '0.1em',\n      marginTop: \"20px\",\n      marginBottom: \"20px\",\n      fontFamily: 'Roboto',\n      fontSize: '13px',\n      color: \"#3F51B5\"\n    },\n    span: {\n      background: '#fff',\n      padding: '0 10px'\n    },\n    formControl: {\n      marginTop: \"15px\"\n    }\n  };\n});\n\nvar TextFieldWidgetSettings = function TextFieldWidgetSettings(_ref) {\n  var widget = _ref.widget,\n      handleSettingsClose = _ref.handleSettingsClose,\n      isAdding = _ref.isAdding,\n      onWidgetAdd = _ref.onWidgetAdd;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      linkToFormGroup = _useState[0],\n      setLinkToFormGroup = _useState[1];\n\n  var _useState2 = useState([]),\n      formGroups = _useState2[0],\n      setFormGroups = _useState2[1];\n\n  var _useState3 = useState(null),\n      selectedFormGroup = _useState3[0],\n      setSelectedFormGroup = _useState3[1];\n\n  var _useState4 = useState({\n    label: '',\n    id: '',\n    name: '',\n    className: ''\n  }),\n      properties = _useState4[0],\n      setProperties = _useState4[1];\n\n  var handlePropertiesChange = function handlePropertiesChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setProperties(_objectSpread({}, properties, _defineProperty({}, name, value)));\n  };\n\n  useEffect(function () {\n    var getFormGroups = function getFormGroups() {\n      var $formGroups;\n      return _regeneratorRuntime.async(function getFormGroups$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getFormGroupWidgets());\n\n            case 3:\n              $formGroups = _context.sent;\n              setFormGroups($formGroups);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    getFormGroups();\n  }, []);\n\n  var handleSelectFormGroup = function handleSelectFormGroup(event) {\n    var value = event.target.value;\n    setSelectedFormGroup(value);\n  };\n\n  var handleLinkToFormGroup = function handleLinkToFormGroup(event) {\n    var checked = event.target.checked;\n    if (!checked) setSelectedFormGroup(null);\n    setLinkToFormGroup(checked);\n  };\n\n  var renderFormGroupSelection = function renderFormGroupSelection(_) {\n    return linkToFormGroup ? __jsx(FormControl, {\n      fullWidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }, __jsx(InputLabel, {\n      id: \"form-group-title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, \"Form Group\"), __jsx(Select, {\n      fullWidth: true,\n      labelId: \"form-group-title\",\n      value: selectedFormGroup,\n      onChange: handleSelectFormGroup,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, formGroups.map(function (formGroup) {\n      return __jsx(MenuItem, {\n        value: formGroup.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, formGroup.properties.name);\n    }))) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var saveConfigData = function saveConfigData() {\n    var data, update;\n    return _regeneratorRuntime.async(function saveConfigData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            data = {\n              properties: properties,\n              type: 'Text Field'\n            };\n\n            if (!isAdding) {\n              _context2.next = 6;\n              break;\n            }\n\n            onWidgetAdd(data, true, selectedFormGroup);\n            _context2.next = 10;\n            break;\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.updateWidgetSettings(widget.id, data));\n\n          case 8:\n            update = _context2.sent;\n            handleSettingsClose(update);\n\n          case 10:\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Widget Info\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"Title\"), __jsx(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })), __jsx(\"h2\", {\n    className: classes.h2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Label\"), __jsx(Input, {\n    name: \"label\",\n    onChange: handlePropertiesChange,\n    value: properties.label,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"ID\"), __jsx(Input, {\n    name: \"id\",\n    onChange: handlePropertiesChange,\n    value: properties.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Name\"), __jsx(Input, {\n    name: \"name\",\n    onChange: handlePropertiesChange,\n    value: properties.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"Class name\"), __jsx(Input, {\n    name: \"className\",\n    onChange: handlePropertiesChange,\n    value: properties.className,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: linkToFormGroup,\n      onChange: handleLinkToFormGroup,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 20\n      }\n    }),\n    label: \"Link To Form Group?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  })), renderFormGroupSelection(), __jsx(Button, {\n    onClick: saveConfigData,\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, \"Save\"));\n};\n\nexport default TextFieldWidgetSettings;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/form-controls/textfield/text-field-widget-settings.jsx"],"names":["useState","useEffect","makeStyles","Button","Input","InputLabel","FormControl","FormControlLabel","Checkbox","Select","MenuItem","DataSourceActions","WidgetSettingsActions","Swal","useStyles","theme","list","width","paddingLeft","paddingRight","paddingTop","h2","textAlign","borderBottom","lineHeight","marginTop","marginBottom","fontFamily","fontSize","color","span","background","padding","formControl","TextFieldWidgetSettings","widget","handleSettingsClose","isAdding","onWidgetAdd","classes","linkToFormGroup","setLinkToFormGroup","formGroups","setFormGroups","selectedFormGroup","setSelectedFormGroup","label","id","name","className","properties","setProperties","handlePropertiesChange","event","target","value","getFormGroups","getFormGroupWidgets","$formGroups","console","log","handleSelectFormGroup","handleLinkToFormGroup","checked","renderFormGroupSelection","_","map","formGroup","saveConfigData","data","type","updateWidgetSettings","update"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst TextFieldWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', className: ''\n  })\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Text Field'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default TextFieldWidgetSettings"]},"metadata":{},"sourceType":"module"}