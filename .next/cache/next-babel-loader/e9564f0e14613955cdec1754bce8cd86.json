{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DashboardActions from '../../../actions/dashboard.actions';\n\nconst SubDashboardSettings = ({\n  id,\n  refresh,\n  setRefresh\n}) => {\n  const {\n    0: subDashboards,\n    1: setSubDashboards\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: update,\n    1: setUpdate\n  } = useState(0);\n  const {\n    0: isShowingAddFields,\n    1: setIsShowingAddFields\n  } = useState(false);\n  const {\n    0: isAdding,\n    1: setIsAdding\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    title: '',\n    description: '',\n    isSub: true\n  });\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({\n          id\n        });\n        setSubDashboards($subDashBoards);\n        setIsLoading(false);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getSubDashboards();\n  }, [update]);\n\n  const addNewDashboard = async () => {\n    try {\n      setIsAdding(true);\n      const subDashboard = await DashboardActions.createDashboard({\n        dashboard: state\n      });\n      const linkDashboard = await DashboardActions.linkSubDashboard({\n        subDashboardId: subDashboard.id,\n        id\n      });\n      setUpdate(update + 1);\n      setIsShowingAddFields(false);\n      setIsAdding(false);\n      setRefresh(refresh + 1);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const deleteSubDashboard = async subDashboardId => {\n    try {\n      const subDashboard = await DashboardActions.unLinkSubDashboard({\n        id,\n        subDashboardId\n      });\n      setUpdate(update + 1);\n      setRefresh(refresh + 1);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const renderSubDashboardCard = subDashboard => __jsx(Card, {\n    variant: \"outlined\",\n    key: subDashboard.id,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(CardHeader, {\n    title: subDashboard.subDashboard.title,\n    subheader: subDashboard.subDashboard.createdAt\n  }), __jsx(CardContent, null, __jsx(Typography, null, subDashboard.subDashboard.description)), __jsx(CardActions, null, __jsx(Button, {\n    onClick: () => {\n      deleteSubDashboard(subDashboard.id);\n    }\n  }, \"Delete\")));\n\n  return __jsx(\"div\", null, isShowingAddFields ? __jsx(Card, {\n    variant: \"outlined\"\n  }, __jsx(CardContent, null, __jsx(TextField, {\n    label: \"Title\",\n    fullWidth: true,\n    onChange: event => {\n      setState(_objectSpread({}, state, {\n        title: event.target.value\n      }));\n    }\n  }), __jsx(TextField, {\n    style: {\n      marginTop: 10\n    },\n    fullWidth: true,\n    label: \"Description\",\n    multiline: true,\n    rows: 2,\n    rowsMax: 4,\n    onChange: event => {\n      setState(_objectSpread({}, state, {\n        description: event.target.value\n      }));\n    }\n  })), isAdding ? __jsx(CardActions, null, __jsx(CircularProgress, null)) : __jsx(CardActions, null, __jsx(Button, {\n    onClick: addNewDashboard\n  }, \"Add\"), __jsx(Button, {\n    onClick: () => {\n      setIsShowingAddFields(false);\n    }\n  }, \"Cancel\"))) : __jsx(Button, {\n    fullWidth: true,\n    onClick: () => {\n      setIsShowingAddFields(true);\n    }\n  }, \"Add New Page\"), isLoading ? __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: 15\n    }\n  }, __jsx(CircularProgress, null)) : subDashboards.map(subDashboard => renderSubDashboardCard(subDashboard)));\n};\n\nexport default SubDashboardSettings;","map":null,"metadata":{},"sourceType":"module"}