{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { Button } from '@material-ui/core';\nimport DatasourceActions from '../../../actions/datasource.actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '30px 15px 15px 15px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: \"Roboto\"\n  },\n  gridStyles: {\n    margin: '10px 0 5px 0',\n    width: '100%'\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    margin: '10px 0 20px',\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  card: {\n    padding: '10px 15px 20px 15px',\n    marginBottom: '20px'\n  }\n}));\n\nconst AddMongoDBDataSource = () => {\n  const classes = useStyles();\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    showPassword: false,\n    useAuth: 0,\n    isLoading: false\n  });\n  const {\n    0: attempts,\n    1: setAttempts\n  } = useState(0);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    title: '',\n    type: 'mongodb',\n    force: false,\n    description: '',\n    config: {\n      port: 27017,\n      server: '',\n      db: '',\n      user: '',\n      password: ''\n    }\n  });\n\n  const handleClickShowPassword = () => {\n    setValues(_objectSpread({}, values, {\n      showPassword: !values.showPassword\n    }));\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const handleInputChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setState(_objectSpread({}, state, {\n      [name]: value\n    }));\n    setAttempts(0);\n  };\n\n  const handleAuthChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setState(_objectSpread({}, state, {\n      config: _objectSpread({}, state.config, {\n        [name]: value\n      })\n    }));\n  };\n\n  const renderSubmitButtons = () => {\n    return values.isLoading ? __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(CircularProgress, null)) : attempts >= 1 ? __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"alert alert-info\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(\"p\", {\n      style: {\n        fontFamily: 'Roboto',\n        margin: '0'\n      }\n    }, \"Connection failed to this database, would you like to save it anyway?\")), __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(Button, null, \"Cancel\"), __jsx(Button, null, \"Save\"))) : __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(Button, null, \"Cancel\"), __jsx(Button, {\n      onClick: handleSubmitData\n    }, \"Save\"));\n  };\n\n  const handleSubmitData = async () => {\n    try {\n      setValues(_objectSpread({}, values, {\n        isLoading: true\n      }));\n      const res = await DatasourceActions.createDatasource(state);\n      setValues(_objectSpread({}, values, {\n        isLoading: false\n      }));\n    } catch (e) {\n      if (e.error.message == 'Connection Failed') {\n        setState(_objectSpread({}, state, {\n          force: true\n        }));\n        setAttempts(1);\n      }\n    }\n  };\n\n  const renderAuth = () => {\n    return values.useAuth ? __jsx(Grid, {\n      container: true,\n      spacing: 2\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(TextField, {\n      fullWidth: true,\n      onChange: handleAuthChange.bind(this),\n      required: true,\n      value: state.config.user,\n      name: \"user\",\n      label: \"Username\"\n    })), __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(FormControl, {\n      fullWidth: true\n    }, __jsx(InputLabel, {\n      htmlFor: \"password\"\n    }, \"Password\"), __jsx(Input, {\n      required: true,\n      name: \"password\",\n      type: values.showPassword ? 'text' : 'password',\n      onChange: handleAuthChange.bind(this),\n      value: state.config.password,\n      endAdornment: __jsx(InputAdornment, {\n        position: \"end\"\n      }, __jsx(IconButton, {\n        \"aria-label\": \"toggle password visibility\",\n        onClick: handleClickShowPassword,\n        onMouseDown: handleMouseDownPassword\n      }, values.showPassword ? __jsx(Visibility, null) : __jsx(VisibilityOff, null)))\n    })))) : __jsx(Grid, {\n      container: true,\n      spacing: 2\n    });\n  };\n\n  return __jsx(Card, null, __jsx(\"div\", {\n    className: classes.cardTitle\n  }, \"Add a New Data Source - MongoDB\"), __jsx(Card, {\n    className: classes.root\n  }, __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Properties\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    onChange: handleInputChange.bind(this),\n    fullWidth: true,\n    required: true,\n    value: state.title,\n    name: \"title\",\n    label: \"Name\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    onChange: handleInputChange.bind(this),\n    fullWidth: true,\n    id: \"description\",\n    value: state.description,\n    name: \"description\",\n    label: \"Description\"\n  })))), __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Database Properties\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 8\n  }, __jsx(TextField, {\n    fullWidth: true,\n    onChange: handleAuthChange.bind(this),\n    required: true,\n    value: state.config.server,\n    name: \"server\",\n    label: \"Server\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(TextField, {\n    fullWidth: true,\n    onChange: handleAuthChange.bind(this),\n    required: true,\n    value: state.config.port,\n    name: \"port\",\n    label: \"Port\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(TextField, {\n    fullWidth: true,\n    onChange: handleAuthChange.bind(this),\n    required: true,\n    value: state.config.db,\n    name: \"db\",\n    label: \"Database\"\n  })))), __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Authentication\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    id: \"mechanism\"\n  }, \"Mechanism\"), __jsx(Select, {\n    labelId: \"mechanism\",\n    onChange: e => {\n      setValues(_objectSpread({}, values, {\n        useAuth: e.target.value\n      }));\n    },\n    value: values.useAuth\n  }, __jsx(MenuItem, {\n    value: 0\n  }, \"No Authentication\"), __jsx(MenuItem, {\n    value: 1\n  }, \"Username and Password\")))), renderAuth())), __jsx(Card, {\n    className: classes.card\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Miscellaneous\")), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(TextField, {\n    fullWidth: true,\n    id: \"timeout\",\n    name: \"timeout\",\n    label: \"Query Timeout\"\n  })))), renderSubmitButtons()));\n};\n\nexport default AddMongoDBDataSource;","map":null,"metadata":{},"sourceType":"module"}