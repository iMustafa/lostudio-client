{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport NotificationsActions from '../../actions/notifications.actions';\nimport Typography from '@material-ui/core/Typography';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    gridItem: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    },\n    message: {\n      alignSelf: 'flex-start',\n      justifySelf: 'flex-start',\n      fontSize: 14\n    },\n    date: {\n      alignSelf: 'flex-start',\n      fontSize: 12,\n      color: \"#555\"\n    }\n  };\n});\n\nvar NotificationItem = function NotificationItem(_ref) {\n  var notification = _ref.notification;\n  var classes = useStyles();\n\n  var _useState = useState(notification.seen),\n      isSeen = _useState[0],\n      setIsSeen = _useState[1];\n\n  var decideNotificationIcon = function decideNotificationIcon() {\n    switch (notification.type) {\n      case \"Dashboard Collaboration\":\n        return __jsx(DashboardIcon, null);\n    }\n  };\n\n  var markSeen = function markSeen() {\n    return _regeneratorRuntime.async(function markSeen$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (notification.seen) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(NotificationsActions.markAsSeen({\n              id: notification.id\n            }));\n\n          case 4:\n            setIsSeen(true);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  };\n\n  return __jsx(Card, {\n    onClick: markSeen\n  }, __jsx(Grid, {\n    spacing: 0,\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2,\n    className: classes.gridItem\n  }, decideNotificationIcon()), __jsx(Grid, {\n    item: true,\n    xs: 8,\n    className: classes.gridItem\n  }, __jsx(Typography, {\n    className: classes.message\n  }, notification.message), __jsx(Typography, {\n    className: classes.date\n  }, moment(notification.createdAt).format('YYYY/MM/DD HH:mm'))), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    className: classes.gridItem\n  }, __jsx(IconButton, {\n    style: {\n      outline: 'none'\n    }\n  }, __jsx(RadioButtonUncheckedIcon, {\n    fontSize: \"small\",\n    style: {\n      color: \"#3F51B5\"\n    }\n  })))));\n};\n\nexport default NotificationItem;","map":null,"metadata":{},"sourceType":"module"}