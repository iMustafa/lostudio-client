{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/widgets/table/table-widget-settings-panel.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport DataSourceActions from '../../../actions/datasource.actions';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}));\n\nconst TableWidgetSettingsPanel = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const {\n    0: datasources,\n    1: setDatasources\n  } = useState([]);\n  const {\n    0: datasource,\n    1: setDatasource\n  } = useState(!isAdding ? widget.dataSourceId : '');\n  const {\n    0: docList,\n    1: setDocList\n  } = useState([]);\n  const {\n    0: doc,\n    1: setDoc\n  } = useState(!isAdding ? widget.config.docId : '');\n  const {\n    0: fieldList,\n    1: setFieldList\n  } = useState([]);\n  const {\n    0: fields,\n    1: setFields\n  } = useState(!isAdding ? widget.config.fields : []);\n  const {\n    0: query,\n    1: setQuery\n  } = useState({});\n  const {\n    0: isEditable,\n    1: setIsEditable\n  } = useState(!isAdding ? false : widget.config.isEditable);\n  const {\n    0: isDeletable,\n    1: setIsDeletable\n  } = useState(!isAdding ? false : widget.config.isDeletable);\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({});\n\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource);\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc);\n        setDocList($docList);\n        setFieldList($fieldList);\n      }\n\n      setDatasources($datasources);\n      return $datasources;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getDocList = async id => {\n    try {\n      setDatasource(id);\n      const $docList = await DataSourceActions.getDocList(id);\n      setDocList($docList);\n      return $docList;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId);\n      const $fieldList = await DataSourceActions.getFieldList(id, docId);\n      setFieldList($fieldList);\n      return $fieldList;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleDatasourceChange = async event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFieldList([]);\n    setFields([]);\n    await getDocList(value);\n  };\n\n  const handleDocChange = async event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFieldList([]);\n    setFields([]);\n    await getFieldList(datasource, value);\n  };\n\n  const handleFieldChange = name => event => {\n    const {\n      checked\n    } = event.target;\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name));\n  };\n\n  const renderFieldSettings = () => fieldList.length ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 57\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Fields Settings\")), fieldList.map(field => __jsx(FormControlLabel, {\n    key: field,\n    control: __jsx(Checkbox, {\n      checked: fields.includes(field),\n      onChange: handleFieldChange(field),\n      value: field,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }),\n    label: field,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 30\n    }\n  }))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  });\n\n  const renderQuerySettings = () => fields.length ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 54\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Query Settings\")), fields.map(field => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 27\n    }\n  }))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  });\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {}\n        },\n        type: 'Table'\n      };\n\n      if (isAdding) {\n        onWidgetAdd(data);\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data);\n        handleSettingsClose(update);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getDatasources();\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    id: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, \"Title\"), __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  })), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingRight: 10,\n      paddingLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isEditable,\n      onChange: event => {\n        setIsEditable(event.target.checked);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    }),\n    label: \"Is Editable?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      paddingRight: 10,\n      paddingLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isDeletable,\n      onChange: event => {\n        setIsDeletable(event.target.checked);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }\n    }),\n    label: \"Is Deletable?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }))), __jsx(\"h2\", {\n    className: classes.h2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: classes.span,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"Connection Settings\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    id: \"data-source\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, \"Data Source\"), __jsx(Select, {\n    name: \"datasource\",\n    labelId: \"data-source\",\n    value: datasource,\n    onChange: handleDatasourceChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, datasources.map(item => __jsx(MenuItem, {\n    key: item.id,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 37\n    }\n  }, item.title)))), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    disabled: datasource ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, __jsx(InputLabel, {\n    id: \"doc-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, \"Table/Collection\"), __jsx(Select, {\n    name: \"docList\",\n    labelId: \"doc-list\",\n    value: doc,\n    onChange: handleDocChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, docList.map(item => __jsx(MenuItem, {\n    key: item,\n    value: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, item)))), renderFieldSettings(), renderQuerySettings(), __jsx(Button, {\n    fullWidth: true,\n    onClick: saveConfigSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, isAdding ? 'Add' : 'Save'));\n};\n\nexport default TableWidgetSettingsPanel;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/widgets/table/table-widget-settings-panel.jsx"],"names":["useState","useEffect","makeStyles","Button","InputLabel","MenuItem","FormControl","Input","Select","FormControlLabel","Checkbox","Grid","DataSourceActions","WidgetSettingsActions","useStyles","theme","list","width","paddingLeft","paddingRight","paddingTop","h2","textAlign","borderBottom","lineHeight","marginTop","marginBottom","fontFamily","fontSize","color","span","background","padding","formControl","TableWidgetSettingsPanel","widget","handleSettingsClose","isAdding","onWidgetAdd","classes","datasources","setDatasources","datasource","setDatasource","dataSourceId","docList","setDocList","doc","setDoc","config","docId","fieldList","setFieldList","fields","setFields","query","setQuery","isEditable","setIsEditable","isDeletable","setIsDeletable","getDatasources","$datasources","$docList","getDocList","$fieldList","getFieldList","e","console","log","id","handleDatasourceChange","event","name","value","target","handleDocChange","handleFieldChange","checked","filter","field","renderFieldSettings","length","map","includes","renderQuerySettings","saveConfigSettings","data","type","func","update","updateWidgetSettings","item","title"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Grid from '@material-ui/core/Grid'\nimport DataSourceActions from '../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst TableWidgetSettingsPanel = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [query, setQuery] = useState({})\n  const [isEditable, setIsEditable] = useState(!isAdding ? false : widget.config.isEditable)\n  const [isDeletable, setIsDeletable] = useState(!isAdding ? false : widget.config.isDeletable)\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {}\n        },\n        type: 'Table'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id='title'>Title</InputLabel>\n        <Input />\n      </FormControl>\n      <Grid container spacing={0}>\n        <Grid item xs={6} style={{ paddingRight: 10, paddingLeft: 10 }}>\n          <FormControlLabel\n            control={\n              <Checkbox checked={isEditable} onChange={event => { setIsEditable(event.target.checked) }} />\n            }\n            label=\"Is Editable?\"\n          />\n        </Grid>\n        <Grid item xs={6} style={{ paddingRight: 10, paddingLeft: 10 }}>\n          <FormControlLabel\n            control={\n              <Checkbox checked={isDeletable} onChange={event => { setIsDeletable(event.target.checked) }} />\n            }\n            label=\"Is Deletable?\"\n          />\n        </Grid>\n      </Grid>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Connection Settings</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id=\"data-source\">Data Source</InputLabel>\n        <Select\n          name=\"datasource\"\n          labelId=\"data-source\"\n          value={datasource}\n          onChange={handleDatasourceChange}\n        >\n          {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n        <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n        <Select\n          name=\"docList\"\n          labelId=\"doc-list\"\n          value={doc}\n          onChange={handleDocChange}\n        >\n          {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      {renderFieldSettings()}\n\n      {renderQuerySettings()}\n\n      <Button fullWidth onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n    </div>\n  )\n}\n\nexport default TableWidgetSettingsPanel"]},"metadata":{},"sourceType":"module"}