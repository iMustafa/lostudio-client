{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/dashboards/create-dashboard.jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport DatasourceActions from '../../actions/datasource.actions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport DashboardActions from '../../actions/dashboard.actions';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      marginTop: '25px'\n    },\n    cardBody: {\n      padding: '10px'\n    },\n    cardTitle: {\n      fontSize: '12px',\n      backgroundColor: '#3F51B5',\n      padding: '3px 3px 3px 6px',\n      color: '#FFF',\n      fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n    },\n    actionButtons: {\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  };\n});\n\nvar getSteps = function getSteps() {\n  return ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation'];\n};\n\nvar CreateDashboard = function CreateDashboard() {\n  var classes = useStyles();\n\n  var _useState = useState({\n    title: '',\n    description: '',\n    datasourceId: '',\n    collaborators: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      activeStep = _useState2[0],\n      setActiveStep = _useState2[1];\n\n  var _useState3 = useState([]),\n      datasources = _useState3[0],\n      setDatasources = _useState3[1];\n\n  var _useState4 = useState(new Set()),\n      skipped = _useState4[0],\n      setSkipped = _useState4[1];\n\n  var steps = getSteps();\n  useEffect(function () {\n    var getDataSources = function getDataSources() {\n      var data;\n      return _regeneratorRuntime.async(function getDataSources$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(DatasourceActions.getDatasources({}));\n\n            case 3:\n              data = _context.sent;\n              console.log(data);\n              setDatasources(data);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    getDataSources();\n  }, []);\n\n  var handleChange = function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, value)));\n  };\n\n  var getStepContent = function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return __jsx(FormGroup, {\n          row: true,\n          style: {\n            marginBottom: 15\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }\n        }, __jsx(TextField, {\n          onChange: handleChange,\n          fullWidth: true,\n          label: \"Title\",\n          type: \"text\",\n          name: \"title\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }\n        }), __jsx(TextField, {\n          onChange: handleChange,\n          fullWidth: true,\n          label: \"Description\",\n          multiline: true,\n          type: \"text\",\n          name: \"description\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }\n        }));\n\n      case 1:\n        return __jsx(FormGroup, {\n          row: true,\n          style: {\n            marginBottom: 15\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }\n        }, __jsx(InputLabel, {\n          id: \"datasource-label\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }\n        }, \"Default DataSource\"), __jsx(Select, {\n          value: state.datasourceId,\n          onChange: handleChange,\n          name: \"datasourceId\",\n          fullWidth: true,\n          labelId: \"datasource-label\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }\n        }, datasources.map(function (datasource) {\n          return __jsx(MenuItem, {\n            value: datasource.id,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }\n          }, datasource.title);\n        })));\n\n      case 2:\n        return 'Allow people to help you build your dashboard!';\n\n      case 3:\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }\n        }, __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }\n        }, \"Name: \", state.title), __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }\n        }, \"Description: \", state.description), __jsx(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }\n        }, \"Datasource: \", state.datasourceId));\n\n      default:\n        return 'Unknown step';\n    }\n  };\n\n  var isStepOptional = function isStepOptional(step) {\n    return step === 2;\n  };\n\n  var isStepSkipped = function isStepSkipped(step) {\n    return skipped.has(step);\n  };\n\n  var handleNext = function handleNext() {\n    var newSkipped = skipped;\n\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped[\"delete\"](activeStep);\n    }\n\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep + 1;\n    });\n    setSkipped(newSkipped);\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n  };\n\n  var submitData = function submitData() {\n    var dashboard;\n    return _regeneratorRuntime.async(function submitData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(DashboardActions.createDashboard({\n              dashboard: state\n            }));\n\n          case 3:\n            dashboard = _context2.sent;\n            console.log(dashboard);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return __jsx(Card, {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.cardTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Create new dashboard\"), __jsx(\"div\", {\n    className: classes.cardBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, steps.map(function (label, index) {\n    var stepProps = {};\n    var labelProps = {};\n\n    if (isStepOptional(index)) {\n      labelProps.optional = __jsx(Typography, {\n        variant: \"caption\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 39\n        }\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return __jsx(Step, _extends({\n      key: label\n    }, stepProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }), __jsx(StepLabel, _extends({}, labelProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    }), label));\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, activeStep === steps.length ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, \"All steps completed - you're finished\"), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 23\n    }\n  }, \"Reset\"))) : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 19\n    }\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, getStepContent(activeStep)), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 23\n    }\n  }, \"Back\"), activeStep === steps.length - 1 ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: submitData,\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  }, \"Finish\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 29\n    }\n  }, \"Next\")))))));\n};\n\nexport default CreateDashboard;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/dashboards/create-dashboard.jsx"],"names":["useState","useEffect","DatasourceActions","makeStyles","Grid","Card","Stepper","Step","StepLabel","Button","Typography","FormGroup","FormControl","TextField","Select","MenuItem","InputLabel","DashboardActions","useStyles","theme","root","marginTop","cardBody","padding","cardTitle","fontSize","backgroundColor","color","fontFamily","actionButtons","display","justifyContent","getSteps","CreateDashboard","classes","title","description","datasourceId","collaborators","state","setState","activeStep","setActiveStep","datasources","setDatasources","Set","skipped","setSkipped","steps","getDataSources","getDatasources","data","console","log","handleChange","event","target","name","value","getStepContent","step","marginBottom","map","datasource","id","isStepOptional","isStepSkipped","has","handleNext","newSkipped","values","prevActiveStep","handleBack","handleReset","submitData","createDashboard","dashboard","label","index","stepProps","labelProps","optional","completed","length","instructions","button"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AAEA,IAAMC,SAAS,GAAGf,UAAU,CAAC,UAAAgB,KAAK;AAAA,SAAK;AACrCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EAAE;AADP,KAD+B;AAIrCC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE;AADD,KAJ2B;AAOrCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,MADD;AAETC,MAAAA,eAAe,EAAE,SAFR;AAGTH,MAAAA,OAAO,EAAE,iBAHA;AAITI,MAAAA,KAAK,EAAE,MAJE;AAKTC,MAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,OAAxB,EAAiC,YAAjC;AALH,KAP0B;AAcrCC,IAAAA,aAAa,EAAE;AACbC,MAAAA,OAAO,EAAE,MADI;AAEbC,MAAAA,cAAc,EAAE;AAFH;AAdsB,GAAL;AAAA,CAAN,CAA5B;;AAoBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,CAAC,oBAAD,EAAuB,qBAAvB,EAA8C,mBAA9C,EAAmE,cAAnE,CAAN;AAAA,CAAjB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,OAAO,GAAGhB,SAAS,EAAzB;;AAD4B,kBAEFlB,QAAQ,CAAC;AACjCmC,IAAAA,KAAK,EAAE,EAD0B;AAEjCC,IAAAA,WAAW,EAAE,EAFoB;AAGjCC,IAAAA,YAAY,EAAE,EAHmB;AAIjCC,IAAAA,aAAa,EAAE;AAJkB,GAAD,CAFN;AAAA,MAErBC,KAFqB;AAAA,MAEdC,QAFc;;AAAA,mBAQQxC,QAAQ,CAAC,CAAD,CARhB;AAAA,MAQrByC,UARqB;AAAA,MAQTC,aARS;;AAAA,mBASU1C,QAAQ,CAAC,EAAD,CATlB;AAAA,MASrB2C,WATqB;AAAA,MASRC,cATQ;;AAAA,mBAUE5C,QAAQ,CAAC,IAAI6C,GAAJ,EAAD,CAVV;AAAA,MAUrBC,OAVqB;AAAA,MAUZC,UAVY;;AAW5B,MAAMC,KAAK,GAAGhB,QAAQ,EAAtB;AAEA/B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgD,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEA/C,iBAAiB,CAACgD,cAAlB,CAAiC,EAAjC,CAFA;;AAAA;AAEbC,cAAAA,IAFa;AAGnBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAP,cAAAA,cAAc,CAACO,IAAD,CAAd;AAJmB;AAAA;;AAAA;AAAA;AAAA;AAMnBC,cAAAA,OAAO,CAACC,GAAR;;AANmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AASAJ,IAAAA,cAAc;AACf,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,wBACNA,KAAK,CAACC,MADA;AAAA,QACtBC,IADsB,iBACtBA,IADsB;AAAA,QAChBC,KADgB,iBAChBA,KADgB;AAE9BlB,IAAAA,QAAQ,mBAAMD,KAAN,sBAAckB,IAAd,EAAqBC,KAArB,GAAR;AACD,GAHD;;AAKA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC/B,YAAQA,IAAR;AACE,WAAK,CAAL;AACE,eACE,MAAC,SAAD;AAAW,UAAA,GAAG,MAAd;AAAe,UAAA,KAAK,EAAE;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,SAAD;AAAW,UAAA,QAAQ,EAAEP,YAArB;AAAmC,UAAA,SAAS,MAA5C;AAA6C,UAAA,KAAK,EAAC,OAAnD;AAA2D,UAAA,IAAI,EAAC,MAAhE;AAAuE,UAAA,IAAI,EAAC,OAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE,MAAC,SAAD;AAAW,UAAA,QAAQ,EAAEA,YAArB;AAAmC,UAAA,SAAS,MAA5C;AAA6C,UAAA,KAAK,EAAC,aAAnD;AAAiE,UAAA,SAAS,EAAE,IAA5E;AAAkF,UAAA,IAAI,EAAC,MAAvF;AAA8F,UAAA,IAAI,EAAC,aAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;;AAMF,WAAK,CAAL;AACE,eACE,MAAC,SAAD;AAAW,UAAA,GAAG,MAAd;AAAe,UAAA,KAAK,EAAE;AAAEO,YAAAA,YAAY,EAAE;AAAhB,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,UAAD;AAAY,UAAA,EAAE,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE,MAAC,MAAD;AAAQ,UAAA,KAAK,EAAEtB,KAAK,CAACF,YAArB;AAAmC,UAAA,QAAQ,EAAEiB,YAA7C;AAA2D,UAAA,IAAI,EAAC,cAAhE;AAA+E,UAAA,SAAS,MAAxF;AAAyF,UAAA,OAAO,EAAC,kBAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGX,WAAW,CAACmB,GAAZ,CAAgB,UAAAC,UAAU;AAAA,iBACzB,MAAC,QAAD;AAAU,YAAA,KAAK,EAAEA,UAAU,CAACC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiCD,UAAU,CAAC5B,KAA5C,CADyB;AAAA,SAA1B,CADH,CAFF,CADF;;AAUF,WAAK,CAAL;AACE,eAAO,gDAAP;;AACF,WAAK,CAAL;AACE,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAUI,KAAK,CAACJ,KAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAiBI,KAAK,CAACH,WAAvB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAgBG,KAAK,CAACF,YAAtB,CAHF,CADF;;AAOF;AACE,eAAO,cAAP;AA9BJ;AAgCD,GAjCD;;AAmCA,MAAM4B,cAAc,GAAG,SAAjBA,cAAiB,CAAAL,IAAI;AAAA,WAAIA,IAAI,KAAK,CAAb;AAAA,GAA3B;;AACA,MAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAAN,IAAI;AAAA,WAAId,OAAO,CAACqB,GAAR,CAAYP,IAAZ,CAAJ;AAAA,GAA1B;;AACA,MAAMQ,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIC,UAAU,GAAGvB,OAAjB;;AACA,QAAIoB,aAAa,CAACzB,UAAD,CAAjB,EAA+B;AAC7B4B,MAAAA,UAAU,GAAG,IAAIxB,GAAJ,CAAQwB,UAAU,CAACC,MAAX,EAAR,CAAb;AACAD,MAAAA,UAAU,UAAV,CAAkB5B,UAAlB;AACD;;AACDC,IAAAA,aAAa,CAAC,UAAC6B,cAAD;AAAA,aAAoBA,cAAc,GAAG,CAArC;AAAA,KAAD,CAAb;AACAxB,IAAAA,UAAU,CAACsB,UAAD,CAAV;AACD,GARD;;AASA,MAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAE9B,IAAAA,aAAa,CAAC,UAAC6B,cAAD;AAAA,aAAoBA,cAAc,GAAG,CAArC;AAAA,KAAD,CAAb;AAAuD,GAAlF;;AACA,MAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAE/B,IAAAA,aAAa,CAAC,CAAD,CAAb;AAAkB,GAA9C;;AAEA,MAAMgC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAESzD,gBAAgB,CAAC0D,eAAjB,CAAiC;AAAEC,cAAAA,SAAS,EAAErC;AAAb,aAAjC,CAFT;;AAAA;AAETqC,YAAAA,SAFS;AAGfxB,YAAAA,OAAO,CAACC,GAAR,CAAYuB,SAAZ;AAHe;AAAA;;AAAA;AAAA;AAAA;AAKfxB,YAAAA,OAAO,CAACC,GAAR;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AASA,SACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAEnB,OAAO,CAACd,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEc,OAAO,CAACV,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAK,IAAA,SAAS,EAAEU,OAAO,CAACZ,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEY,OAAO,CAACd,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,UAAU,EAAEqB,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,KAAK,CAACc,GAAN,CAAU,UAACe,KAAD,EAAQC,KAAR,EAAkB;AAC3B,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,UAAU,GAAG,EAAnB;;AACA,QAAIf,cAAc,CAACa,KAAD,CAAlB,EAA2B;AACzBE,MAAAA,UAAU,CAACC,QAAX,GAAsB,MAAC,UAAD;AAAY,QAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAtB;AACD;;AACD,QAAIf,aAAa,CAACY,KAAD,CAAjB,EAA0B;AACxBC,MAAAA,SAAS,CAACG,SAAV,GAAsB,KAAtB;AACD;;AACD,WACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEL;AAAX,OAAsBE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,MAAC,SAAD,eAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA4BH,KAA5B,CADF,CADF;AAKD,GAdA,CADH,CADF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIpC,UAAU,KAAKO,KAAK,CAACmC,MAArB,GAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAEjD,OAAO,CAACkD,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADF,EAIE;AAAK,IAAA,SAAS,EAAElD,OAAO,CAACL,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE4C,WAAjB;AAA8B,IAAA,SAAS,EAAEvC,OAAO,CAACmD,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAJF,CAFJ,GAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAEnD,OAAO,CAACkD,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CzB,cAAc,CAAClB,UAAD,CAA5D,CADF,EAEE;AAAK,IAAA,SAAS,EAAEP,OAAO,CAACL,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEY,UAAU,KAAK,CAAjC;AAAoC,IAAA,OAAO,EAAE+B,UAA7C;AAAyD,IAAA,SAAS,EAAEtC,OAAO,CAACmD,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAKI5C,UAAU,KAAKO,KAAK,CAACmC,MAAN,GAAe,CAA9B,GAEI,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAET,UAHX;AAIE,IAAA,SAAS,EAAExC,OAAO,CAACmD,MAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,GAWI,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAEjB,UAHX;AAIE,IAAA,SAAS,EAAElC,OAAO,CAACmD,MAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBR,CAFF,CAfR,CAlBF,CADF,CAFF,CADF;AA0ED,CAnKD;;AAqKA,eAAepD,eAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport DatasourceActions from '../../actions/datasource.actions'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport DashboardActions from '../../actions/dashboard.actions'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '25px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n  },\n  actionButtons: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}))\n\nconst getSteps = () => ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation']\n\nconst CreateDashboard = () => {\n  const classes = useStyles()\n  const [state, setState] = useState({\n    title: '',\n    description: '',\n    datasourceId: '',\n    collaborators: []\n  })\n  const [activeStep, setActiveStep] = useState(0)\n  const [datasources, setDatasources] = useState([])\n  const [skipped, setSkipped] = useState(new Set())\n  const steps = getSteps()\n\n  useEffect(() => {\n    const getDataSources = async () => {\n      try {\n        const data = await DatasourceActions.getDatasources({})\n        console.log(data)\n        setDatasources(data)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getDataSources()\n  }, [])\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    setState({ ...state, [name]: value })\n  }\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return (\n          <FormGroup row style={{ marginBottom: 15 }}>\n            <TextField onChange={handleChange} fullWidth label=\"Title\" type='text' name='title' />\n            <TextField onChange={handleChange} fullWidth label=\"Description\" multiline={true} type='text' name='description' />\n          </FormGroup>\n        );\n      case 1:\n        return (\n          <FormGroup row style={{ marginBottom: 15 }}>\n            <InputLabel id='datasource-label'>Default DataSource</InputLabel>\n            <Select value={state.datasourceId} onChange={handleChange} name='datasourceId' fullWidth labelId='datasource-label'>\n              {datasources.map(datasource => (\n                <MenuItem value={datasource.id}>{datasource.title}</MenuItem>\n              ))}\n            </Select>\n          </FormGroup>\n        );\n      case 2:\n        return 'Allow people to help you build your dashboard!';\n      case 3:\n        return (\n          <div>\n            <p>Name: {state.title}</p>\n            <p>Description: {state.description}</p>\n            <p>Datasource: {state.datasourceId}</p>\n          </div>\n        );\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  const isStepOptional = step => step === 2\n  const isStepSkipped = step => skipped.has(step)\n  const handleNext = () => {\n    let newSkipped = skipped\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values())\n      newSkipped.delete(activeStep)\n    }\n    setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    setSkipped(newSkipped)\n  }\n  const handleBack = () => { setActiveStep((prevActiveStep) => prevActiveStep - 1) }\n  const handleReset = () => { setActiveStep(0) }\n\n  const submitData = async () => {\n    try {\n      const dashboard = await DashboardActions.createDashboard({ dashboard: state })\n      console.log(dashboard)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.cardTitle}>Create new dashboard</div>\n      <div className={classes.cardBody}>\n        <div className={classes.root}>\n          <Stepper activeStep={activeStep}>\n            {steps.map((label, index) => {\n              const stepProps = {};\n              const labelProps = {};\n              if (isStepOptional(index)) {\n                labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n              }\n              if (isStepSkipped(index)) {\n                stepProps.completed = false;\n              }\n              return (\n                <Step key={label} {...stepProps}>\n                  <StepLabel {...labelProps}>{label}</StepLabel>\n                </Step>\n              );\n            })}\n          </Stepper>\n          <div>\n            {\n              activeStep === steps.length ?\n                (\n                  <div>\n                    <Typography className={classes.instructions}>\n                      All steps completed - you&apos;re finished\n                    </Typography>\n                    <div className={classes.actionButtons}>\n                      <Button onClick={handleReset} className={classes.button}>\n                        Reset\n                     </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                    <div className={classes.actionButtons}>\n                      <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                        Back\n                      </Button>\n                      {\n                        activeStep === steps.length - 1 ?\n                          (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={submitData}\n                              className={classes.button}\n                            >\n                              Finish\n                            </Button>\n                          ) : (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              onClick={handleNext}\n                              className={classes.button}\n                            >\n                              Next\n                            </Button>\n                          )\n                      }\n                    </div>\n                  </div>\n                )\n            }\n          </div>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default CreateDashboard"]},"metadata":{},"sourceType":"module"}