{"ast":null,"code":"const conditionCases = [{\n  title: 'equals',\n  friendlyName: 'Equals'\n}, {\n  title: 'does_not_equal',\n  friendlyName: 'Does Not Equal'\n}, {\n  title: 'is_less_than',\n  friendlyName: 'Is Less Than'\n}, {\n  title: 'is_greater_than',\n  friendlyName: 'Is Greater Than'\n}, {\n  title: 'is_between',\n  friendlyName: 'Is Between'\n}, {\n  title: 'is_not_between',\n  friendlyName: 'Is Not Between'\n}];\n\nconst measureConditionResult = (measureCondition, value) => {\n  const {\n    expression,\n    minValue,\n    maxValue\n  } = measureCondition;\n\n  switch (expression) {\n    case 'equals':\n      return value == minValue ? true : false;\n\n    case 'does_not_equal':\n      return value != minValue ? true : false;\n\n    case 'is_less_than':\n      return value < minValue ? true : false;\n\n    case 'is_greater_than':\n      return value > minValue ? true : false;\n\n    case 'is_between':\n      return value > minValue && value < maxValue ? true : false;\n\n    case 'is_not_between':\n      return value < minValue || value > maxValue ? true : false;\n\n    default:\n      return false;\n  }\n};\n\nexport { measureConditionResult, conditionCases };","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/helpers/measure-conditions.js"],"names":["conditionCases","title","friendlyName","measureConditionResult","measureCondition","value","expression","minValue","maxValue"],"mappings":"AAAA,MAAMA,cAAc,GAAG,CACrB;AAAEC,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,YAAY,EAAE;AAAjC,CADqB,EAErB;AAAED,EAAAA,KAAK,EAAE,gBAAT;AAA2BC,EAAAA,YAAY,EAAE;AAAzC,CAFqB,EAGrB;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,YAAY,EAAE;AAAvC,CAHqB,EAIrB;AAAED,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,YAAY,EAAE;AAA1C,CAJqB,EAKrB;AAAED,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,YAAY,EAAE;AAArC,CALqB,EAMrB;AAAED,EAAAA,KAAK,EAAE,gBAAT;AAA2BC,EAAAA,YAAY,EAAE;AAAzC,CANqB,CAAvB;;AASA,MAAMC,sBAAsB,GAAG,CAACC,gBAAD,EAAmBC,KAAnB,KAA6B;AAC1D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAqCJ,gBAA3C;;AACA,UAAQE,UAAR;AACE,SAAK,QAAL;AACE,aAAOD,KAAK,IAAIE,QAAT,GAAoB,IAApB,GAA2B,KAAlC;;AACF,SAAK,gBAAL;AACE,aAAOF,KAAK,IAAIE,QAAT,GAAoB,IAApB,GAA2B,KAAlC;;AACF,SAAK,cAAL;AACE,aAAOF,KAAK,GAAGE,QAAR,GAAmB,IAAnB,GAA0B,KAAjC;;AACF,SAAK,iBAAL;AACE,aAAOF,KAAK,GAAGE,QAAR,GAAmB,IAAnB,GAA0B,KAAjC;;AACF,SAAK,YAAL;AACE,aAAOF,KAAK,GAAGE,QAAR,IAAoBF,KAAK,GAAGG,QAA5B,GAAuC,IAAvC,GAA8C,KAArD;;AACF,SAAK,gBAAL;AACE,aAAOH,KAAK,GAAGE,QAAR,IAAoBF,KAAK,GAAGG,QAA5B,GAAuC,IAAvC,GAA8C,KAArD;;AACF;AACE,aAAO,KAAP;AAdJ;AAgBD,CAlBD;;AAoBA,SACEL,sBADF,EAEEH,cAFF","sourcesContent":["const conditionCases = [\n  { title: 'equals', friendlyName: 'Equals' },\n  { title: 'does_not_equal', friendlyName: 'Does Not Equal' },\n  { title: 'is_less_than', friendlyName: 'Is Less Than' },\n  { title: 'is_greater_than', friendlyName: 'Is Greater Than' },\n  { title: 'is_between', friendlyName: 'Is Between' },\n  { title: 'is_not_between', friendlyName: 'Is Not Between' }\n]\n\nconst measureConditionResult = (measureCondition, value) => {\n  const { expression, minValue, maxValue } = measureCondition\n  switch (expression) {\n    case 'equals':\n      return value == minValue ? true : false\n    case 'does_not_equal':\n      return value != minValue ? true : false\n    case 'is_less_than':\n      return value < minValue ? true : false\n    case 'is_greater_than':\n      return value > minValue ? true : false\n    case 'is_between':\n      return value > minValue && value < maxValue ? true : false\n    case 'is_not_between':\n      return value < minValue || value > maxValue ? true : false\n    default:\n      return false\n  }\n}\n\nexport {\n  measureConditionResult,\n  conditionCases\n}"]},"metadata":{},"sourceType":"module"}