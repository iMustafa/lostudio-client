{"ast":null,"code":"import axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nconst {\n  API_URL\n} = config().publicRuntimeConfig;\nexport default class WidgetSettingsActions {\n  // TODO\n  static async createWidgetSettings(widgetSettings) {\n    return axios.post(`${API_URL}/WidgetSettings`, widgetSettings, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getWidgetSettings() {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getWidgetSettingsById(id, Authorization) {\n    return axios.get(`${API_URL}/WidgetSettings/${id}`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async updateWidgetSettings(id, widgetSettings) {\n    return axios.patch(`${API_URL}/WidgetSettings/${id}`, widgetSettings, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async deleteWidgetSettings(id) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  }\n\n  static async executeWidgetQuery(id, Authorization) {\n    return axios.get(`${API_URL}/WidgetSettings/${id}/execute-query`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n}","map":{"version":3,"sources":["F:/Projects/LoStudio/client/actions/widgetSettings.actions.ts"],"names":["axios","config","Cookie","API_URL","publicRuntimeConfig","WidgetSettingsActions","createWidgetSettings","widgetSettings","post","headers","Authorization","get","then","res","data","catch","err","response","getWidgetSettings","getWidgetSettingsById","id","updateWidgetSettings","patch","deleteWidgetSettings","executeWidgetQuery"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAQA,MAAM;AAAEC,EAAAA;AAAF,IAAcF,MAAM,GAAGG,mBAA7B;AAEA,eAAe,MAAMC,qBAAN,CAA4B;AAEzC;AACA,eAAoBC,oBAApB,CAAyCC,cAAzC,EAAkG;AAChG,WAAOP,KAAK,CACTQ,IADI,CACE,GAAEL,OAAQ,iBADZ,EAC8BI,cAD9B,EAC8C;AAAEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAER,MAAM,CAACS,GAAP,CAAW,IAAX;AAAjB;AAAX,KAD9C,EAEJC,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,EAGJC,KAHI,CAGEC,GAAG,IAAIA,GAAG,CAACC,QAHb,CAAP;AAID,GARwC,CAUzC;;;AACA,eAAoBC,iBAApB,GAAwE;AACtE,WAAOlB,KAAK,CACTQ,IADI,CACC,EADD,EACK,EADL,EAEJI,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,EAGJC,KAHI,CAGEC,GAAG,IAAIA,GAAG,CAACC,QAHb,CAAP;AAID,GAhBwC,CAkBzC;;;AACA,eAAoBE,qBAApB,CAA0CC,EAA1C,EAAsDV,aAAtD,EAAuG;AACrG,WAAOV,KAAK,CACTW,GADI,CACC,GAAER,OAAQ,mBAAkBiB,EAAG,EADhC,EACmC;AAAEX,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEA,aAAa,IAAIR,MAAM,CAACS,GAAP,CAAW,IAAX;AAAlC;AAAX,KADnC,EAEJC,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,EAGJC,KAHI,CAGEC,GAAG,IAAIA,GAAG,CAACC,QAHb,CAAP;AAID,GAxBwC,CA0BzC;;;AACA,eAAoBI,oBAApB,CAAyCD,EAAzC,EAAqDb,cAArD,EAA8G;AAC5G,WAAOP,KAAK,CACTsB,KADI,CACG,GAAEnB,OAAQ,mBAAkBiB,EAAG,EADlC,EACqCb,cADrC,EACqD;AAAEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAER,MAAM,CAACS,GAAP,CAAW,IAAX;AAAjB;AAAX,KADrD,EAEJC,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,EAGJC,KAHI,CAGEC,GAAG,IAAIA,GAAG,CAACC,QAHb,CAAP;AAID,GAhCwC,CAkCzC;;;AACA,eAAoBM,oBAApB,CAAyCH,EAAzC,EAA8E;AAC5E,WAAOpB,KAAK,CACTQ,IADI,CACC,EADD,EACK,EADL,EAEJI,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,EAGJC,KAHI,CAGEC,GAAG,IAAIA,GAAG,CAACC,QAHb,CAAP;AAID;;AAED,eAAoBO,kBAApB,CAAuCJ,EAAvC,EAAmDV,aAAnD,EAAwF;AACtF,WAAOV,KAAK,CACTW,GADI,CACC,GAAER,OAAQ,mBAAkBiB,EAAG,gBADhC,EACiD;AAAEX,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEA,aAAa,IAAIR,MAAM,CAACS,GAAP,CAAW,IAAX;AAAlC;AAAX,KADjD,EAEJC,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,EAGJC,KAHI,CAGEC,GAAG,IAAIA,GAAG,CAACC,QAHb,CAAP;AAID;;AA/CwC","sourcesContent":["import axios from 'axios'\r\nimport config from 'next/config'\r\nimport Cookie from 'js-cookie'\r\nimport User from '../types/users.types'\r\nimport Dashboard from '../types/dashboard.types'\r\nimport Datasource from '../types/datasource.types'\r\nimport Widget from '../types/widget.types'\r\nimport WidgetSettings from '../types/widgetSettings.type'\r\nimport { promises } from 'dns'\r\n\r\nconst { API_URL } = config().publicRuntimeConfig\r\n\r\nexport default class WidgetSettingsActions {\r\n\r\n  // TODO\r\n  public static async createWidgetSettings(widgetSettings: WidgetSettings): Promise<WidgetSettings> {\r\n    return axios\r\n      .post(`${API_URL}/WidgetSettings`, widgetSettings, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async getWidgetSettings(): Promise<Array<WidgetSettings>> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async getWidgetSettingsById(id: string, Authorization?: string): Promise<WidgetSettings> {\r\n    return axios\r\n      .get(`${API_URL}/WidgetSettings/${id}`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async updateWidgetSettings(id: string, widgetSettings: WidgetSettings): Promise<WidgetSettings> {\r\n    return axios\r\n      .patch(`${API_URL}/WidgetSettings/${id}`, widgetSettings, { headers: { Authorization: Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async deleteWidgetSettings(id: string): Promise<WidgetSettings> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async executeWidgetQuery(id: string, Authorization: string): Promise<any> {\r\n    return axios\r\n      .get(`${API_URL}/WidgetSettings/${id}/execute-query`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}