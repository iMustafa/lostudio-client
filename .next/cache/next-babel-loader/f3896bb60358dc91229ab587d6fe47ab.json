{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Select from '@material-ui/core/Select';\nimport DataSourceActions from '../../../../actions/datasource.actions';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport Swal from 'sweetalert2';\nimport { Typography } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    list: {\n      width: 500,\n      paddingLeft: \"15px\",\n      paddingRight: \"15px\",\n      paddingTop: \"15px\"\n    },\n    h2: {\n      width: '100%',\n      textAlign: 'center',\n      borderBottom: '1px solid #000',\n      lineHeight: '0.1em',\n      marginTop: \"20px\",\n      marginBottom: \"20px\",\n      fontFamily: 'Roboto',\n      fontSize: '13px',\n      color: \"#3F51B5\"\n    },\n    span: {\n      background: '#fff',\n      padding: '0 10px'\n    },\n    formControl: {\n      marginTop: \"15px\"\n    }\n  };\n});\n\nvar AutoCompleteWidgetSettings = function AutoCompleteWidgetSettings(_ref) {\n  var widget = _ref.widget,\n      handleSettingsClose = _ref.handleSettingsClose,\n      isAdding = _ref.isAdding,\n      onWidgetAdd = _ref.onWidgetAdd;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      linkToFormGroup = _useState[0],\n      setLinkToFormGroup = _useState[1];\n\n  var _useState2 = useState([]),\n      formGroups = _useState2[0],\n      setFormGroups = _useState2[1];\n\n  var _useState3 = useState(null),\n      selectedFormGroup = _useState3[0],\n      setSelectedFormGroup = _useState3[1];\n\n  var _useState4 = useState('datasource'),\n      selectionOption = _useState4[0],\n      setSelectionOption = _useState4[1];\n\n  var _useState5 = useState({\n    label: '',\n    id: '',\n    name: '',\n    placeholder: '',\n    className: '',\n    value: ''\n  }),\n      properties = _useState5[0],\n      setProperties = _useState5[1];\n\n  var _useState6 = useState([]),\n      datasources = _useState6[0],\n      setDatasources = _useState6[1];\n\n  var _useState7 = useState(!isAdding ? widget.dataSourceId : ''),\n      datasource = _useState7[0],\n      setDatasource = _useState7[1];\n\n  var _useState8 = useState([]),\n      docList = _useState8[0],\n      setDocList = _useState8[1];\n\n  var _useState9 = useState(!isAdding ? widget.config.docId : ''),\n      doc = _useState9[0],\n      setDoc = _useState9[1];\n\n  var _useState10 = useState([]),\n      fieldList = _useState10[0],\n      setFieldList = _useState10[1];\n\n  var _useState11 = useState(!isAdding ? widget.config.fields : ''),\n      fields = _useState11[0],\n      setFields = _useState11[1];\n\n  useEffect(function () {\n    var getFormGroups = function getFormGroups() {\n      var $formGroups;\n      return _regeneratorRuntime.async(function getFormGroups$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(WidgetSettingsActions.getFormGroupWidgets());\n\n            case 3:\n              $formGroups = _context.sent;\n              setFormGroups($formGroups);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    getFormGroups();\n  }, []);\n\n  var handleSelectFormGroup = function handleSelectFormGroup(event) {\n    var value = event.target.value;\n    setSelectedFormGroup(value);\n  };\n\n  var handleLinkToFormGroup = function handleLinkToFormGroup(event) {\n    var checked = event.target.checked;\n    if (!checked) setSelectedFormGroup(null);\n    setLinkToFormGroup(checked);\n  };\n\n  var renderFormGroupSelection = function renderFormGroupSelection(_) {\n    return linkToFormGroup ? __jsx(FormControl, {\n      fullWidth: true\n    }, __jsx(InputLabel, {\n      id: \"form-group-title\"\n    }, \"Form Group\"), __jsx(Select, {\n      fullWidth: true,\n      labelId: \"form-group-title\",\n      value: selectedFormGroup,\n      onChange: handleSelectFormGroup\n    }, formGroups.map(function (formGroup) {\n      return __jsx(MenuItem, {\n        value: formGroup.id\n      }, formGroup.properties.name);\n    }))) : __jsx(\"div\", null);\n  };\n\n  var getDatasources = function getDatasources() {\n    var $datasources, $docList, $fieldList;\n    return _regeneratorRuntime.async(function getDatasources$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(DataSourceActions.getDatasources({}));\n\n          case 3:\n            $datasources = _context2.sent;\n\n            if (isAdding) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(DataSourceActions.getDocList(datasource));\n\n          case 7:\n            $docList = _context2.sent;\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(DataSourceActions.getFieldList(datasource, doc));\n\n          case 10:\n            $fieldList = _context2.sent;\n            setDocList($docList);\n            setFieldList($fieldList);\n\n          case 13:\n            setDatasources($datasources);\n            return _context2.abrupt(\"return\", $datasources);\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  var getDocList = function getDocList(id) {\n    var $docList;\n    return _regeneratorRuntime.async(function getDocList$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            setDatasource(id);\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(DataSourceActions.getDocList(id));\n\n          case 4:\n            $docList = _context3.sent;\n            setDocList($docList);\n            return _context3.abrupt(\"return\", $docList);\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var getFieldList = function getFieldList(id, docId) {\n    var $fieldList;\n    return _regeneratorRuntime.async(function getFieldList$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            setDoc(docId);\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(DataSourceActions.getFieldList(id, docId));\n\n          case 4:\n            $fieldList = _context4.sent;\n            setFieldList($fieldList);\n            return _context4.abrupt(\"return\", $fieldList);\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var handleDatasourceChange = function handleDatasourceChange(event) {\n    var _event$target, name, value;\n\n    return _regeneratorRuntime.async(function handleDatasourceChange$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _event$target = event.target, name = _event$target.name, value = _event$target.value;\n            setFieldList([]);\n            setFields([]);\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(getDocList(value));\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleDocChange = function handleDocChange(event) {\n    var _event$target2, name, value;\n\n    return _regeneratorRuntime.async(function handleDocChange$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _event$target2 = event.target, name = _event$target2.name, value = _event$target2.value;\n            setFieldList([]);\n            setFields([]);\n            _context6.next = 5;\n            return _regeneratorRuntime.awrap(getFieldList(datasource, value));\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleFieldChange = function handleFieldChange(event) {\n    var value = event.target.value;\n    setFields(value);\n  };\n\n  var handlePropertiesChange = function handlePropertiesChange(event) {\n    var _event$target3 = event.target,\n        name = _event$target3.name,\n        value = _event$target3.value;\n    setProperties(_objectSpread({}, properties, _defineProperty({}, name, value)));\n  };\n\n  useEffect(function () {\n    getDatasources();\n  }, []);\n\n  var handleSourceChange = function handleSourceChange(event) {\n    var value = event.target.value;\n    setSelectionOption(value);\n  };\n\n  var saveConfigData = function saveConfigData() {\n    var data, update;\n    return _regeneratorRuntime.async(function saveConfigData$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            data = {\n              dataSourceId: datasource,\n              config: {\n                docId: doc,\n                fields: [fields],\n                type: selectionOption == 'datasource' ? 'simple' : 'constant',\n                func: 'find',\n                query: {},\n                values: selectionOption == 'datasource' ? [] : []\n              },\n              properties: properties,\n              type: 'Auto Complete'\n            };\n\n            if (!isAdding) {\n              _context7.next = 6;\n              break;\n            }\n\n            onWidgetAdd(data, true, selectedFormGroup);\n            _context7.next = 10;\n            break;\n\n          case 6:\n            _context7.next = 8;\n            return _regeneratorRuntime.awrap(WidgetSettingsActions.updateWidgetSettings(widget.id, data));\n\n          case 8:\n            update = _context7.sent;\n            handleSettingsClose(update);\n\n          case 10:\n            _context7.next = 15;\n            break;\n\n          case 12:\n            _context7.prev = 12;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.log(_context7.t0);\n\n          case 15:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  var renderFieldSettings = function renderFieldSettings() {\n    return fieldList.length ? __jsx(\"div\", null, __jsx(\"h2\", {\n      className: classes.h2\n    }, __jsx(\"span\", {\n      className: classes.span\n    }, \"Fields Settings\")), __jsx(RadioGroup, {\n      onChange: handleFieldChange\n    }, fieldList.map(function (field) {\n      return __jsx(FormControlLabel, {\n        key: field,\n        control: __jsx(Radio, {\n          value: field\n        }),\n        label: field\n      });\n    })), __jsx(Typography, {\n      style: {\n        fontSize: 12,\n        color: '#F00',\n        marginTop: 10\n      }\n    }, \"* You can only select one field in an autocomplete textfield.\")) : __jsx(\"div\", null);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Info\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Title\"), __jsx(Input, null)), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Widget Properties\")), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Label\"), __jsx(Input, {\n    name: \"label\",\n    onChange: handlePropertiesChange,\n    value: properties.label\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"ID\"), __jsx(Input, {\n    name: \"id\",\n    onChange: handlePropertiesChange,\n    value: properties.id\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Name\"), __jsx(Input, {\n    name: \"name\",\n    onChange: handlePropertiesChange,\n    value: properties.name\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Placeholder\"), __jsx(Input, {\n    name: \"placeholder\",\n    onChange: handlePropertiesChange,\n    value: properties.placeholder\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, null, \"Class name\"), __jsx(Input, {\n    name: \"className\",\n    onChange: handlePropertiesChange,\n    value: properties.className\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: linkToFormGroup,\n      onChange: handleLinkToFormGroup\n    }),\n    label: \"Link To Form Group?\"\n  })), renderFormGroupSelection(), __jsx(\"h2\", {\n    className: classes.h2\n  }, __jsx(\"span\", {\n    className: classes.span\n  }, \"Unique Properties\")), __jsx(FormGroup, {\n    row: true\n  }, __jsx(RadioGroup, {\n    onChange: handleSourceChange,\n    value: selectionOption,\n    style: {\n      justifyContent: 'space-evenly',\n      width: '100%',\n      flexDirection: 'row'\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"datasource\",\n    control: __jsx(Radio, null),\n    label: \"From Data Source\"\n  }), __jsx(FormControlLabel, {\n    value: \"fixed\",\n    control: __jsx(Radio, null),\n    label: \"Fixed Values\"\n  }))), selectionOption == 'datasource' ? __jsx(\"div\", null, __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"data-source\"\n  }, \"Data Source\"), __jsx(Select, {\n    name: \"datasource\",\n    labelId: \"data-source\",\n    value: datasource,\n    onChange: handleDatasourceChange\n  }, datasources.map(function (item) {\n    return __jsx(MenuItem, {\n      key: item.id,\n      value: item.id\n    }, item.title);\n  }))), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.formControl,\n    disabled: datasource ? false : true\n  }, __jsx(InputLabel, {\n    id: \"doc-list\"\n  }, \"Table/Collection\"), __jsx(Select, {\n    name: \"docList\",\n    labelId: \"doc-list\",\n    value: doc,\n    onChange: handleDocChange\n  }, docList.map(function (item) {\n    return __jsx(MenuItem, {\n      key: item,\n      value: item\n    }, item);\n  }))), renderFieldSettings()) : __jsx(\"div\", null), __jsx(Button, {\n    onClick: saveConfigData,\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.formControl,\n    style: {\n      marginBottom: 10\n    }\n  }, \"Save\"));\n};\n\nexport default AutoCompleteWidgetSettings;","map":null,"metadata":{},"sourceType":"module"}