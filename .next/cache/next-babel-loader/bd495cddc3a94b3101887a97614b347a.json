{"ast":null,"code":"import axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nconst {\n  API_URL\n} = config().publicRuntimeConfig;\nexport default class WidgetSettingsActions {\n  static async addWidgetSettingsDocument(widgetSettingsId, data) {\n    return axios.post(`${API_URL}/WidgetSettings/${widgetSettingsId}/add-document`, data, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async editWidgetSettingsDocument(widgetSettingsId, data, keyId) {\n    return axios.post(`${API_URL}/WidgetSettings/${widgetSettingsId}/edit-document`, data, {\n      headers: {\n        Authorization: Cookie.get('id')\n      },\n      params: {\n        keyId\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async deleteWidgetSettingsDocument(widgetSettingsId, keyId) {\n    return axios.delete(`${API_URL}/WidgetSettings/${widgetSettingsId}/delete-document`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      },\n      params: {\n        keyId\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async createWidgetSettings(widgetSettings) {\n    return axios.post(`${API_URL}/WidgetSettings`, widgetSettings, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async getSubWidgets(widgetSettingsId) {\n    return axios.get(`${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      },\n      params: {\n        filter: {\n          include: 'subWidgetSettings'\n        }\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async exportWidgetData(widgetSettingsId, format, method, selectedFields) {\n    if (format == 'email') {\n      return axios.get(`${API_URL}/WidgetSettings/${widgetSettingsId}/export-data`, {\n        headers: {\n          Authorization: Cookie.get('id')\n        },\n        params: {\n          format,\n          selectedFields,\n          method\n        }\n      }).then(res => res.data).catch(err => err.response);\n    } else {\n      window.open(`${API_URL}/WidgetSettings/${widgetSettingsId}/export-data?format=${format}&method=${method}&selectedFields=${selectedFields}`);\n    }\n  }\n\n  static async createSubWidget(widgetSettingsId, subWidgetSettingsId) {\n    return axios.post(`${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings`, {\n      subWidgetSettingsId\n    }, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async getWidgetSettingsMeasureConditions(widgetSettingsId) {\n    return axios.get(`${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async createWidgetSettingsMeasureConditions(widgetSettingsId, measureCondition) {\n    return axios.post(`${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions`, measureCondition, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async deleteWidgetSettingsMeasureConditions(widgetSettingsId, measureConditionId) {\n    return axios.delete(`${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions/${measureConditionId}`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async deleteSubWidget(widgetSettingsId, subWidgetSettingsId) {\n    return axios.delete(`${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings/${subWidgetSettingsId}`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n  static async getFormGroupWidgets() {\n    return axios.get(`${API_URL}/WidgetSettings`, {\n      headers: {\n        Authorization: Cookie.get('id')\n      },\n      params: {\n        filter: {\n          where: {\n            type: \"Form Group\"\n          }\n        }\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getWidgetSettings() {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async getWidgetSettingsById(id, Authorization) {\n    return axios.get(`${API_URL}/WidgetSettings/${id}`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async updateWidgetSettings(id, widgetSettings) {\n    return axios.patch(`${API_URL}/WidgetSettings/${id}`, widgetSettings, {\n      headers: {\n        Authorization: Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  } // TODO\n\n\n  static async deleteWidgetSettings(id) {\n    return axios.post('', {}).then(res => res.data).catch(err => err.response);\n  }\n\n  static async executeWidgetQuery(id, Authorization) {\n    return axios.get(`${API_URL}/WidgetSettings/${id}/execute-query`, {\n      headers: {\n        Authorization: Authorization || Cookie.get('id')\n      }\n    }).then(res => res.data).catch(err => err.response);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}