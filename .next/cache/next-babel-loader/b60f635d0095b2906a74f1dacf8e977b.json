{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Chart, PieSeries, Title } from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Drawer from '@material-ui/core/Drawer';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nimport DonutChartWidgetSettings from './donut-chart-widget-settings';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\"\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst DonutChartWidget = ({\n  widgetId\n}) => {\n  const classes = useStyles();\n  const {\n    0: widget,\n    1: setWidget\n  } = useState(null);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: isLoadingData,\n    1: setIsLoadingData\n  } = useState(false);\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(0);\n  const {\n    0: menuState,\n    1: setMenuState\n  } = useState({\n    right: false\n  });\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId);\n      console.log($data, $data);\n      setData($data);\n      return $data;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId);\n      console.log('$widget', $widget);\n      setWidget($widget);\n      return $widget;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getWidget();\n    getWidgetData();\n  }, [refresh]);\n\n  const refreshData = async () => {\n    setIsLoadingData(true);\n    getWidget();\n    getWidgetData();\n    setIsLoadingData(false);\n  };\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1);\n    toggleDrawer('right', false);\n  };\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n    setMenuState(_objectSpread({}, menuState, {\n      [side]: open\n    }));\n  };\n\n  const renderChart = () => {\n    return isLoadingData || !widget ? __jsx(CircularProgress, null) : __jsx(Paper, null, __jsx(Chart, {\n      data: data\n    }, __jsx(PieSeries, {\n      valueField: \"total\",\n      argumentField: \"month\",\n      innerRadius: 0.6\n    }), __jsx(Title, {\n      text: \"The Population of Continents and Regions\"\n    }), __jsx(Animation, null)));\n  };\n\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.widgetActions\n  }, __jsx(\"div\", {\n    className: classes.widgetTitle\n  }, __jsx(Typography, {\n    style: {\n      color: \"#FFF\"\n    }\n  }, \"Widget Title\")), __jsx(\"div\", {\n    className: classes.actionButtons\n  }, __jsx(IconButton, {\n    onClick: toggleDrawer('right', true)\n  }, __jsx(SettingsIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })), __jsx(IconButton, {\n    onClick: refreshData\n  }, __jsx(RefreshIcon, {\n    style: {\n      color: \"#FFF\"\n    },\n    fontSize: \"small\"\n  })))), __jsx(\"div\", null, renderChart()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false)\n  }, __jsx(DonutChartWidgetSettings, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose\n  })));\n};\n\nexport default DonutChartWidget;","map":null,"metadata":{},"sourceType":"module"}