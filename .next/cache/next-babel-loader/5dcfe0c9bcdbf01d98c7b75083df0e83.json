{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/components/grapes/table-widgets/html-table-widget/components.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TableRef } from \"./consts\";\nimport Material from \"./Material\";\nimport DashboardActions from \"../../../../actions/dashboard.actions\";\nimport DatasourceActions from \"../../../../actions/datasource.actions\";\nimport WidgetSettingsActions from \"../../../../actions/widgetSettings.actions\";\nexport default function (editor, opt = {}) {\n  console.log(opt);\n  let d = [[{\n    Name: \"Henery\",\n    Location: \"Usa\",\n    id: \"5c24dc26dc10670017e40921\",\n    \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n    notes: \"\"\n  }]];\n  let updateTrait = [];\n  const domc = editor.DomComponents;\n  const defaultType = domc.getType(\"default\");\n  const defaultModel = defaultType.model;\n  const defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    let newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(TableRef, {\n    model: defaultModel.extend({\n      defaults: _objectSpread({}, defaultModel.prototype.defaults, {\n        droppable: true,\n        defaultData: [[{\n          Name: \"Henery\",\n          Location: \"Usa\",\n          id: \"5c24dc26dc10670017e40921\",\n          \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n          notes: \"\"\n        }]],\n        prevData: [],\n        dbId: [],\n        keys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n        traits: [{\n          name: \"modify\",\n          type: \"button\",\n          text: `Modify`,\n          full: true,\n          command: async editor => {\n            try {\n              const datasources = await DatasourceActions.getDatasources({});\n              let component = editor.getSelected();\n              component.addTrait({\n                name: \"dataSource\",\n                type: \"select\",\n                changeProp: 1,\n                options: datasources.map(op => {\n                  return {\n                    id: op.id,\n                    name: op.title\n                  };\n                })\n              });\n              component.removeTrait(\"modify\");\n            } catch (e) {\n              console.log(e);\n            }\n          }\n        }],\n        toHTML: function () {\n          return \"\";\n        }\n      }),\n\n      init() {\n        this.listenTo(this, this.handlePropChange);\n\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait(\"modify\").set(\"text\", \"Edit\");\n          this.addTrait({\n            name: \"Prev\",\n            type: \"pre\",\n            text: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].dataSourceId === \"5ec035f7bb377b08ebc8938a\" ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId}</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.docId}</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields.toString().replace(/,/g, \" | \")}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${this.attributes.prevData[0].config.primaryKey}</span><br/>\n\t\t\t\t\t`\n          }, {\n            at: 0\n          });\n        }\n\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = \"\";\n          this.attributes.Table = \"\";\n          this.attributes.collections = \"\";\n        } else {\n          return null;\n        }\n      }\n\n    }),\n    view: defaultView.extend({\n      init() {\n        this.listenTo(this.model, `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`, this.handleChanges);\n      },\n\n      async handleChanges() {\n        try {\n          if (this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\")) {\n            const docList = await DatasourceActions.getDocList(this.model.attributes.dataSource);\n            const component = editor.getSelected();\n            component.addTrait({\n              name: \"Table\",\n              type: \"select\",\n              options: docList.map(t => {\n                return {\n                  id: t,\n                  name: t\n                };\n              }),\n              changeProp: 1\n            });\n          }\n\n          if (this.model.attributes.Table) {\n            const fieldList = await DatasourceActions.getFieldList(this.model.attributes.dataSource, this.model.attributes.Table);\n            const component = editor.getSelected();\n\n            if (updateTrait.length > 1) {\n              this.model.get(\"traits\").each(function (trait) {\n                component.removeTrait(updateTrait.map(t => t.toString()));\n                component.removeTrait(\"collections\");\n                component.removeTrait(\"console\");\n              });\n            }\n\n            fieldList.map(t => {\n              let res = [{\n                label: t,\n                name: t,\n                type: \"checkbox\",\n                changeProp: 1\n              }];\n              updateTrait.push(t);\n              component.addTrait(res);\n            });\n            component.addTrait({\n              label: \"Primary key\",\n              name: \"collections\",\n              type: \"select\",\n              options: fieldList.map(t => t),\n              changeProp: 1\n            }, {\n              at: 40\n            });\n            component.addTrait({\n              type: \"button\",\n              name: \"console\",\n              changeProp: 1,\n              label: \"log button\",\n              text: \"Click me\",\n              full: true,\n              command: async editor => {\n                try {\n                  const selected = editor.getSelected();\n                  let postData = {};\n                  let postDataArray = [];\n                  selected.attributes.traits.models.forEach(element => {\n                    postData[element.attributes.name] = element.attributes.value;\n                  });\n                  postDataArray.push(postData);\n                  let arr = null;\n                  this.model.attributes.keys = [];\n                  arr = postDataArray.map(js => {\n                    this.model.attributes.keys.push(displayOptions(js));\n                    return {\n                      dataSourceId: js.dataSource,\n                      config: {\n                        fields: displayOptions(js),\n                        primaryKey: js.collections,\n                        docId: js.Table,\n                        type: \"simple\",\n                        func: \"find\",\n                        query: {}\n                      },\n                      type: \"Table\"\n                    };\n                  })[0];\n                  const widget = await DashboardActions.createWidgetInDashboard(\"5efdea1c72c7e92ca5cc362f\", arr);\n                  let customId = widget.id;\n                  this.model.attributes.prevData = [];\n                  this.model.attributes.prevData.push(widget);\n\n                  if (this.model.attributes.prevData.length >= 1) {\n                    component.removeTrait(\"Prev\");\n                  }\n\n                  const queryResult = await WidgetSettingsActions.executeWidgetQuery(customId);\n\n                  if (this.model.attributes.defaultData.length < 1) {\n                    this.model.attributes.defaultData.push(queryResult);\n                  } else {\n                    this.model.attributes.defaultData = [];\n                    this.model.attributes.defaultData.push(queryResult);\n                  }\n\n                  ReactDOM.unmountComponentAtNode(this.el);\n                  this.render();\n                } catch (e) {\n                  console.log(\">> Error:\", e);\n                }\n              }\n            });\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      },\n\n      onRender({\n        el\n      }) {\n        const comps = this.model.get(\"components\");\n        comps.reset();\n        ReactDOM.render(__jsx(React.Fragment, null, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }\n        }, __jsx(Material, {\n          keys: this.model.attributes.keys,\n          data: this.model.attributes.defaultData[0],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }\n        }))), el);\n      }\n\n    })\n  });\n}","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/components/grapes/table-widgets/html-table-widget/components.jsx"],"names":["React","ReactDOM","TableRef","Material","DashboardActions","DatasourceActions","WidgetSettingsActions","editor","opt","console","log","d","Name","Location","id","notes","updateTrait","domc","DomComponents","defaultType","getType","defaultModel","model","defaultView","view","displayOptions","displayDevice","newObj","key","push","addType","extend","defaults","prototype","droppable","defaultData","prevData","dbId","keys","traits","name","type","text","full","command","datasources","getDatasources","component","getSelected","addTrait","changeProp","options","map","op","title","removeTrait","e","toHTML","init","listenTo","handlePropChange","attributes","length","getTrait","set","dataSourceId","config","docId","fields","toString","replace","primaryKey","at","dataSource","Table","collections","handleChanges","undefined","docList","getDocList","t","fieldList","getFieldList","get","each","trait","res","label","selected","postData","postDataArray","models","forEach","element","value","arr","js","func","query","widget","createWidgetInDashboard","customId","queryResult","executeWidgetQuery","unmountComponentAtNode","el","render","onRender","comps","reset"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,qBAAP,MAAkC,4CAAlC;AAEA,eAAe,UAAUC,MAAV,EAAkBC,GAAG,GAAG,EAAxB,EAA4B;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAIG,CAAC,GAAG,CACN,CACE;AACEC,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,EAAE,EAAE,0BAHN;AAIE,iBAAa,0BAJf;AAKEC,IAAAA,KAAK,EAAE;AALT,GADF,CADM,CAAR;AAYA,MAAIC,WAAW,GAAG,EAAlB;AACA,QAAMC,IAAI,GAAGV,MAAM,CAACW,aAApB;AACA,QAAMC,WAAW,GAAGF,IAAI,CAACG,OAAL,CAAa,SAAb,CAApB;AACA,QAAMC,YAAY,GAAGF,WAAW,CAACG,KAAjC;AACA,QAAMC,WAAW,GAAGJ,WAAW,CAACK,IAAhC;;AAEA,WAASC,cAAT,CAAwBC,aAAxB,EAAuC;AACrC,QAAIC,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,GAAT,IAAgBF,aAAhB,EAA+B;AAC7B,UAAIA,aAAa,CAACE,GAAD,CAAb,KAAuB,IAA3B,EAAiCD,MAAM,CAACE,IAAP,CAAYD,GAAZ;AAClC;;AAED,WAAOD,MAAP;AACD;;AAEDV,EAAAA,IAAI,CAACa,OAAL,CAAa5B,QAAb,EAAuB;AACrBoB,IAAAA,KAAK,EAAED,YAAY,CAACU,MAAb,CAAoB;AACzBC,MAAAA,QAAQ,oBACHX,YAAY,CAACY,SAAb,CAAuBD,QADpB;AAENE,QAAAA,SAAS,EAAE,IAFL;AAGNC,QAAAA,WAAW,EAAE,CACX,CACE;AACEvB,UAAAA,IAAI,EAAE,QADR;AAEEC,UAAAA,QAAQ,EAAE,KAFZ;AAGEC,UAAAA,EAAE,EAAE,0BAHN;AAIE,uBAAa,0BAJf;AAKEC,UAAAA,KAAK,EAAE;AALT,SADF,CADW,CAHP;AAcNqB,QAAAA,QAAQ,EAAE,EAdJ;AAeNC,QAAAA,IAAI,EAAE,EAfA;AAgBNC,QAAAA,IAAI,EAAE,CAAC,CAAC,MAAD,EAAS,UAAT,EAAqB,IAArB,EAA2B,WAA3B,EAAwC,OAAxC,CAAD,CAhBA;AAiBNC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,QADR;AAEEC,UAAAA,IAAI,EAAE,QAFR;AAGEC,UAAAA,IAAI,EAAG,QAHT;AAIEC,UAAAA,IAAI,EAAE,IAJR;AAKEC,UAAAA,OAAO,EAAE,MAAOrC,MAAP,IAAkB;AACzB,gBAAI;AACF,oBAAMsC,WAAW,GAAG,MAAMxC,iBAAiB,CAACyC,cAAlB,CAAiC,EAAjC,CAA1B;AACA,kBAAIC,SAAS,GAAGxC,MAAM,CAACyC,WAAP,EAAhB;AACAD,cAAAA,SAAS,CAACE,QAAV,CAAmB;AACjBT,gBAAAA,IAAI,EAAE,YADW;AAEjBC,gBAAAA,IAAI,EAAE,QAFW;AAGjBS,gBAAAA,UAAU,EAAE,CAHK;AAIjBC,gBAAAA,OAAO,EAAEN,WAAW,CAACO,GAAZ,CAAiBC,EAAD,IAAQ;AAC/B,yBAAO;AAAEvC,oBAAAA,EAAE,EAAEuC,EAAE,CAACvC,EAAT;AAAa0B,oBAAAA,IAAI,EAAEa,EAAE,CAACC;AAAtB,mBAAP;AACD,iBAFQ;AAJQ,eAAnB;AAQAP,cAAAA,SAAS,CAACQ,WAAV,CAAsB,QAAtB;AACD,aAZD,CAYE,OAAOC,CAAP,EAAU;AACV/C,cAAAA,OAAO,CAACC,GAAR,CAAY8C,CAAZ;AACD;AACF;AArBH,SADM,CAjBF;AA0CNC,QAAAA,MAAM,EAAE,YAAY;AAClB,iBAAO,EAAP;AACD;AA5CK,QADiB;;AA+CzBC,MAAAA,IAAI,GAAG;AACL,aAAKC,QAAL,CAAc,IAAd,EAAoB,KAAKC,gBAAzB;;AACA,YAAI,KAAKC,UAAL,CAAgBzB,QAAhB,CAAyB0B,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,eAAKC,QAAL,CAAc,QAAd,EAAwBC,GAAxB,CAA4B,MAA5B,EAAoC,MAApC;AACA,eAAKf,QAAL,CACE;AACET,YAAAA,IAAI,EAAE,MADR;AAEEC,YAAAA,IAAI,EAAE,KAFR;AAGEC,YAAAA,IAAI,EAAG;uDAEP,KAAKmB,UAAL,CAAgBzB,QAAhB,CAAyB,CAAzB,EAA4B6B,YAA5B,KACA,0BADA,GAEI,SAFJ,GAGI,KAAKJ,UAAL,CAAgBzB,QAAhB,CAAyB,CAAzB,EAA4B6B,YACjC;kDAEE,KAAKJ,UAAL,CAAgBzB,QAAhB,CAAyB,CAAzB,EAA4B8B,MAA5B,CAAmCC,KACpC;kDACoC,KAAKN,UAAL,CAAgBzB,QAAhB,CAAyB,CAAzB,EAA4B8B,MAA5B,CAAmCE,MAAnC,CACnCC,QADmC,GAEnCC,OAFmC,CAE3B,IAF2B,EAErB,KAFqB,CAEd;wDAEtB,KAAKT,UAAL,CAAgBzB,QAAhB,CAAyB,CAAzB,EAA4B8B,MAA5B,CAAmCK,UACpC;;AAlBD,WADF,EAsBE;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAtBF;AAwBD;;AACD,YAAI,KAAKX,UAAL,CAAgBY,UAApB,EAAgC;AAC9B,eAAKZ,UAAL,CAAgBY,UAAhB,GAA6B,EAA7B;AACA,eAAKZ,UAAL,CAAgBa,KAAhB,GAAwB,EAAxB;AACA,eAAKb,UAAL,CAAgBc,WAAhB,GAA8B,EAA9B;AACD,SAJD,MAIO;AACL,iBAAO,IAAP;AACD;AACF;;AAnFwB,KAApB,CADc;AAuFrBnD,IAAAA,IAAI,EAAED,WAAW,CAACQ,MAAZ,CAAmB;AACvB2B,MAAAA,IAAI,GAAG;AACL,aAAKC,QAAL,CACE,KAAKrC,KADP,EAEG,sEAAqEN,WAAW,CAACqD,QAAZ,EAAuB,EAF/F,EAGE,KAAKO,aAHP;AAKD,OAPsB;;AAQvB,YAAMA,aAAN,GAAsB;AACpB,YAAI;AACF,cACE,KAAKtD,KAAL,CAAWuC,UAAX,CAAsBY,UAAtB,KACC,KAAKnD,KAAL,CAAWuC,UAAX,CAAsBa,KAAtB,IAA+BG,SAA/B,IACC,KAAKvD,KAAL,CAAWuC,UAAX,CAAsBa,KAAtB,IAA+B,EAFjC,CADF,EAIE;AACA,kBAAMI,OAAO,GAAG,MAAMzE,iBAAiB,CAAC0E,UAAlB,CACpB,KAAKzD,KAAL,CAAWuC,UAAX,CAAsBY,UADF,CAAtB;AAGA,kBAAM1B,SAAS,GAAGxC,MAAM,CAACyC,WAAP,EAAlB;AACAD,YAAAA,SAAS,CAACE,QAAV,CAAmB;AACjBT,cAAAA,IAAI,EAAE,OADW;AAEjBC,cAAAA,IAAI,EAAE,QAFW;AAGjBU,cAAAA,OAAO,EAAE2B,OAAO,CAAC1B,GAAR,CAAa4B,CAAD,IAAO;AAC1B,uBAAO;AAAElE,kBAAAA,EAAE,EAAEkE,CAAN;AAASxC,kBAAAA,IAAI,EAAEwC;AAAf,iBAAP;AACD,eAFQ,CAHQ;AAMjB9B,cAAAA,UAAU,EAAE;AANK,aAAnB;AAQD;;AACD,cAAI,KAAK5B,KAAL,CAAWuC,UAAX,CAAsBa,KAA1B,EAAiC;AAC/B,kBAAMO,SAAS,GAAG,MAAM5E,iBAAiB,CAAC6E,YAAlB,CACtB,KAAK5D,KAAL,CAAWuC,UAAX,CAAsBY,UADA,EAEtB,KAAKnD,KAAL,CAAWuC,UAAX,CAAsBa,KAFA,CAAxB;AAIA,kBAAM3B,SAAS,GAAGxC,MAAM,CAACyC,WAAP,EAAlB;;AAEA,gBAAIhC,WAAW,CAAC8C,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,mBAAKxC,KAAL,CAAW6D,GAAX,CAAe,QAAf,EAAyBC,IAAzB,CAA8B,UAAUC,KAAV,EAAiB;AAC7CtC,gBAAAA,SAAS,CAACQ,WAAV,CAAsBvC,WAAW,CAACoC,GAAZ,CAAiB4B,CAAD,IAAOA,CAAC,CAACX,QAAF,EAAvB,CAAtB;AACAtB,gBAAAA,SAAS,CAACQ,WAAV,CAAsB,aAAtB;AACAR,gBAAAA,SAAS,CAACQ,WAAV,CAAsB,SAAtB;AACD,eAJD;AAKD;;AACD0B,YAAAA,SAAS,CAAC7B,GAAV,CAAe4B,CAAD,IAAO;AACnB,kBAAIM,GAAG,GAAG,CACR;AACEC,gBAAAA,KAAK,EAAEP,CADT;AAEExC,gBAAAA,IAAI,EAAEwC,CAFR;AAGEvC,gBAAAA,IAAI,EAAE,UAHR;AAIES,gBAAAA,UAAU,EAAE;AAJd,eADQ,CAAV;AAQAlC,cAAAA,WAAW,CAACa,IAAZ,CAAiBmD,CAAjB;AACAjC,cAAAA,SAAS,CAACE,QAAV,CAAmBqC,GAAnB;AACD,aAXD;AAaAvC,YAAAA,SAAS,CAACE,QAAV,CACE;AACEsC,cAAAA,KAAK,EAAE,aADT;AAEE/C,cAAAA,IAAI,EAAE,aAFR;AAGEC,cAAAA,IAAI,EAAE,QAHR;AAIEU,cAAAA,OAAO,EAAE8B,SAAS,CAAC7B,GAAV,CAAe4B,CAAD,IAAOA,CAArB,CAJX;AAKE9B,cAAAA,UAAU,EAAE;AALd,aADF,EAQE;AAAEsB,cAAAA,EAAE,EAAE;AAAN,aARF;AAWAzB,YAAAA,SAAS,CAACE,QAAV,CAAmB;AACjBR,cAAAA,IAAI,EAAE,QADW;AAEjBD,cAAAA,IAAI,EAAE,SAFW;AAGjBU,cAAAA,UAAU,EAAE,CAHK;AAIjBqC,cAAAA,KAAK,EAAE,YAJU;AAKjB7C,cAAAA,IAAI,EAAE,UALW;AAMjBC,cAAAA,IAAI,EAAE,IANW;AAOjBC,cAAAA,OAAO,EAAE,MAAOrC,MAAP,IAAkB;AACzB,oBAAI;AACF,wBAAMiF,QAAQ,GAAGjF,MAAM,CAACyC,WAAP,EAAjB;AACA,sBAAIyC,QAAQ,GAAG,EAAf;AACA,sBAAIC,aAAa,GAAG,EAApB;AACAF,kBAAAA,QAAQ,CAAC3B,UAAT,CAAoBtB,MAApB,CAA2BoD,MAA3B,CAAkCC,OAAlC,CAA2CC,OAAD,IAAa;AACrDJ,oBAAAA,QAAQ,CAACI,OAAO,CAAChC,UAAR,CAAmBrB,IAApB,CAAR,GACEqD,OAAO,CAAChC,UAAR,CAAmBiC,KADrB;AAED,mBAHD;AAIAJ,kBAAAA,aAAa,CAAC7D,IAAd,CAAmB4D,QAAnB;AACA,sBAAIM,GAAG,GAAG,IAAV;AACA,uBAAKzE,KAAL,CAAWuC,UAAX,CAAsBvB,IAAtB,GAA6B,EAA7B;AACAyD,kBAAAA,GAAG,GAAGL,aAAa,CAACtC,GAAd,CAAmB4C,EAAD,IAAQ;AAC9B,yBAAK1E,KAAL,CAAWuC,UAAX,CAAsBvB,IAAtB,CAA2BT,IAA3B,CAAgCJ,cAAc,CAACuE,EAAD,CAA9C;AAEA,2BAAO;AACL/B,sBAAAA,YAAY,EAAE+B,EAAE,CAACvB,UADZ;AAELP,sBAAAA,MAAM,EAAE;AACNE,wBAAAA,MAAM,EAAE3C,cAAc,CAACuE,EAAD,CADhB;AAENzB,wBAAAA,UAAU,EAAEyB,EAAE,CAACrB,WAFT;AAGNR,wBAAAA,KAAK,EAAE6B,EAAE,CAACtB,KAHJ;AAINjC,wBAAAA,IAAI,EAAE,QAJA;AAKNwD,wBAAAA,IAAI,EAAE,MALA;AAMNC,wBAAAA,KAAK,EAAE;AAND,uBAFH;AAULzD,sBAAAA,IAAI,EAAE;AAVD,qBAAP;AAYD,mBAfK,EAeH,CAfG,CAAN;AAgBA,wBAAM0D,MAAM,GAAG,MAAM/F,gBAAgB,CAACgG,uBAAjB,CACnB,0BADmB,EAEnBL,GAFmB,CAArB;AAIA,sBAAIM,QAAQ,GAAGF,MAAM,CAACrF,EAAtB;AACA,uBAAKQ,KAAL,CAAWuC,UAAX,CAAsBzB,QAAtB,GAAiC,EAAjC;AACA,uBAAKd,KAAL,CAAWuC,UAAX,CAAsBzB,QAAtB,CAA+BP,IAA/B,CAAoCsE,MAApC;;AACA,sBAAI,KAAK7E,KAAL,CAAWuC,UAAX,CAAsBzB,QAAtB,CAA+B0B,MAA/B,IAAyC,CAA7C,EAAgD;AAC9Cf,oBAAAA,SAAS,CAACQ,WAAV,CAAsB,MAAtB;AACD;;AACD,wBAAM+C,WAAW,GAAG,MAAMhG,qBAAqB,CAACiG,kBAAtB,CACxBF,QADwB,CAA1B;;AAIA,sBAAI,KAAK/E,KAAL,CAAWuC,UAAX,CAAsB1B,WAAtB,CAAkC2B,MAAlC,GAA2C,CAA/C,EAAkD;AAChD,yBAAKxC,KAAL,CAAWuC,UAAX,CAAsB1B,WAAtB,CAAkCN,IAAlC,CAAuCyE,WAAvC;AACD,mBAFD,MAEO;AACL,yBAAKhF,KAAL,CAAWuC,UAAX,CAAsB1B,WAAtB,GAAoC,EAApC;AACA,yBAAKb,KAAL,CAAWuC,UAAX,CAAsB1B,WAAtB,CAAkCN,IAAlC,CAAuCyE,WAAvC;AACD;;AAEDrG,kBAAAA,QAAQ,CAACuG,sBAAT,CAAgC,KAAKC,EAArC;AACA,uBAAKC,MAAL;AACD,iBAlDD,CAkDE,OAAOlD,CAAP,EAAU;AACV/C,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB8C,CAAzB;AACD;AACF;AA7DgB,aAAnB;AA+DD;AACF,SAzHD,CAyHE,OAAOA,CAAP,EAAU;AACV/C,UAAAA,OAAO,CAACC,GAAR,CAAY8C,CAAZ;AACD;AACF,OArIsB;;AAsIvBmD,MAAAA,QAAQ,CAAC;AAAEF,QAAAA;AAAF,OAAD,EAAS;AACf,cAAMG,KAAK,GAAG,KAAKtF,KAAL,CAAW6D,GAAX,CAAe,YAAf,CAAd;AACAyB,QAAAA,KAAK,CAACC,KAAN;AACA5G,QAAAA,QAAQ,CAACyG,MAAT,CACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,QAAD;AACE,UAAA,IAAI,EAAE,KAAKpF,KAAL,CAAWuC,UAAX,CAAsBvB,IAD9B;AAEE,UAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWuC,UAAX,CAAsB1B,WAAtB,CAAkC,CAAlC,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CADF,EASEsE,EATF;AAWD;;AApJsB,KAAnB;AAvFe,GAAvB;AA8OD","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TableRef } from \"./consts\";\nimport Material from \"./Material\";\nimport DashboardActions from \"../../../../actions/dashboard.actions\";\nimport DatasourceActions from \"../../../../actions/datasource.actions\";\nimport WidgetSettingsActions from \"../../../../actions/widgetSettings.actions\";\n\nexport default function (editor, opt = {}) {\n  console.log(opt)\n  let d = [\n    [\n      {\n        Name: \"Henery\",\n        Location: \"Usa\",\n        id: \"5c24dc26dc10670017e40921\",\n        \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n        notes: \"\",\n      },\n    ],\n  ];\n\n  let updateTrait = [];\n  const domc = editor.DomComponents;\n  const defaultType = domc.getType(\"default\");\n  const defaultModel = defaultType.model;\n  const defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    let newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(TableRef, {\n    model: defaultModel.extend({\n      defaults: {\n        ...defaultModel.prototype.defaults,\n        droppable: true,\n        defaultData: [\n          [\n            {\n              Name: \"Henery\",\n              Location: \"Usa\",\n              id: \"5c24dc26dc10670017e40921\",\n              \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n              notes: \"\",\n            },\n          ],\n        ],\n        prevData: [],\n        dbId: [],\n        keys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n        traits: [\n          {\n            name: \"modify\",\n            type: \"button\",\n            text: `Modify`,\n            full: true,\n            command: async (editor) => {\n              try {\n                const datasources = await DatasourceActions.getDatasources({});\n                let component = editor.getSelected();\n                component.addTrait({\n                  name: \"dataSource\",\n                  type: \"select\",\n                  changeProp: 1,\n                  options: datasources.map((op) => {\n                    return { id: op.id, name: op.title };\n                  }),\n                });\n                component.removeTrait(\"modify\");\n              } catch (e) {\n                console.log(e);\n              }\n            },\n          },\n        ],\n        toHTML: function () {\n          return \"\";\n        },\n      },\n      init() {\n        this.listenTo(this, this.handlePropChange);\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait(\"modify\").set(\"text\", \"Edit\");\n          this.addTrait(\n            {\n              name: \"Prev\",\n              type: \"pre\",\n              text: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${\n              this.attributes.prevData[0].dataSourceId ===\n              \"5ec035f7bb377b08ebc8938a\"\n                ? \"MongoDB\"\n                : this.attributes.prevData[0].dataSourceId\n            }</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${\n               this.attributes.prevData[0].config.docId\n             }</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields\n              .toString()\n              .replace(/,/g, \" | \")}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${\n              this.attributes.prevData[0].config.primaryKey\n            }</span><br/>\n\t\t\t\t\t`,\n            },\n            { at: 0 }\n          );\n        }\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = \"\";\n          this.attributes.Table = \"\";\n          this.attributes.collections = \"\";\n        } else {\n          return null;\n        }\n      },\n    }),\n\n    view: defaultView.extend({\n      init() {\n        this.listenTo(\n          this.model,\n          `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`,\n          this.handleChanges\n        );\n      },\n      async handleChanges() {\n        try {\n          if (\n            this.model.attributes.dataSource &&\n            (this.model.attributes.Table == undefined ||\n              this.model.attributes.Table == \"\")\n          ) {\n            const docList = await DatasourceActions.getDocList(\n              this.model.attributes.dataSource\n            );\n            const component = editor.getSelected();\n            component.addTrait({\n              name: \"Table\",\n              type: \"select\",\n              options: docList.map((t) => {\n                return { id: t, name: t };\n              }),\n              changeProp: 1,\n            });\n          }\n          if (this.model.attributes.Table) {\n            const fieldList = await DatasourceActions.getFieldList(\n              this.model.attributes.dataSource,\n              this.model.attributes.Table\n            );\n            const component = editor.getSelected();\n\n            if (updateTrait.length > 1) {\n              this.model.get(\"traits\").each(function (trait) {\n                component.removeTrait(updateTrait.map((t) => t.toString()));\n                component.removeTrait(\"collections\");\n                component.removeTrait(\"console\");\n              });\n            }\n            fieldList.map((t) => {\n              let res = [\n                {\n                  label: t,\n                  name: t,\n                  type: \"checkbox\",\n                  changeProp: 1,\n                },\n              ];\n              updateTrait.push(t);\n              component.addTrait(res);\n            });\n\n            component.addTrait(\n              {\n                label: \"Primary key\",\n                name: \"collections\",\n                type: \"select\",\n                options: fieldList.map((t) => t),\n                changeProp: 1,\n              },\n              { at: 40 }\n            );\n\n            component.addTrait({\n              type: \"button\",\n              name: \"console\",\n              changeProp: 1,\n              label: \"log button\",\n              text: \"Click me\",\n              full: true,\n              command: async (editor) => {\n                try {\n                  const selected = editor.getSelected();\n                  let postData = {};\n                  let postDataArray = [];\n                  selected.attributes.traits.models.forEach((element) => {\n                    postData[element.attributes.name] =\n                      element.attributes.value;\n                  });\n                  postDataArray.push(postData);\n                  let arr = null;\n                  this.model.attributes.keys = [];\n                  arr = postDataArray.map((js) => {\n                    this.model.attributes.keys.push(displayOptions(js));\n\n                    return {\n                      dataSourceId: js.dataSource,\n                      config: {\n                        fields: displayOptions(js),\n                        primaryKey: js.collections,\n                        docId: js.Table,\n                        type: \"simple\",\n                        func: \"find\",\n                        query: {},\n                      },\n                      type: \"Table\",\n                    };\n                  })[0];\n                  const widget = await DashboardActions.createWidgetInDashboard(\n                    \"5efdea1c72c7e92ca5cc362f\",\n                    arr\n                  );\n                  let customId = widget.id;\n                  this.model.attributes.prevData = [];\n                  this.model.attributes.prevData.push(widget);\n                  if (this.model.attributes.prevData.length >= 1) {\n                    component.removeTrait(\"Prev\");\n                  }\n                  const queryResult = await WidgetSettingsActions.executeWidgetQuery(\n                    customId\n                  );\n\n                  if (this.model.attributes.defaultData.length < 1) {\n                    this.model.attributes.defaultData.push(queryResult);\n                  } else {\n                    this.model.attributes.defaultData = [];\n                    this.model.attributes.defaultData.push(queryResult);\n                  }\n\n                  ReactDOM.unmountComponentAtNode(this.el);\n                  this.render();\n                } catch (e) {\n                  console.log(\">> Error:\", e);\n                }\n              },\n            });\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      onRender({ el }) {\n        const comps = this.model.get(\"components\");\n        comps.reset();\n        ReactDOM.render(\n          <>\n            <div>\n              <Material\n                keys={this.model.attributes.keys}\n                data={this.model.attributes.defaultData[0]}\n              />\n            </div>\n          </>,\n          el\n        );\n      },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}