{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\n\nclass Material extends React.Component {\n  render() {\n    console.log(this.props.data); // const keys = [...new Set([].concat.apply([], this.props.data.map(obj => Object.keys(obj))))]\n    // console.log(keys)\n\n    let f = \"\";\n\n    for (let i = 0, j = 0; i < this.props.data.length && j < 10; i++, j++) {\n      const kee = Object.keys(this.props.data[i]);\n      f = kee;\n    }\n\n    return __jsx(\"table\", {\n      cellspacing: \"0\",\n      cellpadding: \"0\",\n      style: {\n        margin: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n        tableLayout: \"fixed\",\n        whiteSpace: \"normal\",\n        borderRadius: \"15px\",\n        overflow: \"hidden\",\n        boxShadow: \"0 0px 40px 0px rgba(0, 0, 0, 0.15)\",\n        fontSize: \"15px\",\n        color: \"#808080\"\n      }\n    }, __jsx(\"thead\", null, __jsx(\"tr\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        backgroundColor: \"#6c7ae0\",\n        boxShadow: \"0px 0px 9px 0px rgba(0,0,0,0.1)\",\n        color: \"white\"\n      }\n    }, f.map(k => {\n      console.log(f.length);\n      return __jsx(\"th\", {\n        style: {\n          width: `${100 / f.length}%`,\n          padding: \"15px\"\n        }\n      }, k);\n    }))), __jsx(\"tbody\", {\n      class: \"Tbody\"\n    }, this.props.data.map(d => {\n      const values = [];\n      f.forEach(key => {\n        if (typeof d[key] === \"object\" || typeof d[key] === \"undefined\") {\n          d[key] = \"----------\";\n        } else if (d[key] === true) {\n          d[key] = \"true\";\n        } else if (d[key] === false) {\n          d[key] = \"false\";\n        } else if (d[key].length < 1) {\n          d[key] = \"----------\";\n        }\n\n        values.push(d[key]);\n      });\n      console.log(values); // values.map(str => {\n      //     if (typeof str === \"object\") {\n      //         let st = JSON.stringify(str)\n      //         values[1] = st;\n      //     } else if (typeof str === Boolean) {\n      //         return str.toString()\n      //     }\n      //})\n\n      return __jsx(\"tr\", {\n        class: \"Tr-body\",\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\"\n        }\n      }, values.map(di => {\n        return __jsx(\"td\", {\n          style: {\n            width: `${100 / f.length}%`,\n            wordWrap: \"break-word\",\n            padding: \"10px 0\"\n          }\n        }, di);\n      }));\n    })));\n  }\n\n}\n\nexport default Material;","map":null,"metadata":{},"sourceType":"module"}