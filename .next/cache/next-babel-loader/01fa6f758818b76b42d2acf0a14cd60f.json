{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport TableWidgetSettingsPanel from './table-widget-settings-panel';\nimport { ListMeasureCondition } from '../helpers';\nimport Swal from 'sweetalert2';\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(\"div\", _extends({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    \"aria-labelledby\": `simple-tab-${index}`\n  }, other), value === index && __jsx(Box, {\n    p: 3\n  }, __jsx(Typography, null, children)));\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  panel: {\n    backgroundColor: \"#FFF\",\n    color: \"#000\"\n  }\n}));\n\nconst TableWidgetSettings = ({\n  widget,\n  handleSettingsClose,\n  isAdding,\n  onWidgetAdd\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(AppBar, {\n    position: \"static\",\n    className: classes.panel\n  }, __jsx(Tabs, {\n    value: value,\n    onChange: handleChange\n  }, __jsx(Tab, _extends({\n    icon: __jsx(SettingsIcon, null),\n    label: \"Widget Settings\"\n  }, a11yProps(0))), __jsx(Tab, _extends({\n    icon: __jsx(AssessmentIcon, null),\n    label: \"Measure Conditions\"\n  }, a11yProps(1))))), __jsx(TabPanel, {\n    value: value,\n    index: 0\n  }, __jsx(TableWidgetSettingsPanel, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose,\n    isAdding: isAdding,\n    onWidgetAdd: onWidgetAdd\n  })), __jsx(TabPanel, {\n    value: value,\n    index: 1\n  }, __jsx(ListMeasureCondition, {\n    widget: widget,\n    handleSettingsClose: handleSettingsClose,\n    isAdding: isAdding,\n    onWidgetAdd: onWidgetAdd\n  })));\n};\n\nexport default TableWidgetSettings;","map":null,"metadata":{},"sourceType":"module"}