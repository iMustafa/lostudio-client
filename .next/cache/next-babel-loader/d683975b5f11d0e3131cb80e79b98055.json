{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridLayout from 'react-grid-layout';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Drawer from '@material-ui/core/Drawer';\nimport DashboardActions from '../../../actions/dashboard.actions';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu';\nimport DashboardSettings from '../../../components/dashboards/settings/dashboard-settings';\nimport { useRouter } from 'next/router';\nimport { decideWidgetSettings, decideWidget } from '../../../helpers/decide-widgets';\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  fullList: {\n    width: 'auto'\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff'\n  }\n}));\n\nconst EditDashboard = () => {\n  const classes = useStyles();\n  const router = useRouter();\n  const {\n    0: id,\n    1: setId\n  } = useState(router.query.id);\n  const {\n    0: menuState,\n    1: setMenuState\n  } = useState({\n    right: false,\n    addWidget: false,\n    settings: false\n  });\n  const {\n    0: layout,\n    1: setLayout\n  } = useState([]);\n  const {\n    0: addType,\n    1: setAddType\n  } = useState(null);\n  const {\n    0: WidgetSettings,\n    1: setWidgetSettings\n  } = useState([]);\n  const {\n    0: SubDashboards,\n    1: setSubDashboards\n  } = useState([]);\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(0);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  useEffect(() => {\n    const getProps = async () => {\n      try {\n        setIsLoading(true);\n        const dashboard = await DashboardActions.getDashboardById(id);\n\n        if (!dashboard.isSub) {\n          const $SubDashboards = await DashboardActions.getSubDashboards({\n            id\n          });\n          setSubDashboards($SubDashboards);\n        }\n\n        const $WidgetSettings = await DashboardActions.getWidgetSettings({\n          id\n        });\n        setLayout($WidgetSettings);\n        setWidgetSettings($WidgetSettings);\n        setIsLoading(false);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getProps();\n  }, [id, refresh]);\n\n  const onLayoutChange = async $event => {\n    try {\n      const layouts = layout.map(item => {\n        const $eventItem = $event.filter($item => $item.i == item.layout.i)[0];\n        return _objectSpread({}, item, {\n          layout: $eventItem\n        });\n      });\n      await Promise.all(layouts.map(item => WidgetSettingsActions.updateWidgetSettings(item.id, item)));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n    setMenuState(_objectSpread({}, menuState, {\n      [side]: open\n    }));\n  };\n\n  const addPredefinedWidget = async (widget, _) => {\n    try {\n      const $widget = _objectSpread({}, widget);\n\n      delete $widget.id;\n      delete $widget.icon;\n      $widget.layout.i = uuidv4();\n      const saveWidget = await WidgetSettingsActions.createWidgetSettings($widget);\n      await DashboardActions.addWidgetToDashboard(id, saveWidget.id);\n      setLayout([...layout, {\n        layout: $widget.layout,\n        type: $widget.type\n      }]);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onWidgetAdd = async (config, isFormControl = false, widgetSettingsId = null) => {\n    try {\n      const layoutItem = _objectSpread({\n        layout: {\n          i: uuidv4(),\n          x: 0,\n          y: 0,\n          w: 6,\n          h: 11,\n          maxW: 16,\n          isDraggable: true,\n          isResizable: true\n        }\n      }, config);\n\n      if (widgetSettingsId) {\n        delete layoutItem.layout;\n        setIsLoading(true);\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem);\n        const linkWidget = await WidgetSettingsActions.createSubWidget(widgetSettingsId, saveWidget.id);\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem);\n        const linkWidget = await DashboardActions.addWidgetToDashboard(id, saveWidget.id);\n        layoutItem.id = saveWidget.id;\n        setLayout([...layout, layoutItem]);\n        setIsLoading(false);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addWidget = async (type, _) => {\n    setAddType(type);\n    setMenuState(_objectSpread({}, menuState, {\n      addWidget: true,\n      right: false\n    }));\n  };\n\n  const sideList = () => __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\"\n  }, __jsx(WidgetSidemenu, {\n    onWidgetClick: addWidget,\n    addPredefinedWidget: addPredefinedWidget,\n    widgetSettings: Object.values(WidgetSettings)\n  }));\n\n  const renderWidgets = () => layout.map((item, i) => __jsx(\"div\", {\n    key: item.layout.i\n  }, decideWidget(item)));\n\n  return __jsx(\"div\", null, __jsx(Backdrop, {\n    className: classes.backdrop,\n    open: isLoading\n  }, __jsx(CircularProgress, {\n    color: \"inherit\"\n  })), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false)\n  }, sideList()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.addWidget,\n    onClose: toggleDrawer('addWidget', false)\n  }, decideWidgetSettings(addType, onWidgetAdd)), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.settings,\n    onClose: toggleDrawer('settings', false)\n  }, __jsx(DashboardSettings, {\n    id: id,\n    refresh: refresh,\n    setRefresh: setRefresh\n  })), __jsx(Card, {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    }\n  }, __jsx(IconButton, {\n    onClick: () => {\n      router.back();\n    },\n    \"aria-label\": \"back\",\n    size: \"medium\",\n    style: {\n      outline: 'none'\n    }\n  }, __jsx(ArrowLeft, {\n    fontSize: \"default\"\n  })), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flex: 1,\n      overflowX: 'scroll',\n      alignItems: 'center'\n    }\n  }, __jsx(Button, {\n    onClick: () => {\n      setId(router.queFry.id);\n    },\n    style: {\n      marginLeft: 10\n    }\n  }, \"Main\"), SubDashboards.map(subDashboard => __jsx(\"div\", {\n    key: subDashboard.subDashboardId\n  }, __jsx(Button, {\n    onClick: () => {\n      setId(subDashboard.subDashboardId);\n    },\n    style: {\n      marginLeft: 10\n    }\n  }, __jsx(Typography, {\n    noWrap: true,\n    style: {\n      fontWeight: 500,\n      fontSize: '0.875rem',\n      color: 'rgba(0, 0, 0, 0.87)'\n    }\n  }, subDashboard.subDashboard.title))))), __jsx(\"div\", {\n    style: {\n      justifySelf: 'flex-end',\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'flex-end',\n      paddingRight: '10px'\n    }\n  }, __jsx(Button, {\n    style: {\n      outline: 'none'\n    },\n    size: \"small\",\n    startIcon: __jsx(SaveIcon, null)\n  }, \"Save\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('right', true),\n    startIcon: __jsx(DashboardIcon, null)\n  }, \"Widgets\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('settings', true),\n    startIcon: __jsx(SettingsIcon, null)\n  }, \"Settings\"))), __jsx(\"div\", {\n    style: {\n      paddingBottom: '15px'\n    }\n  }, __jsx(GridLayout, {\n    className: \"layout\",\n    cols: 16,\n    rowHeight: 30,\n    width: 1920,\n    layout: layout.map(item => item.layout),\n    onLayoutChange: onLayoutChange\n  }, renderWidgets())));\n}; // EditDashboard.getInitialProps = async (req) => {\n//   const Authorization = Cookies(req).id\n//   const { id } = req.query\n//   const WidgetSettings = await DashboardActions.getWidgetSettings({ Authorization, id })\n//   const SubDashboards = await DashboardActions.getSubDashboards({ Authorization, id })\n//   return { WidgetSettings, SubDashboards }\n// }\n\n\nexport default EditDashboard;","map":null,"metadata":{},"sourceType":"module"}