{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\LoStudio\\\\client\\\\components\\\\dashboards\\\\create-dashboard.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '25px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n  },\n  actionButtons: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}));\n\nconst getSteps = () => ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation'];\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Dashboard Settings';\n\n    case 1:\n      return 'Datasource Settings';\n\n    case 2:\n      return 'Allow people to help you build your dashboard!';\n\n    case 3:\n      return 'Confirm your data';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nconst CreateDashboard = () => {\n  const classes = useStyles();\n  const {\n    0: activeStep,\n    1: setActiveStep\n  } = useState(0);\n  const {\n    0: skipped,\n    1: setSkipped\n  } = useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = step => step === 2;\n\n  const isStepSkipped = step => skipped.has(step);\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return __jsx(Card, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Create new dashboard\"), __jsx(\"div\", {\n    className: classes.cardBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, steps.map((label, index) => {\n    const stepProps = {};\n    const labelProps = {};\n\n    if (isStepOptional(index)) {\n      labelProps.optional = __jsx(Typography, {\n        variant: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return __jsx(Step, _extends({\n      key: label\n    }, stepProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), __jsx(StepLabel, _extends({}, labelProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), label));\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, activeStep === steps.length ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"All steps completed - you're finished\"), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Reset\"))) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, getStepContent(activeStep)), __jsx(\"div\", {\n    className: classes.actionButtons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Back\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, activeStep === steps.length - 1 ? 'Finish' : 'Next')))))));\n};\n\nexport default CreateDashboard;","map":{"version":3,"sources":["F:/Projects/LoStudio/client/components/dashboards/create-dashboard.jsx"],"names":["useState","makeStyles","Grid","Card","Stepper","Step","StepLabel","Button","Typography","useStyles","theme","root","marginTop","cardBody","padding","cardTitle","fontSize","backgroundColor","color","fontFamily","actionButtons","display","justifyContent","getSteps","getStepContent","step","CreateDashboard","classes","activeStep","setActiveStep","skipped","setSkipped","Set","steps","isStepOptional","isStepSkipped","has","handleNext","newSkipped","values","delete","prevActiveStep","handleBack","handleReset","map","label","index","stepProps","labelProps","optional","completed","length","instructions","button"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop: '25px'\r\n  },\r\n  cardBody: {\r\n    padding: '10px'\r\n  },\r\n  cardTitle: {\r\n    fontSize: '12px',\r\n    backgroundColor: '#3F51B5',\r\n    padding: '3px 3px 3px 6px',\r\n    color: '#FFF',\r\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\r\n  },\r\n  actionButtons: {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  }\r\n}))\r\n\r\nconst getSteps = () => ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation']\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return 'Dashboard Settings';\r\n    case 1:\r\n      return 'Datasource Settings';\r\n    case 2:\r\n      return 'Allow people to help you build your dashboard!';\r\n    case 3:\r\n      return 'Confirm your data';\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nconst CreateDashboard = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n  const [skipped, setSkipped] = useState(new Set())\r\n  const steps = getSteps()\r\n\r\n  const isStepOptional = step => step === 2\r\n  const isStepSkipped = step => skipped.has(step)\r\n  const handleNext = () => {\r\n    let newSkipped = skipped\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values())\r\n      newSkipped.delete(activeStep)\r\n    }\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    setSkipped(newSkipped)\r\n  }\r\n  const handleBack = () => { setActiveStep((prevActiveStep) => prevActiveStep - 1) }\r\n  const handleReset = () => { setActiveStep(0) }\r\n\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <div className={classes.cardTitle}>Create new dashboard</div>\r\n      <div className={classes.cardBody}>\r\n        <div className={classes.root}>\r\n          <Stepper activeStep={activeStep}>\r\n            {steps.map((label, index) => {\r\n              const stepProps = {};\r\n              const labelProps = {};\r\n              if (isStepOptional(index)) {\r\n                labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n              }\r\n              if (isStepSkipped(index)) {\r\n                stepProps.completed = false;\r\n              }\r\n              return (\r\n                <Step key={label} {...stepProps}>\r\n                  <StepLabel {...labelProps}>{label}</StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n          <div>\r\n            {\r\n              activeStep === steps.length ?\r\n                (\r\n                  <div>\r\n                    <Typography className={classes.instructions}>\r\n                      All steps completed - you&apos;re finished\r\n                    </Typography>\r\n                    <div className={classes.actionButtons}>\r\n                      <Button onClick={handleReset} className={classes.button}>\r\n                        Reset\r\n                     </Button>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n                    <div className={classes.actionButtons}>\r\n                      <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                        Back\r\n                      </Button>\r\n\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleNext}\r\n                        className={classes.button}\r\n                      >\r\n                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                )\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CreateDashboard"]},"metadata":{},"sourceType":"module"}