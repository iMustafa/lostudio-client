{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport config from 'next/config';\nimport Cookie from 'js-cookie';\nvar API_URL = config().publicRuntimeConfig.API_URL;\n\nvar DashboardActions =\n/*#__PURE__*/\nfunction () {\n  function DashboardActions() {\n    _classCallCheck(this, DashboardActions);\n  }\n\n  _createClass(DashboardActions, null, [{\n    key: \"createDashboard\",\n    // TODO\n    value: function createDashboard(dashborad) {\n      return _regeneratorRuntime.async(function createDashboard$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    } // TODO\n\n  }, {\n    key: \"getDashboards\",\n    value: function getDashboards(_ref) {\n      var Authorization, query;\n      return _regeneratorRuntime.async(function getDashboards$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Authorization = _ref.Authorization, query = _ref.query;\n              return _context2.abrupt(\"return\", axios.get(\"\".concat(API_URL, \"/Dashboards\"), {\n                headers: {\n                  Authorization: Authorization || Cookie.get('id')\n                }\n              }).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    } // TODO\n\n  }, {\n    key: \"getDashboardById\",\n    value: function getDashboardById(data) {\n      return _regeneratorRuntime.async(function getDashboardById$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    } // TODO\n\n  }, {\n    key: \"updateDashboard\",\n    value: function updateDashboard(data) {\n      return _regeneratorRuntime.async(function updateDashboard$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    } // TODO\n\n  }, {\n    key: \"deleteDashboard\",\n    value: function deleteDashboard(data) {\n      return _regeneratorRuntime.async(function deleteDashboard$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getWidgetSettings\",\n    value: function getWidgetSettings(id) {\n      return _regeneratorRuntime.async(function getWidgetSettings$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"addWidgetToDashboard\",\n    value: function addWidgetToDashboard(data) {\n      return _regeneratorRuntime.async(function addWidgetToDashboard$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeWidgetFromDashboard\",\n    value: function removeWidgetFromDashboard(data) {\n      return _regeneratorRuntime.async(function removeWidgetFromDashboard$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", axios.post('', {}).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return err.response;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return DashboardActions;\n}();\n\nexport { DashboardActions as default };","map":{"version":3,"sources":["F:/Projects/LoStudio/client/actions/dashboard.actions.ts"],"names":["axios","config","Cookie","API_URL","publicRuntimeConfig","DashboardActions","dashborad","post","then","res","data","err","response","Authorization","query","get","headers","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;IAOQC,O,GAAYF,MAAM,GAAGG,mB,CAArBD,O;;IAEaE,gB;;;;;;;;;AAEnB;oCACoCC,S;;;;;+CAC3BN,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;MAMT;;;;;;;;;;AACoCC,cAAAA,a,QAAAA,a,EAAeC,K,QAAAA,K;gDAC1Cd,KAAK,CACTe,GADI,WACGZ,OADH,kBACyB;AAAEa,gBAAAA,OAAO,EAAE;AAAEH,kBAAAA,aAAa,EAAEA,aAAa,IAAIX,MAAM,CAACa,GAAP,CAAW,IAAX;AAAlC;AAAX,eADzB,EAEJP,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAJ;AAAA,eAHL,C;;;;;;;;MAMT;;;;qCACqCD,I;;;;;gDAC5BV,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;MAMT;;;;oCACoCF,I;;;;;gDAC3BV,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;MAMT;;;;oCACoCF,I;;;;;gDAC3BV,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;;;;sCAM6BK,E;;;;;gDAC7BjB,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;;;;yCAMgCF,I;;;;;gDAChCV,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;;;;8CAMqCF,I;;;;;gDACrCV,KAAK,CACTO,IADI,CACC,EADD,EACK,EADL,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eAFJ,WAGE,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,QAAR;AAAA,eAHL,C;;;;;;;;;;;;;;SAzDUP,gB","sourcesContent":["import axios from 'axios'\r\nimport config from 'next/config'\r\nimport Cookie from 'js-cookie'\r\nimport User from '../types/users.types'\r\nimport Dashboard from '../types/dashboard.types'\r\nimport Datasource from '../types/datasource.types'\r\nimport Widget from '../types/widget.types'\r\nimport WidgetSettings from '../types/widgetSettings.type'\r\n\r\nconst { API_URL } = config().publicRuntimeConfig\r\n\r\nexport default class DashboardActions {\r\n\r\n  // TODO\r\n  public static async createDashboard(dashborad: Dashboard): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async getDashboards({ Authorization, query }: { Authorization?: string, query?: any }): Promise<Array<Datasource>> {\r\n    return axios\r\n      .get(`${API_URL}/Dashboards`, { headers: { Authorization: Authorization || Cookie.get('id') } })\r\n      .then(res => res.data)\r\n      .catch(err => err)\r\n  }\r\n\r\n  // TODO\r\n  public static async getDashboardById(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async updateDashboard(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  // TODO\r\n  public static async deleteDashboard(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async getWidgetSettings(id: string): Promise<Array<WidgetSettings>> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async addWidgetToDashboard(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n  public static async removeWidgetFromDashboard(data: Datasource): Promise<Dashboard> {\r\n    return axios\r\n      .post('', {})\r\n      .then(res => res.data)\r\n      .catch(err => err.response)\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}