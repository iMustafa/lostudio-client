{"ast":null,"code":"var _jsxFileName = \"/Users/imustafa/Projects/LoStudio/client/pages/dashboards/[id]/edit.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridLayout from 'react-grid-layout';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Drawer from '@material-ui/core/Drawer';\nimport DashboardActions from '../../../actions/dashboard.actions';\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions';\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu';\nimport DashboardSettings from '../../../components/dashboards/settings/dashboard-settings';\nimport { useRouter } from 'next/router';\nimport { decideWidgetSettings, decideWidget } from '../../../helpers/decide-widgets';\nconst useStyles = makeStyles({\n  list: {\n    width: 500\n  },\n  fullList: {\n    width: 'auto'\n  }\n});\n\nconst EditDashboard = () => {\n  const classes = useStyles();\n  const router = useRouter();\n  const {\n    0: id,\n    1: setId\n  } = useState(router.query.id);\n  const {\n    0: menuState,\n    1: setMenuState\n  } = useState({\n    right: false,\n    addWidget: false,\n    settings: false\n  });\n  const {\n    0: layout,\n    1: setLayout\n  } = useState([]);\n  const {\n    0: addType,\n    1: setAddType\n  } = useState(null);\n  const {\n    0: WidgetSettings,\n    1: setWidgetSettings\n  } = useState([]);\n  const {\n    0: SubDashboards,\n    1: setSubDashboards\n  } = useState([]);\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(0);\n  useEffect(() => {\n    const getProps = async () => {\n      try {\n        const dashboard = await DashboardActions.getDashboardById(id);\n\n        if (!dashboard.isSub) {\n          const $SubDashboards = await DashboardActions.getSubDashboards({\n            id\n          });\n          setSubDashboards($SubDashboards);\n        }\n\n        const $WidgetSettings = await DashboardActions.getWidgetSettings({\n          id\n        });\n        setLayout($WidgetSettings);\n        setWidgetSettings($WidgetSettings);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getProps();\n  }, [id, refresh]);\n\n  const onLayoutChange = async $event => {\n    try {\n      const layouts = layout.map(item => {\n        const $eventItem = $event.filter($item => $item.i == item.layout.i)[0];\n        return _objectSpread({}, item, {\n          layout: $eventItem\n        });\n      });\n      await Promise.all(layouts.map(item => WidgetSettingsActions.updateWidgetSettings(item.id, item)));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) return;\n    setMenuState(_objectSpread({}, menuState, {\n      [side]: open\n    }));\n  };\n\n  const addPredefinedWidget = async (widget, _) => {\n    try {\n      const $widget = _objectSpread({}, widget);\n\n      delete $widget.id;\n      delete $widget.icon;\n      $widget.layout.i = uuidv4();\n      const saveWidget = await WidgetSettingsActions.createWidgetSettings($widget);\n      await DashboardActions.addWidgetToDashboard(id, saveWidget.id);\n      setLayout([...layout, {\n        layout: $widget.layout,\n        type: $widget.type\n      }]);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onWidgetAdd = async (config, isFormControl = false, widgetSettingsId = null) => {\n    try {\n      const layoutItem = _objectSpread({\n        layout: {\n          i: uuidv4(),\n          x: 0,\n          y: 0,\n          w: 6,\n          h: 11,\n          maxW: 16,\n          isDraggable: true,\n          isResizable: true\n        }\n      }, config);\n\n      if (widgetSettingsId) {\n        delete layoutItem.layout;\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem);\n        const linkWidget = await WidgetSettingsActions.createSubWidget(widgetSettingsId, saveWidget.id);\n      } else {\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem);\n        const linkWidget = await DashboardActions.addWidgetToDashboard(id, saveWidget.id);\n        layoutItem.id = saveWidget.id;\n        setLayout([...layout, layoutItem]);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addWidget = async (type, _) => {\n    setAddType(type);\n    setMenuState(_objectSpread({}, menuState, {\n      addWidget: true,\n      right: false\n    }));\n  };\n\n  const sideList = () => __jsx(\"div\", {\n    className: classes.list,\n    role: \"presentation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, __jsx(WidgetSidemenu, {\n    onWidgetClick: addWidget,\n    addPredefinedWidget: addPredefinedWidget,\n    widgetSettings: Object.values(WidgetSettings),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }));\n\n  const renderWidgets = () => layout.map((item, i) => __jsx(\"div\", {\n    key: item.layout.i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, decideWidget(item)));\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.right,\n    onClose: toggleDrawer('right', false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, sideList()), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.addWidget,\n    onClose: toggleDrawer('addWidget', false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, decideWidgetSettings(addType, onWidgetAdd)), __jsx(Drawer, {\n    anchor: \"right\",\n    open: menuState.settings,\n    onClose: toggleDrawer('settings', false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, __jsx(DashboardSettings, {\n    id: id,\n    refresh: refresh,\n    setRefresh: setRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  })), __jsx(Card, {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, __jsx(IconButton, {\n    onClick: () => {\n      router.back();\n    },\n    \"aria-label\": \"back\",\n    size: \"medium\",\n    style: {\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, __jsx(ArrowLeft, {\n    fontSize: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      maxWidth: 700,\n      overflowX: 'scroll',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => {\n      setId(router.query.id);\n    },\n    style: {\n      marginLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"Main\"), SubDashboards.map(subDashboard => __jsx(\"div\", {\n    key: subDashboard.subDashboardId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: () => {\n      setId(subDashboard.subDashboardId);\n    },\n    style: {\n      marginLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, __jsx(Typography, {\n    noWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, subDashboard.subDashboard.title))))), __jsx(\"div\", {\n    style: {\n      justifySelf: 'flex-end',\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'flex-end',\n      paddingRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    style: {\n      outline: 'none'\n    },\n    size: \"small\",\n    startIcon: __jsx(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 71\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"Save\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('right', true),\n    startIcon: __jsx(DashboardIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 129\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, \"Widgets\"), __jsx(Button, {\n    style: {\n      marginLeft: '10px',\n      outline: 'none'\n    },\n    size: \"small\",\n    onClick: toggleDrawer('settings', true),\n    startIcon: __jsx(SettingsIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 132\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \"Settings\"))), __jsx(\"div\", {\n    style: {\n      paddingBottom: '15px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, __jsx(GridLayout, {\n    className: \"layout\",\n    cols: 16,\n    rowHeight: 30,\n    width: 1920,\n    layout: layout.map(item => item.layout),\n    onLayoutChange: onLayoutChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, renderWidgets())));\n}; // EditDashboard.getInitialProps = async (req) => {\n//   const Authorization = Cookies(req).id\n//   const { id } = req.query\n//   const WidgetSettings = await DashboardActions.getWidgetSettings({ Authorization, id })\n//   const SubDashboards = await DashboardActions.getSubDashboards({ Authorization, id })\n//   return { WidgetSettings, SubDashboards }\n// }\n\n\nexport default EditDashboard;","map":{"version":3,"sources":["/Users/imustafa/Projects/LoStudio/client/pages/dashboards/[id]/edit.jsx"],"names":["useState","useEffect","v4","uuidv4","makeStyles","GridLayout","IconButton","Button","Card","Typography","ArrowLeft","SaveIcon","DashboardIcon","SettingsIcon","Drawer","DashboardActions","WidgetSettingsActions","WidgetSidemenu","DashboardSettings","useRouter","decideWidgetSettings","decideWidget","useStyles","list","width","fullList","EditDashboard","classes","router","id","setId","query","menuState","setMenuState","right","addWidget","settings","layout","setLayout","addType","setAddType","WidgetSettings","setWidgetSettings","SubDashboards","setSubDashboards","refresh","setRefresh","getProps","dashboard","getDashboardById","isSub","$SubDashboards","getSubDashboards","$WidgetSettings","getWidgetSettings","e","console","log","onLayoutChange","$event","layouts","map","item","$eventItem","filter","$item","i","Promise","all","updateWidgetSettings","err","toggleDrawer","side","open","event","type","key","addPredefinedWidget","widget","_","$widget","icon","saveWidget","createWidgetSettings","addWidgetToDashboard","onWidgetAdd","config","isFormControl","widgetSettingsId","layoutItem","x","y","w","h","maxW","isDraggable","isResizable","linkWidget","createSubWidget","sideList","Object","values","renderWidgets","display","flexDirection","back","outline","maxWidth","overflowX","alignItems","marginLeft","subDashboard","subDashboardId","title","justifySelf","flex","justifyContent","paddingRight","paddingBottom"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GridLayout from 'react-grid-layout'\nimport IconButton from '@material-ui/core/IconButton'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport ArrowLeft from '@material-ui/icons/ArrowLeft'\nimport SaveIcon from '@material-ui/icons/Save'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu'\nimport DashboardSettings from '../../../components/dashboards/settings/dashboard-settings'\nimport { useRouter } from 'next/router'\nimport { decideWidgetSettings, decideWidget } from '../../../helpers/decide-widgets'\n\nconst useStyles = makeStyles({\n  list: {\n    width: 500\n  },\n  fullList: {\n    width: 'auto'\n  }\n})\n\nconst EditDashboard = () => {\n  const classes = useStyles()\n  const router = useRouter()\n  const [id, setId] = useState(router.query.id)\n  const [menuState, setMenuState] = useState({ right: false, addWidget: false, settings: false })\n  const [layout, setLayout] = useState([])\n  const [addType, setAddType] = useState(null)\n  const [WidgetSettings, setWidgetSettings] = useState([])\n  const [SubDashboards, setSubDashboards] = useState([])\n  const [refresh, setRefresh] = useState(0)\n\n  useEffect(() => {\n    const getProps = async () => {\n      try {\n        const dashboard = await DashboardActions.getDashboardById(id)\n        if (!dashboard.isSub) {\n          const $SubDashboards = await DashboardActions.getSubDashboards({ id })\n          setSubDashboards($SubDashboards)\n        }\n        const $WidgetSettings = await DashboardActions.getWidgetSettings({ id })\n        setLayout($WidgetSettings)\n        setWidgetSettings($WidgetSettings)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getProps()\n  }, [id, refresh])\n\n  const onLayoutChange = async ($event) => {\n    try {\n      const layouts = layout.map(item => {\n        const $eventItem = $event.filter($item => $item.i == item.layout.i)[0]\n        return { ...item, layout: $eventItem }\n      })\n      await Promise.all(layouts.map(item => WidgetSettingsActions.updateWidgetSettings(item.id, item)))\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const addPredefinedWidget = async (widget, _) => {\n    try {\n      const $widget = { ...widget }\n      delete $widget.id; delete $widget.icon\n      $widget.layout.i = uuidv4()\n      const saveWidget = await WidgetSettingsActions.createWidgetSettings($widget)\n      await DashboardActions.addWidgetToDashboard(id, saveWidget.id)\n      setLayout([...layout, { layout: $widget.layout, type: $widget.type }])\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const onWidgetAdd = async (config, isFormControl = false, widgetSettingsId = null) => {\n    try {\n      const layoutItem = {\n        layout: { i: uuidv4(), x: 0, y: 0, w: 6, h: 11, maxW: 16, isDraggable: true, isResizable: true },\n        ...config\n      }\n      if (widgetSettingsId) {\n        delete layoutItem.layout\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem)\n        const linkWidget = await WidgetSettingsActions.createSubWidget(widgetSettingsId, saveWidget.id)\n      } else {\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem)\n        const linkWidget = await DashboardActions.addWidgetToDashboard(id, saveWidget.id)\n        layoutItem.id = saveWidget.id\n        setLayout([...layout, layoutItem])\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const addWidget = async (type, _) => {\n    setAddType(type)\n    setMenuState({ ...menuState, addWidget: true, right: false })\n  }\n\n  const sideList = () => (\n    <div className={classes.list} role=\"presentation\">\n      <WidgetSidemenu onWidgetClick={addWidget} addPredefinedWidget={addPredefinedWidget} widgetSettings={Object.values(WidgetSettings)} />\n    </div>\n  )\n\n  const renderWidgets = () => layout.map((item, i) => (\n    <div key={item.layout.i}>\n      {decideWidget(item)}\n    </div>\n  ))\n\n  return (\n    <div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        {sideList()}\n      </Drawer>\n\n      <Drawer anchor=\"right\" open={menuState.addWidget} onClose={toggleDrawer('addWidget', false)}>\n        {decideWidgetSettings(addType, onWidgetAdd)}\n      </Drawer>\n\n      <Drawer anchor=\"right\" open={menuState.settings} onClose={toggleDrawer('settings', false)}>\n        <DashboardSettings id={id} refresh={refresh} setRefresh={setRefresh} />\n      </Drawer>\n\n      <Card style={{ display: 'flex', flexDirection: 'row' }}>\n        <IconButton onClick={() => { router.back() }} aria-label=\"back\" size=\"medium\" style={{ outline: 'none' }}>\n          <ArrowLeft fontSize=\"default\" />\n        </IconButton>\n        <div style={{ display: 'flex', maxWidth: 700, overflowX: 'scroll', alignItems: 'center' }}>\n          <Button onClick={() => { setId(router.query.id) }} style={{ marginLeft: 10 }}>Main</Button>\n          {\n            SubDashboards.map(subDashboard => (\n              <div key={subDashboard.subDashboardId}>\n                <Button\n                  onClick={() => {\n                    setId(subDashboard.subDashboardId)\n                  }}\n                  style={{ marginLeft: 10 }}>\n                  <Typography noWrap>\n                    {subDashboard.subDashboard.title}\n                  </Typography>\n                </Button>\n              </div>\n            ))\n          }\n        </div>\n        <div style={{ justifySelf: 'flex-end', display: 'flex', flex: 1, justifyContent: 'flex-end', paddingRight: '10px' }}>\n          <Button style={{ outline: 'none' }} size=\"small\" startIcon={<SaveIcon />}>\n            Save\n          </Button>\n          <Button style={{ marginLeft: '10px', outline: 'none' }} size=\"small\" onClick={toggleDrawer('right', true)} startIcon={<DashboardIcon />}>\n            Widgets\n          </Button>\n          <Button style={{ marginLeft: '10px', outline: 'none' }} size=\"small\" onClick={toggleDrawer('settings', true)} startIcon={<SettingsIcon />}>\n            Settings\n          </Button>\n        </div>\n      </Card>\n\n      <div style={{ paddingBottom: '15px' }}>\n        <GridLayout className=\"layout\" cols={16} rowHeight={30} width={1920} layout={layout.map(item => item.layout)} onLayoutChange={onLayoutChange}>\n          {renderWidgets()}\n        </GridLayout>\n      </div>\n    </div>\n  )\n};\n\n// EditDashboard.getInitialProps = async (req) => {\n//   const Authorization = Cookies(req).id\n//   const { id } = req.query\n//   const WidgetSettings = await DashboardActions.getWidgetSettings({ Authorization, id })\n//   const SubDashboards = await DashboardActions.getSubDashboards({ Authorization, id })\n//   return { WidgetSettings, SubDashboards }\n// }\n\nexport default EditDashboard;"]},"metadata":{},"sourceType":"module"}