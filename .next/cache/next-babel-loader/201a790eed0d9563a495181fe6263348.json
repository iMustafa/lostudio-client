{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions';\nconst useStyles = makeStyles({\n  measureConditionFieldTitle: {\n    fontSize: 12,\n    fontWeight: 'bold'\n  }\n});\n\nconst MeasureConditionItem = ({\n  widget,\n  measureCondition,\n  key,\n  setRefresh,\n  refresh\n}) => {\n  const classes = useStyles();\n  const {\n    0: showSpinner,\n    1: setShowSpinner\n  } = useState(false);\n\n  const removeMeasureCondition = async () => {\n    try {\n      setShowSpinner(true);\n      const $measureCondition = await WidgetSettingsActions.deleteWidgetSettingsMeasureConditions(widget.id, measureCondition.id);\n      setShowSpinner(false);\n      setRefresh(refresh + 1);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(Card, {\n    style: {\n      padding: 15,\n      marginBottom: 15\n    },\n    key: key\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    className: classes.measureConditionFieldTitle\n  }, \"Field\"), __jsx(Typography, null, measureCondition.field)), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    className: classes.measureConditionFieldTitle\n  }, \"Expression\"), __jsx(Typography, null, measureCondition.expression)), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(Typography, {\n    className: classes.measureConditionFieldTitle\n  }, \"Color\"), __jsx(Typography, null, measureCondition.color))), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    }\n  }, __jsx(ArrowUpwardIcon, null), __jsx(Typography, null, measureCondition.minValue)), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center'\n    }\n  }, __jsx(ArrowDownwardIcon, null), __jsx(Typography, null, measureCondition.maxValue))), showSpinner ? __jsx(CircularProgress, null) : __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true,\n    onClick: removeMeasureCondition\n  }, __jsx(DeleteIcon, {\n    style: {\n      color: '#F00'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Delete\"))), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Button, {\n    fullWidth: true\n  }, __jsx(EditIcon, {\n    style: {\n      color: '#3F51B5'\n    }\n  }), __jsx(Typography, {\n    style: {\n      marginLeft: 10\n    }\n  }, \"Edit\")))));\n};\n\nexport default MeasureConditionItem;","map":null,"metadata":{},"sourceType":"module"}