{"version":3,"file":"0.js","sources":["webpack:///./components/widgets/gantt-chart/gantt-chart-widget-toolbar.jsx","webpack:///./components/widgets/gantt-chart/gantt-chart-widget.jsx","webpack:///./components/widgets/gantt-chart/index.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Toolbar extends Component {\r\n  \r\n  handleZoomChange = (e) => {\r\n    if (this.props.onZoomChange) {\r\n      this.props.onZoomChange(e.target.value)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const zoomRadios = ['Hours', 'Days', 'Months'].map((value) => {\r\n      const isActive = this.props.zoom === value;\r\n      return (\r\n        <label key={value} className={`radio-label ${isActive ? 'radio-label-active' : ''}`}>\r\n          <input type='radio'\r\n            checked={isActive}\r\n            onChange={this.handleZoomChange}\r\n            value={value} />\r\n          {value}\r\n        </label>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"tool-bar\">\r\n        <b>Zooming: </b>\r\n        {zoomRadios}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { gantt } from 'dhtmlx-gantt'\r\n\r\nexport default class Gantt extends Component {\r\n\r\n  setZoom(value) {\r\n    switch (value) {\r\n      case 'Hours':\r\n        gantt.config.scale_unit = 'day'\r\n        gantt.config.date_scale = '%d %M'\r\n\r\n        gantt.config.scale_height = 60\r\n        gantt.config.min_column_width = 30\r\n        gantt.config.subscales = [\r\n          { unit: 'hour', step: 1, date: '%H' }\r\n        ]\r\n        break\r\n      case 'Days':\r\n        gantt.config.min_column_width = 70\r\n        gantt.config.scale_unit = 'week'\r\n        gantt.config.date_scale = '#%W'\r\n        gantt.config.subscales = [\r\n          { unit: 'day', step: 1, date: '%d %M' }\r\n        ]\r\n        gantt.config.scale_height = 60\r\n        break\r\n      case 'Months':\r\n        gantt.config.min_column_width = 70\r\n        gantt.config.scale_unit = 'month'\r\n        gantt.config.date_scale = '%F'\r\n        gantt.config.scale_height = 60\r\n        gantt.config.subscales = [\r\n          { unit: 'week', step: 1, date: '#%W' }\r\n        ]\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return this.props.zoom !== nextProps.zoom\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    gantt.render()\r\n  }\r\n\r\n  componentDidMount() {\r\n    gantt.config.xml_date = \"%Y-%m-%d %H:%i\"\r\n    const { tasks } = this.props\r\n    gantt.init(this.ganttContainer)\r\n    console.log(tasks)\r\n    gantt.parse(tasks)\r\n  }\r\n\r\n  render() {\r\n    const { zoom } = this.props\r\n    this.setZoom(zoom)\r\n    return (\r\n      <div\r\n        ref={(input) => { this.ganttContainer = input }}\r\n        style={{ width: '100%', height: '90vh' }}\r\n      ></div>\r\n    )\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport Gantt from './gantt-chart-widget'\r\nimport Toolbar from './gantt-chart-widget-toolbar'\r\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nconst GanttChartWidget = () => {\r\n  const [widget, setWidget] = useState({})\r\n  const [tasks, setTasks] = useState({ data: [], links: [] })\r\n  const [isLoadingData, setIsLoadingData] = useState(true)\r\n  const [zoom, setZoom] = useState('Days')\r\n\r\n  const handleZoomChange = (zoom) => {\r\n    setZoom(zoom)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const Widget = await WidgetSettingsActions.getWidgetSettingsById(\"5e78a808f2c42d5a58cc2cdc\")\r\n        const Result = await WidgetSettingsActions.executeWidgetQuery(\"5e78a808f2c42d5a58cc2cdc\")\r\n        setTasks({ data: Result[0].data, links: Result[0].links })\r\n        setWidget({ ...Widget })\r\n        setIsLoadingData(false)\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    getData()\r\n  }, [])\r\n\r\n  const renderGunttChart = () => isLoadingData || !widget ? (<CircularProgress />) : (\r\n    <div>\r\n      <div className=\"zoom-bar\">\r\n        <Toolbar\r\n          zoom={zoom}\r\n          onZoomChange={handleZoomChange}\r\n        />\r\n      </div>\r\n      <div className=\"gantt-container\">\r\n        <Gantt tasks={tasks} zoom={zoom} />\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    renderGunttChart()\r\n  )\r\n}\r\n\r\nexport default GanttChartWidget"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AA7BA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AA/DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;;;;A","sourceRoot":""}