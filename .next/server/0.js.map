{"version":3,"file":"0.js","sources":["webpack:///./actions/dashboard.actions.ts","webpack:///./actions/datasource.actions.ts","webpack:///./actions/widgetSettings.actions.ts","webpack:///./components/grapes/chart-widgets/line-chart/Chart.js","webpack:///./components/grapes/chart-widgets/line-chart/ParserHtmlCaseSensitive.js","webpack:///./components/grapes/chart-widgets/line-chart/actions.js","webpack:///./components/grapes/chart-widgets/line-chart/blocks.js","webpack:///./components/grapes/chart-widgets/line-chart/commands.js","webpack:///./components/grapes/chart-widgets/line-chart/components.jsx","webpack:///./components/grapes/chart-widgets/line-chart/consts.js","webpack:///./components/grapes/chart-widgets/line-chart/index.js","webpack:///./components/grapes/chart-widgets/line-chart/panels.js","webpack:///./components/grapes/no-ssr.jsx","webpack:///./components/grapes/table-widgets/html-table-widget/Material.js","webpack:///./components/grapes/table-widgets/html-table-widget/ParserHtmlCaseSensitive.js","webpack:///./components/grapes/table-widgets/html-table-widget/blocks.js","webpack:///./components/grapes/table-widgets/html-table-widget/commands.js","webpack:///./components/grapes/table-widgets/html-table-widget/components.jsx","webpack:///./components/grapes/table-widgets/html-table-widget/consts.js","webpack:///./components/grapes/table-widgets/html-table-widget/index.js","webpack:///./components/grapes/table-widgets/html-table-widget/panels.js"],"sourcesContent":["import axios from \"axios\";\nimport config from \"next/config\";\nimport Cookie from \"js-cookie\";\nimport User from \"../types/users.types\";\nimport Dashboard from \"../types/dashboard.types\";\nimport Datasource from \"../types/datasource.types\";\nimport Widget from \"../types/widget.types\";\nimport WidgetSettings from \"../types/widgetSettings.type\";\n\nconst { API_URL } = config().publicRuntimeConfig;\n\nexport default class DashboardActions {\n  public static async createDashboard({\n    Authorization,\n    dashboard,\n  }: {\n    dashboard: Dashboard;\n    Authorization?: string;\n  }): Promise<Dashboard> {\n    return axios\n      .post(`${API_URL}/Dashboards`, dashboard, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getDashboards({\n    Authorization,\n    query,\n  }: {\n    Authorization?: string;\n    query?: any;\n  }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n        params: {\n          filter: { where: { or: [{ isSub: false }, { type: \"dashboard\" }] } },\n        },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async getWebpages({\n    Authorization,\n  }: {\n    Authorization?: string;\n  }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n        params: { filter: { where: { type: \"webpage\" } } },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async linkSubDashboard({\n    id,\n    subDashboardId,\n  }: {\n    id: string;\n    subDashboardId: string;\n  }): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/subDashboards`,\n        { dashboardId: id, subDashboardId },\n        { headers: { Authorization: Cookie.get(\"id\") } }\n      )\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async unLinkSubDashboard({\n    id,\n    subDashboardId,\n  }: {\n    id: string;\n    subDashboardId: string;\n  }): Promise<any> {\n    return axios\n      .delete(`${API_URL}/Dashboards/${id}/subDashboards/${subDashboardId}`, {\n        headers: { Authorization: Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async getSubDashboards({\n    Authorization,\n    id,\n  }: {\n    Authorization?: string;\n    id: string;\n  }): Promise<any> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/subDashboards`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n        params: { filter: { include: \"subDashboard\" } },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async getDashboardById(id: string): Promise<Dashboard> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}`, {\n        headers: { Authorization: Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async updateDashboard(id: string, data): Promise<Dashboard> {\n    return axios\n      .patch(`${API_URL}/Dashboards/${id}`, data)\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async deleteDashboard(data: Datasource): Promise<Dashboard> {\n    return axios\n      .post(\"\", {})\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getWidgetSettings({\n    Authorization,\n    id,\n  }: {\n    Authorization?: string;\n    id: string;\n  }): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/widgetSettings`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getCollaborators({\n    Authorization,\n    id,\n  }: {\n    Authorization?: string;\n    id: string;\n  }): Promise<Array<User>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/collaborators`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getCollaboratorations({\n    Authorization,\n  }: {\n    Authorization?: string;\n  }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards/collaborations`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async addCollaborator({\n    Authorization,\n    email,\n    id,\n    editor,\n    viewer,\n  }: {\n    Authorization?: string;\n    email: string;\n    id: string;\n    editor: boolean;\n    viewer: boolean;\n  }): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/dashboardRoleMappings`,\n        { email, editor, viewer },\n        { headers: { Authorization: Authorization || Cookie.get(\"id\") } }\n      )\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async addWidgetToDashboard(\n    id: string,\n    fk: string\n  ): Promise<Dashboard> {\n    return axios\n      .put(\n        `${API_URL}/Dashboards/${id}/widgetSettings/rel/${fk}`,\n        { dashboardId: id, widgetSettingsId: fk },\n        { headers: { Authorization: Cookie.get(\"id\") } }\n      )\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async createWidgetInDashboard(\n    id: string,\n    widgetData: any\n  ): Promise<Dashboard> {\n    return axios\n      .post(`${API_URL}/Dashboards/${id}/widgetSettings`, widgetData, {\n        headers: { Authorization: Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async removeWidgetFromDashboard(\n    data: Datasource\n  ): Promise<Dashboard> {\n    return axios\n      .post(\"\", {})\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n}\n","import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport Datasource from '../types/datasource.types'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class DatasourceActions {\n\n  public static async createDatasource(data: Datasource): Promise<Datasource> {\n    return axios\n      .post(`${API_URL}/DataSources`, data, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async updateDatasource(id: string, data: Datasource): Promise<Datasource> {\n    return axios\n      .patch(`${API_URL}/DataSources/${id}`, data, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDatasources({ Authorization, query }: { Authorization?: string, query?: any }): Promise<Array<Datasource>> {\n    return axios\n      .get(`${API_URL}/DataSources`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getUserDatasources(id: string, query: any): Promise<Array<Datasource>> {\n    return axios\n      .get(`${API_URL}/users/${id}/dataSrouces`, { headers: { Authorization: Cookie.get('id') }, params: { ...query } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDatasourceById(id: string): Promise<Datasource> {\n    return axios\n      .get(`${API_URL}/DataSources/${id}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async removeDatasource(id: string): Promise<Datasource> {\n    return axios\n      .delete(`${API_URL}/DataSources/${id}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDocList(id: string): Promise<any> {\n    return axios\n      .get(`${API_URL}/DataSources/${id}/doc-list`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getFieldList(id: string, docId: string): Promise<any> {\n    return axios\n      .get(`${API_URL}/DataSources/${id}/field-list`, { headers: { Authorization: Cookie.get('id') }, params: { docId } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async queryDatasource(query: string): Promise<any> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n}\n\n","import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport User from '../types/users.types'\nimport Dashboard from '../types/dashboard.types'\nimport Datasource from '../types/datasource.types'\nimport Widget from '../types/widget.types'\nimport MeasureCondition from '../types/measureCondition.types'\nimport WidgetSettings from '../types/widgetSettings.type'\nimport { promises } from 'dns'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class WidgetSettingsActions {\n\n  public static async addWidgetSettingsDocument(widgetSettingsId: string, data): Promise<any> {\n    return axios\n      .post(`${API_URL}/WidgetSettings/${widgetSettingsId}/add-document`, data, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async editWidgetSettingsDocument(widgetSettingsId: string, data, keyId: string): Promise<any> {\n    return axios\n      .post(`${API_URL}/WidgetSettings/${widgetSettingsId}/edit-document`, data, { headers: { Authorization: Cookie.get('id') }, params: { keyId } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteWidgetSettingsDocument(widgetSettingsId: string, keyId: string): Promise<any> {\n    return axios\n      .delete(`${API_URL}/WidgetSettings/${widgetSettingsId}/delete-document`, { headers: { Authorization: Cookie.get('id') }, params: { keyId } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async createWidgetSettings(widgetSettings: WidgetSettings): Promise<WidgetSettings> {\n    return axios\n      .post(`${API_URL}/WidgetSettings`, widgetSettings, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getSubWidgets(widgetSettingsId: string): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings`,\n        {\n          headers: {\n            Authorization: Cookie.get('id')\n          },\n          params: {\n            filter: { include: 'subWidgetSettings' }\n          }\n        }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async exportWidgetData(widgetSettingsId: string, format: string, method: string, selectedFields: Array<any>): Promise<any> {\n    if (format == 'email') {\n      return axios\n        .get(\n          `${API_URL}/WidgetSettings/${widgetSettingsId}/export-data`,\n          {\n            headers: { Authorization: Cookie.get('id') },\n            params: { format, selectedFields, method }\n          }\n        )\n        .then(res => res.data)\n        .catch(err => err.response)\n    } else {\n      window.open(`${API_URL}/WidgetSettings/${widgetSettingsId}/export-data?format=${format}&method=${method}&selectedFields=${selectedFields}`)\n    }\n  }\n\n  public static async createSubWidget(widgetSettingsId: string, subWidgetSettingsId: string): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings`,\n        { subWidgetSettingsId },\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getWidgetSettingsMeasureConditions(widgetSettingsId: string): Promise<Array<MeasureCondition>> {\n    return axios\n      .get(`${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async createWidgetSettingsMeasureConditions(widgetSettingsId: string, measureCondition: MeasureCondition): Promise<MeasureCondition> {\n    return axios\n      .post(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions`,\n        measureCondition,\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteWidgetSettingsMeasureConditions(widgetSettingsId: string, measureConditionId: string): Promise<any> {\n    return axios\n      .delete(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions/${measureConditionId}`,\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteSubWidget(widgetSettingsId: string, subWidgetSettingsId: string): Promise<any> {\n    return axios\n      .delete(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings/${subWidgetSettingsId}`,\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getFormGroupWidgets(): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(\n        `${API_URL}/WidgetSettings`,\n        {\n          headers: {\n            Authorization: Cookie.get('id')\n          },\n          params: {\n            filter: { where: { type: \"Form Group\" } }\n          }\n        }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async getWidgetSettings(): Promise<Array<WidgetSettings>> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async getWidgetSettingsById(id: string, Authorization?: string): Promise<WidgetSettings> {\n    return axios\n      .get(`${API_URL}/WidgetSettings/${id}`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async updateWidgetSettings(id: string, widgetSettings: WidgetSettings): Promise<WidgetSettings> {\n    return axios\n      .patch(`${API_URL}/WidgetSettings/${id}`, widgetSettings, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async deleteWidgetSettings(id: string): Promise<WidgetSettings> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async executeWidgetQuery(id: string, Authorization?: string): Promise<any> {\n    return axios\n      .get(`${API_URL}/WidgetSettings/${id}/execute-query`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n}","import React from \"react\";\n\nimport { VictoryChart, VictoryTheme, VictoryLine } from \"victory\";\n\nconst Chart = () => {\n  return (\n    <div>\n      <VictoryChart theme={VictoryTheme.material}>\n        <VictoryLine\n          interpolation=\"natural\"\n          style={{\n            data: { stroke: \"#c43a31\" },\n            parent: { border: \"1px solid #ccc\" },\n          }}\n          data={[\n            { x: 1, y: 2 },\n            { x: 2, y: 3 },\n            { x: 3, y: 5 },\n            { x: 4, y: 4 },\n            { x: 5, y: 7 },\n          ]}\n          labels={({ datum }) => `x: ${datum.x} | y: ${datum.y}`}\n          animate={{\n            duration: 2000,\n            onLoad: { duration: 1000 },\n          }}\n        />\n      </VictoryChart>\n    </div>\n  );\n};\n\nexport default Chart;\n","import { each, isString } from 'underscore';\nimport { parse as nodeHtmlParser } from \"node-html-parser\";\nimport XRegExp from \"xregexp\";\n\nwindow.nodeHtmlParser = nodeHtmlParser;\n\n/**\n * Parses an HTML string into its HTML and CSS component representation keeping case of tags and attributes. This\n * is necessary in case you want React compatible JSX tags in the template, in which case the react components must start\n * wih uppercase and also the camel casing of attributes is importane (ie. className vs classname)\n *\n * This function is based on src/parser/model/ParserHtml.js. For parsing we are using node-html-parser instead of\n * the browser's DOM to keep the case of tags and attributes. The code is mostly the same  as in ParserHtml.js\n * by maing the objects created by  node-html-parser compatible with the DOM representation.\n *\n * @param config usual grapesjs config\n * @returns parser function\n */\nexport default config => {\n    var TEXT_NODE = 'span';\n    var c = config;\n    var modelAttrStart = 'data-gjs-';\n\n    return {\n        compTypes: '',\n\n        modelAttrStart,\n\n        /**\n         * Extract component props from an attribute object\n         * @param {Object} attr\n         * @returns {Object} An object containing props and attributes without them\n         */\n        splitPropsFromAttr(attr = {}) {\n            const props = {};\n            const attrs = {};\n\n            each(attr, (value, key) => {\n                if (key.indexOf(this.modelAttrStart) === 0) {\n                    const modelAttr = key.replace(modelAttrStart, '');\n                    const valueLen = value.length;\n                    const valStr = value && isString(value);\n                    const firstChar = valStr && value.substr(0, 1);\n                    const lastChar = valStr && value.substr(valueLen - 1);\n                    value = value === 'true' ? true : value;\n                    value = value === 'false' ? false : value;\n\n                    // Try to parse JSON where it's possible\n                    // I can get false positive here (eg. a selector '[data-attr]')\n                    // so put it under try/catch and let fail silently\n                    try {\n                        value =\n                            (firstChar == '{' && lastChar == '}') ||\n                            (firstChar == '[' && lastChar == ']')\n                                ? JSON.parse(value)\n                                : value;\n                    } catch (e) {}\n\n                    props[modelAttr] = value;\n                } else {\n                    attrs[key] = value;\n                }\n            });\n\n            return {\n                props,\n                attrs\n            };\n        },\n\n        /**\n         * Given a string with html (jsx). Attributes having JSX expressions will be quoted to look like\n         * actual HTML attributes\n         * @param {*} html\n         * @return html with quoted JSX attributes\n         *\n         * https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses\n         */\n        quoteJsxExpresionsInAttributes(html) {\n            let found = XRegExp.matchRecursive(html, \"{\", \"}\", \"g\");\n            for (let i = 0; i < found.length; i++) {\n                // (value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`\n                // --> {(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                let pattern = \"{\" + found[i] + \"}\";\n                let lastStartPos = 0;\n                // Find pattern until we reach and of html\n                while (true) {\n                    let needsQuote = false;\n                    // get next match position\n                    let matchPos = html.indexOf(pattern, lastStartPos);\n                    if (matchPos === -1) {\n                        break;\n                    }\n                    // We will look back 1 and 2 characters\n                    let oneCharBeforePos = matchPos - 1;\n                    let twoCharBeforePos = matchPos - 2;\n                    if (twoCharBeforePos > 0 && oneCharBeforePos > 0) {\n                        // Need to quote if have sg like this:\n                        //   formatValue={(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                        // (ie: if patterns comes atfre and equals sime, but not =\")\n                        // But no need to quote if:\n                        //    formatValue=\"{(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\"\n                        //    <Timer.Days/>{this.model.attributes.displayLabels ? \" \"+this.model.attributes.labels.labelDays+\" \" : ', '}\n                        needsQuote =\n                            html.substring(twoCharBeforePos, twoCharBeforePos + 2) !== '=\"' &&\n                            html.substring(oneCharBeforePos, oneCharBeforePos + 1) === \"=\";\n                    }\n\n                    // If need to quote: replace patterns with quoted version also escaping some HTML entities\n                    if (needsQuote) {\n                        let replacement =\n                            '\"{' +\n                            found[i]\n                                .replace(\"<\", \"&lt;\")\n                                .replace(\">\", \"&gt;\")\n                                .replace(\"&\", \"&amp;\")\n                            + '}\"';\n                        html = html.replace(pattern, replacement);\n                        lastStartPos = matchPos + replacement.length;\n                    } else {\n                        lastStartPos = matchPos + pattern.length;\n                    }\n\n                    // No lastStartPos placed after the processed string\n                }\n            }\n            return html;\n        },\n\n\n\n        /**\n         * Unquote attributes containg JSX previously quoted using quoteJsxExpresionsInAttributes\n         * @param html\n         */\n        unquoteJsxExpresionsInAttributes(html) {\n            let found = html.match(/=[\"']{.*}[\"']/g);\n            if (!found) {\n                return html;\n            }\n            for (let i = 0; i < found.length; i++) {\n                let pattern = found[i];\n                let replacement = pattern.startsWith('=\"{')\n                    ? pattern.replace('\"{', \"{\").replace('}\"', \"}\")\n                    : pattern.replace(\"{'\", \"{\").replace(\"}'\", \"}\");\n                replacement = replacement\n                    .replace(\"&lt;\", \"<\")\n                    .replace(\"&gt;\", \">\")\n                    .replace(\"&amp;\", \"&\");\n                html = html.replace(pattern, replacement);\n            }\n            return html;\n        },\n\n\n        /**\n         * Parse style string to object\n         * @param {string} str\n         * @return {Object}\n         * @example\n         * var stl = ParserHtml.parseStyle('color:black; width:100px; test:value;');\n         * console.log(stl);\n         * // {color: 'black', width: '100px', test: 'value'}\n         */\n        parseStyle(str) {\n            var result = {};\n            var decls = str.split(';');\n            for (var i = 0, len = decls.length; i < len; i++) {\n                var decl = decls[i].trim();\n                if (!decl) continue;\n                var prop = decl.split(':');\n                result[prop[0].trim()] = prop\n                    .slice(1)\n                    .join(':')\n                    .trim();\n            }\n            return result;\n        },\n\n        /**\n         * Parse class string to array\n         * @param {string} str\n         * @return {Array<string>}\n         * @example\n         * var res = ParserHtml.parseClass('test1 test2 test3');\n         * console.log(res);\n         * // ['test1', 'test2', 'test3']\n         */\n        parseClass(str) {\n            const result = [];\n            const cls = str.split(' ');\n            for (let i = 0, len = cls.length; i < len; i++) {\n                const cl = cls[i].trim();\n                if (!cl) continue;\n                result.push(cl);\n            }\n            return result;\n        },\n\n        toAttrArray(obj){\n            var attrArr = [];\n            Object.keys(obj).map(key => {\n                attrArr.push({'nodeName':key, 'nodeValue':obj[key]})\n            })\n            return attrArr;\n        },\n\n        /**\n         * Get data from the node element\n         * @param  {HTMLElement} el DOM element to traverse\n         * @return {Array<Object>}\n         */\n        parseNode(el) {\n            const result = [];\n            const nodes = el.childNodes;\n\n            for (var i = 0, len = nodes.length; i < len; i++) {\n                const node = nodes[i];\n\n                // DOM copmatibility\n                node.nodeValue = node.rawText;\n                node.content = node.rawText;\n\n                // Make attrs compatible with DOM representation\n                let attrs = [];\n                    attrs = (typeof node.attributes == 'object'\n                        ? this.toAttrArray(node.attributes)\n                        :  node.attributes)\n                        || []\n                    const attrsLen = attrs.length;\n                const nodePrev = result[result.length - 1];\n                const nodeChild = node.childNodes.length;\n                const ct = this.compTypes;\n                let model = {};\n\n                if (ct) {\n                    let obj = '';\n                    let type =\n                        node.getAttribute && node.getAttribute(`${modelAttrStart}type`);\n                    if (!type) {\n                        type = node.attributes && node.attributes[`${modelAttrStart}type`];\n                    }\n\n                    if (type) {\n                        model = { type };\n                    } else {\n                       \n                        for (let it = 0; it < ct.length; it++) {\n                            const compType = ct[it];\n                            obj = compType.model.isComponent(node);\n\n                            if (obj) {\n                                if (typeof obj !== 'object') {\n                                    obj = { type: compType.id };\n                                }\n                                break;\n                            }\n                        }\n\n                        model = obj;\n                    }\n                }\n\n                model.tagName = node.tagName;\n\n                if (attrsLen) {\n                    model.attributes = {};\n                }\n\n                for (let j = 0; j < attrsLen; j++) {\n                    const nodeName = attrs[j].nodeName;\n                    let nodeValue = attrs[j].nodeValue;\n                    // if (nodeName == \"formatValue\") {\n                    //     debugger;\n                    // }\n\n                    // Isolate attributes\n                    if (nodeName == 'style') {\n                        model.style = this.parseStyle(nodeValue);\n                    } else if (nodeName == 'class') {\n                        model.classes = this.parseClass(nodeValue);\n                    } else if (nodeName == 'contenteditable') {\n                        continue;\n                    } else if (nodeName.indexOf(modelAttrStart) === 0) {\n                        const modelAttr = nodeName.replace(modelAttrStart, '');\n                        const valueLen = nodeValue.length;\n                        const firstChar = nodeValue && nodeValue.substr(0, 1);\n                        const lastChar = nodeValue && nodeValue.substr(valueLen - 1);\n                        nodeValue = nodeValue === 'true' ? true : nodeValue;\n                        nodeValue = nodeValue === 'false' ? false : nodeValue;\n\n                      \n                        try {\n                            nodeValue =\n                                (firstChar == '{' && lastChar == '}') ||\n                                (firstChar == '[' && lastChar == ']')\n                                    ? JSON.parse(nodeValue)\n                                    : nodeValue;\n                        } catch (e) {}\n\n                        model[modelAttr] = nodeValue;\n                    } else {\n                        model.attributes[nodeName] = nodeValue;\n                    }\n                }\n\n                if (nodeChild && !model.components) {\n                    const firstChild = node.childNodes[0];\n                    firstChild.nodeValue = firstChild.rawText;\n\n                    if (nodeChild === 1 && firstChild.nodeType === 3) {\n                        !model.type && (model.type = 'text');\n                        model.content = firstChild.nodeValue;\n                    } else {\n                        model.components = this.parseNode(node);\n                    }\n                }\n\n                if (model.type == 'textnode') {\n                    model.content = node.nodeValue;\n\n                    if (nodePrev && nodePrev.type == 'textnode') {\n                        nodePrev.content += model.content;\n                        continue;\n                    }\n\n                    if (!config.keepEmptyTextNodes) {\n                        const content = node.nodeValue;\n                        if (content != ' ' && !content.trim()) {\n                            continue;\n                        }\n                    }\n                }\n\n                \n                const comps = model.components;\n                if (!model.type && comps) {\n                    let allTxt = 1;\n                    let foundTextNode = 0;\n\n                    for (let ci = 0; ci < comps.length; ci++) {\n                        const comp = comps[ci];\n                        const cType = comp.type;\n\n                        if (\n                            ['text', 'textnode'].indexOf(cType) < 0 &&\n                            c.textTags.indexOf(comp.tagName) < 0\n                        ) {\n                            allTxt = 0;\n                            break;\n                        }\n\n                        if (cType == 'textnode') {\n                            foundTextNode = 1;\n                        }\n                    }\n\n                    if (allTxt && foundTextNode) {\n                        model.type = 'text';\n                    }\n                }\n\n                if (!model.tagName && model.type != 'textnode') {\n                    continue;\n                }\n\n                result.push(model);\n            }\n\n            return result;\n        },\n\n        /**\n         * Parse HTML string to a desired model object\n         * @param  {string} str HTML string\n         * @param  {ParserCss} parserCss In case there is style tags inside HTML\n         * @return {Object}\n         *\n         */\n        parse(str, parserCss) {\n            console.log(\"html\", str, parserCss);\n\n            var config = (c.em && c.em.get('Config')) || {};\n            var res = { html: '', css: '' };\n\n            var quoted = this.quoteJsxExpresionsInAttributes(str);\n            let wrappedInDiv = false;\n            if (!quoted.startsWith('<')) {\n                quoted = '<div>'+quoted+'</div>';\n                wrappedInDiv = true;\n            }\n            const dom = nodeHtmlParser(quoted);\n            var result = this.parseNode(dom);\n\n            if (result.length == 1) {\n                result = result[0];\n            }\n\n            if (wrappedInDiv) {\n                if (result.components) {\n                    result = result.components;\n                }\n                \n                else {\n                    delete result.tagName;\n                    result.type = \"textnode\";\n                }\n            }\n            res.html = result;\n\n           \n            if (parserCss) {\n                var el = document.createElement('div');\n                el.innerHTML = str;\n                var styleStr = '';\n                var styles = el.querySelectorAll('style');\n                var j = styles.length;\n\n                while (j--) {\n                    styleStr = styles[j].innerHTML + styleStr;\n                    styles[j].parentNode.removeChild(styles[j]);\n                }\n\n                if (styleStr) res.css = parserCss.parse(styleStr);\n            }\n\n            return res;\n        }\n    };\n};","import axios from 'axios'\n\naxios.defaults.headers = {\n  Authorization: 'B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ'\n}\n\nconst APP_URL = 'http://173.249.14.149:3001/api'\n//http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb?access_Token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n//http://173.249.14.149:3001/api/Dashboards/5ef370de14213070188a41eb/widgetSettings?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n\nexport const addWidget = async (widgetData, dashboardId = '5ef370de14213070188a41eb') => {\n  return axios\n    .post(\n      `${APP_URL}/Dashboards/${dashboardId}/widgetSettings`,\n      widgetData\n    )\n}\nexport const updatedash = async (dashboardId, widgetData) => {\n  return axios\n    .put(\n      `${APP_URL}/Dashboards/${dashboardId}`,\n      {grapes: widgetData}\n    )\n}\n\n//http://173.249.14.149:3001/api/widgetsettings/5ef7454a14213070188a46f9?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ\n\nexport const updateWidget = async (widgetId, widgetData) => {\n  return axios\n    .put(\n      `${APP_URL}/WidgetSettings/${widgetId}`,\n      widgetData\n    )\n}\n\nexport const getWidgets = async (dashboardId = '5ef370de14213070188a41eb') => {\n  return axios\n    .get(\n      `${APP_URL}/Dashboards/${dashboardId}/widgetSettings`\n    )\n}\n\nexport const getWidgetData = async (widgetId) => {\n  return axios.get(\n    `${APP_URL}/WidgetSettings/${widgetId}/execute-query`,\n  )\n}\n","\nimport {\n    ChartRef\n} from './consts';\n\nexport default function (editor, opt = {}) {\n\n    const c = opt;\n  const bm = editor.BlockManager;   \nbm.remove(ChartRef);\n    bm.add(ChartRef, {\n      label: 'Chart',\n      category: c.blockLabel,\n      attributes: { class: 'fa fa-line-chart' },\n      content: `\n        <div style=\"width: 30vw;\" data-gjs-type=\"${ChartRef}\"></div>\n      `\n    });\n  \n}\n","/**\n * Adds loadHtmltemplate command\n */\nimport axios from 'axios'\nimport {\n  addWidget,\n  updateWidget,\n  getWidgets,\n  getWidgetData\n} from './actions'\nimport {loadHtmltemplate} from \"./consts\";\n\nexport default (editor, config) => {\n  const cm = editor.Commands;\n\n  cm.add(loadHtmltemplate, e => {\n      const pHtml = e.getModel().get('Parser').parserHtml;\n      // JSX expression in attributes are quoted, so unquote them before passing on\n      let html = pHtml.unquoteJsxExpresionsInAttributes(e.getHtml());\n      config.setHtmlString(html);\n      config.setCssString(e.getCss());\n  });\n  cm.add\n    ('save-db',\n      {\n        run: function (editor, sender) {\n          sender && sender.set('active');\n          editor.store();\n        }\n      });\n \n  \n}\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport axios from 'axios'\n\n\nimport {ChartRef} from './consts'\nimport Chart from './Chart'\nimport {\n\taddWidget,\n\tupdateWidget,\n\tgetWidgets,\n\tgetWidgetData\n} from './actions'\n\n\n\nexport default function (editor, opt = {}) {\n\n\tlet updateTrait = []\n\tconst domc = editor.DomComponents\n\tconst defaultType = domc.getType('default')\n\tconst defaultModel = defaultType.model\n\tconst defaultView = defaultType.view\n\n\n\n\tfunction displayOptions(displayDevice) {\n\t\tlet newObj = [];\n\n\t\tfor (var key in displayDevice) {\n\t\t\tif (displayDevice[key] === true)\n\t\t\t\tnewObj.push(key);\n\t\t}\n\n\t\treturn newObj;\n\t}\n\n\t\n\n\t\n\tdomc.addType(ChartRef, {\n\t\n\t\tmodel: defaultModel.extend({\n\t\t\tdefaults: {\n\t\t\t\t...defaultModel.prototype.defaults,\n\t\t\t\tdroppable: true,\n\t\t\t\tdefaultData: [[{ \"Name\": \"Henery\", \"Location\": \"Usa\", \"id\": \"5c24dc26dc10670017e40921\", \"last Seen\": \"2020-06-10T19:51:40.452Z\", \"notes\": \"\" }]],\n\t\t\t\tprevData: [],\n\t\t\t\tdbId:[],\n\t\t\t\ttraits:\n\t\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\tname:'modify',\n\t\t\t\ttype: 'button',\n\t\t\t\ttext: `Modify`,\n\t\t\t\tfull: true, \n\t\t\t\t\tcommand: editor => axios.get('http://173.249.14.149:3001/api/DataSources?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ')\n\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\tlet component = editor.getSelected()\n\t\t\t\t\t\t\tcomponent.addTrait({\n\t\t\t\t\t\t\t\tname: \"dataSource\",\n\t\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\t\tchangeProp: 1,\n\t\t\t\t\t\t\t\toptions: res.data.map(op => {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t{ id: op.id, name: op.title }\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tcomponent.removeTrait('modify')\n\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\ttoHTML: function () {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\n\t\t\t}, init() {\n\n\t\t\t\tthis.listenTo(this, this.handlePropChange);\n\t\t\t\tif (this.attributes.prevData.length >= 1) {\n\t\t\t\t\tthis.getTrait('modify').set('text', \"Edit\")\n\t\t\t\t\tthis.addTrait({\n\t\t\t\t\t\t \n\t\t\t\t\t\t\tname: 'Prev',\n\t\t\t\t\t\t\ttype: 'pre',\n\t\t\t\t\t\ttext: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].dataSourceId === '5ec035f7bb377b08ebc8938a' ? \"MongoDB\" : this.attributes.prevData[0].dataSourceId}</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.docId}</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields.toString().replace(/,/g, ' | ')}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${this.attributes.prevData[0].config.primaryKey}</span><br/>\n\t\t\t\t\t`\n\t\t\t\t\t\n\t\t\t\t\t }, {at:0})\n\t\t\t\t}\n\t\t\t\tif (this.attributes.dataSource) {\n\t\t\t\t\tthis.attributes.dataSource = ''\n\t\t\t\t\tthis.attributes.Table = ''\n\t\t\t\t\tthis.attributes.collections = ''\n\t\t\t\t} else {\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\n\t\t}),\n\n\t\tview: defaultView.extend({\n\t\t\tinit() {\n\t\t\t\tthis.listenTo(this.model, `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`, this.handleChanges);\n\n\t\t\t},\n\t\t\thandleChanges() {\n\n\t\t\t\tif (this.model.attributes.dataSource && (this.model.attributes.Table == undefined || this.model.attributes.Table == \"\")) {\n\t\t\t\t\t\n\n\n\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/doc-list?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\n\t\t\t\t\t\t.then(response => {\n\n\t\t\t\t\t\t\tconst component = editor.getSelected();\n\t\t\t\t\t\t\tif (this.model.attributes.Table) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcomponent.addTrait\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\tname: \"Table\",\n\t\t\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\t\t\toptions:\n\t\t\t\t\t\t\t\t\t\tresponse.data.map((t) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t{ id: t, name: t }\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tchangeProp: 1,\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.attributes.Table) {\n\t\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/DataSources/${this.model.attributes.dataSource}/field-list?docId=${this.model.attributes.Table}&access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t.then(response => {\n\n\t\t\t\t\t\t\t\tconst component = editor.getSelected()\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\tif (updateTrait.length > 1) {\n\n\t\t\t\t\t\t\t\t\tthis.model.get('traits').each(function (trait) {\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(updateTrait.map(t => t.toString()));\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(\"collections\");\n\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait(\"console\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresponse.data.map((t) => {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet res = [\n\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: t, name: t, type: \"checkbox\", changeProp:1\n\t\t\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\tupdateTrait.push(t)\n\t\t\t\t\t\t\t\t\tcomponent.addTrait(res)\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tcomponent.addTrait({\n\t\t\t\t\t\t\t\t\tlabel: \"Primary key\",\n\t\t\t\t\t\t\t\t\tname: \"collections\",\n\t\t\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\t\t\toptions: response.data.map(t => t),\n\t\t\t\t\t\t\t\t\tchangeProp: 1\n\n\t\t\t\t\t\t\t\t}, { at: 40 });\n\n\t\t\t\t\t\t\t\tcomponent.addTrait(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\t\t\t\tname: \"console\",\n\t\t\t\t\t\t\t\t\t\tchangeProp:1,\n\t\t\t\t\t\t\t\t\t\tlabel: \"log button\",\n\t\t\t\t\t\t\t\t\t\ttext: 'Click me',\n\t\t\t\t\t\t\t\t\t\tfull: true,\n\t\t\t\t\t\t\t\t\t\tcommand: editor => {\n\t\t\t\t\t\t\t\t\t\t\tconst selected = editor.getSelected();\n\t\t\t\t\t\t\t\t\t\t\tlet postData = {}\n\t\t\t\t\t\t\t\t\t\t\tlet postDataArray = []\n\t\t\t\t\t\t\t\t\t\t\tselected.attributes.traits.models.forEach(element => {\n\n\t\t\t\t\t\t\t\t\t\t\tpostData[element.attributes.name] = element.attributes.value\n\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\tpostDataArray.push(postData)\n\t\t\t\t\t\t\t\t\t\t\tlet arr = null\n\t\t\t\t\t\t\t\t\t\t\tarr = postDataArray.map((js => {\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"dataSourceId\": js.dataSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"config\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"fields\": displayOptions(js),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"primaryKey\": js.collections,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"docId\": js.Table,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"simple\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"func\": \"find\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"query\": {}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"Chart\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}))[0]\n\t\t\t\t\t\t\t\t\t\t\t\taddWidget(arr)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(res.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet customId = res.data.id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.prevData = []\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.prevData.push(res.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.model.attributes.prevData.length >= 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent.removeTrait('Prev')\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\taxios.get(`http://173.249.14.149:3001/api/WidgetSettings/${customId}/execute-query?access_token=B6IES26pZSvpX4J8c8q4wmseASpRtmBOtvXzztH57NDDJXxO94qE7VbtJ7y718GZ`)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.then(reso => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(reso.data)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.model.attributes.defaultData.length < 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData.push(reso.data)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData = []\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.model.attributes.defaultData.push(reso.data)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.then(() => {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReactDOM.unmountComponentAtNode(this.el);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.render();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t},\n\t\tonRender({ el }) {\n\t\t\t\t\t\t\t\t\n\t\t\t\tconst comps = this.model.get('components')\n\t\t\t\tcomps.reset()\n\t\t\t\tReactDOM.render(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Chart data={this.model.attributes.defaultData[0]} />\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t, el)\n\t\t\t},\n\t\t}),\n\t})\n\t\t\n}\n\n","\nexport const ChartRef = 'Chart';\nexport const ChartPluginRef = 'Chart-Plugin';\nexport const loadHtmltemplate = 'load-html-template';\n","import grapesjs from 'grapesjs';\nimport loadComponents from './components'; \nimport loadBlocks from './blocks';\nimport loadCommands from './commands';\nimport loadPanels from './panels';\nimport parserHtmlCaseSensitive from './ParserHtmlCaseSensitive';\n\nimport {\n    ChartPluginRef\n} from './consts';\n\nexport default function addChartPlugin() {\n    grapesjs.plugins.add(ChartPluginRef, (editor, opts = {}) => {\n\n        \n        editor.TraitManager.addType('pre', {\n                                                                \n            noLabel: true,\n            \n            getInputEl() {\n                const { model} = this;\n                const {text} = model.props();\n                const label = text;\n                const input = `<div type=\"text\" style=\"font-size: 1rem; line-height:30px; margin:10px; word-wrap: break-word; width: 180px;\">${label}</div>`;\n                return input;\n            }\n        }\n                                                            \n\t\t) \n\n\n\n        let c = opts;\n \n        let defaults = {\n            blocks: [ChartPluginRef],\n\n            blockLabel: 'Charts',\n\n            blockCategory: 'Extra',\n\n            defaultStyle: true,\n\n        };\n        console.log(defaults)\n\n        for (let name in defaults) {\n            if (!(name in c))\n                c[name] = defaults[name];\n        }\n\n        loadComponents(editor, c);\n\n        loadBlocks(editor, c);\n\n        loadCommands(editor, c);\n\n        loadPanels(editor, c); \n\n        const em = editor.getModel();\n        const emConf = em.get('Config');\n        emConf.textTags = ['br', 'b', 'i', 'u', 'a', 'ul', 'ol'];\n        em.get('Parser').parserHtml = parserHtmlCaseSensitive(emConf);\n        em.get('Parser').parseHtml = (str) => {\n            const pHtml = em.get('Parser').parserHtml;\n            pHtml.compTypes = em.get('DomComponents').getTypes();\n            let res = pHtml.parse(str, em.get('Parser').parserCss);\n            return res;\n        };\n\n        editor.on(\"load\", () => {\n            const openBl = editor.Panels.getButton('views', 'open-blocks');\n            openBl && openBl.set('active', 1);\n        });\n\n    });\n}\n\n","\n\nexport default (editor, config) => {\n    const pn = editor.Panels;\n    console.log(pn.getPanels())\n\n    \n}\n","import React from \"react\";\nimport Cookie from \"js-cookie\";\nimport { useRouter } from \"next/router\";\nimport config from \"next/config\";\n\nimport grapesjs from \"grapesjs\";\nimport gsWebpage from \"grapesjs-preset-webpage\";\nimport gsCustome from \"grapesjs-custom-code\";\nimport gsTap from \"grapesjs-tabs\";\n\nimport { TablePluginRef } from \"./table-widgets/html-table-widget/consts\";\nimport addTablePlugin from \"./table-widgets/html-table-widget\";\n\nimport { ChartPluginRef } from \"./chart-widgets/line-chart/consts\";\nimport addChartPlugin from \"./chart-widgets/line-chart\";\n\nconst { API_URL } = config().publicRuntimeConfig;\n\nconst Page = () => {\n  const [pluginLoaded, setPluginLoaded] = React.useState(false);\n  const [editor, setEditor] = React.useState(null);\n  const router = useRouter();\n  const [id, setId] = React.useState(router.query.id);\n\n  React.useEffect(() => {\n    if (!pluginLoaded) {\n      addTablePlugin(id);\n      addChartPlugin();\n      setPluginLoaded(true);\n    } else if (!editor) {\n      const e = grapesjs.init({\n        color: \"white\",\n        height: \"100vh\",\n        width: \"auto\",\n        container: \"#g\",\n        fromElement: true,\n        plugins: [gsWebpage, gsCustome, gsTap, TablePluginRef, ChartPluginRef],\n        storageManager: {\n          type: \"remote\",\n          urlStore: `${API_URL}/Dashboards/${id}/grapes?access_token=${Cookie.get(\n            \"id\"\n          )}`,\n          urlLoad: `${API_URL}/Dashboards/${id}/grapes?access_token=${Cookie.get(\n            \"id\"\n          )}`,\n          autosave: false,\n          autoload: true,\n          contentTypeJson: true,\n          storeComponents: true,\n          allowScripts: 1,\n          storeStyles: true,\n          storeHtml: true,\n          storeCss: true,\n        },\n      });\n    }\n  });\n\n  return <div id=\"g\" className=\"h\" />;\n};\n\nexport default Page;\n","import React from \"react\";\nclass Material extends React.Component {\n  render() {\n    console.log(this.props.data);\n    // const keys = [...new Set([].concat.apply([], this.props.data.map(obj => Object.keys(obj))))]\n    // console.log(keys)\n    let f = \"\";\n    for (let i = 0, j = 0; i < this.props.data.length && j < 10; i++, j++) {\n      const kee = Object.keys(this.props.data[i]);\n      f = kee;\n    }\n    return (\n      <table\n        cellspacing=\"0\"\n        cellpadding=\"0\"\n        style={{\n          margin: \"20px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          textAlign: \"center\",\n          tableLayout: \"fixed\",\n          whiteSpace: \"normal\",\n          borderRadius: \"15px\",\n          overflow: \"hidden\",\n          boxShadow: \"0 0px 40px 0px rgba(0, 0, 0, 0.15)\",\n          fontSize: \"15px\",\n          color: \"#808080\",\n        }}\n      >\n        <thead>\n          <tr\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              backgroundColor: \"#6c7ae0\",\n              boxShadow: \"0px 0px 9px 0px rgba(0,0,0,0.1)\",\n              color: \"white\",\n            }}\n          >\n            {f.map((k) => {\n              console.log(f.length);\n\n              return (\n                <th\n                  style={{\n                    width: `${100 / f.length}%`,\n                    padding: \"15px\",\n                  }}\n                >\n                  {k}\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n        <tbody class=\"Tbody\">\n          {this.props.data.map((d) => {\n            const values = [];\n            f.forEach((key) => {\n              if (typeof d[key] === \"object\" || typeof d[key] === \"undefined\") {\n                d[key] = \"----------\";\n              } else if (d[key] === true) {\n                d[key] = \"true\";\n              } else if (d[key] === false) {\n                d[key] = \"false\";\n              } else if (d[key].length < 1) {\n                d[key] = \"----------\";\n              }\n\n              values.push(d[key]);\n            });\n            console.log(values);\n            // values.map(str => {\n            //     if (typeof str === \"object\") {\n            //         let st = JSON.stringify(str)\n            //         values[1] = st;\n            //     } else if (typeof str === Boolean) {\n            //         return str.toString()\n\n            //     }\n            //})\n            return (\n              <tr\n                class=\"Tr-body\"\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-around\",\n                  alignItems: \"center\",\n                }}\n              >\n                {values.map((di) => {\n                  return (\n                    <td\n                      style={{\n                        width: `${100 / f.length}%`,\n                        wordWrap: \"break-word\",\n                        padding: \"10px 0\",\n                      }}\n                    >\n                      {di}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Material;\n","import { each, isString } from 'underscore';\nimport { parse as nodeHtmlParser } from \"node-html-parser\";\nimport XRegExp from \"xregexp\";\n\nwindow.nodeHtmlParser = nodeHtmlParser;\n\n/**\n * Parses an HTML string into its HTML and CSS component representation keeping case of tags and attributes. This\n * is necessary in case you want React compatible JSX tags in the template, in which case the react components must start\n * wih uppercase and also the camel casing of attributes is importane (ie. className vs classname)\n *\n * This function is based on src/parser/model/ParserHtml.js. For parsing we are using node-html-parser instead of\n * the browser's DOM to keep the case of tags and attributes. The code is mostly the same  as in ParserHtml.js\n * by maing the objects created by  node-html-parser compatible with the DOM representation.\n *\n * @param config usual grapesjs config\n * @returns parser function\n */\nexport default config => {\n    var TEXT_NODE = 'span';\n    var c = config;\n    var modelAttrStart = 'data-gjs-';\n\n    return {\n        compTypes: '',\n\n        modelAttrStart,\n\n        /**\n         * Extract component props from an attribute object\n         * @param {Object} attr\n         * @returns {Object} An object containing props and attributes without them\n         */\n        splitPropsFromAttr(attr = {}) {\n            const props = {};\n            const attrs = {};\n\n            each(attr, (value, key) => {\n                if (key.indexOf(this.modelAttrStart) === 0) {\n                    const modelAttr = key.replace(modelAttrStart, '');\n                    const valueLen = value.length;\n                    const valStr = value && isString(value);\n                    const firstChar = valStr && value.substr(0, 1);\n                    const lastChar = valStr && value.substr(valueLen - 1);\n                    value = value === 'true' ? true : value;\n                    value = value === 'false' ? false : value;\n\n                    // Try to parse JSON where it's possible\n                    // I can get false positive here (eg. a selector '[data-attr]')\n                    // so put it under try/catch and let fail silently\n                    try {\n                        value =\n                            (firstChar == '{' && lastChar == '}') ||\n                            (firstChar == '[' && lastChar == ']')\n                                ? JSON.parse(value)\n                                : value;\n                    } catch (e) {}\n\n                    props[modelAttr] = value;\n                } else {\n                    attrs[key] = value;\n                }\n            });\n\n            return {\n                props,\n                attrs\n            };\n        },\n\n        /**\n         * Given a string with html (jsx). Attributes having JSX expressions will be quoted to look like\n         * actual HTML attributes\n         * @param {*} html\n         * @return html with quoted JSX attributes\n         *\n         * https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses\n         */\n        quoteJsxExpresionsInAttributes(html) {\n            let found = XRegExp.matchRecursive(html, \"{\", \"}\", \"g\");\n            for (let i = 0; i < found.length; i++) {\n                // (value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`\n                // --> {(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                let pattern = \"{\" + found[i] + \"}\";\n                let lastStartPos = 0;\n                // Find pattern until we reach and of html\n                while (true) {\n                    let needsQuote = false;\n                    // get next match position\n                    let matchPos = html.indexOf(pattern, lastStartPos);\n                    if (matchPos === -1) {\n                        break;\n                    }\n                    // We will look back 1 and 2 characters\n                    let oneCharBeforePos = matchPos - 1;\n                    let twoCharBeforePos = matchPos - 2;\n                    if (twoCharBeforePos > 0 && oneCharBeforePos > 0) {\n                        // Need to quote if have sg like this:\n                        //   formatValue={(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\n                        // (ie: if patterns comes atfre and equals sime, but not =\")\n                        // But no need to quote if:\n                        //    formatValue=\"{(value) => \\`\\${(value) => < 10 ? \\`0\\${value}\\` : value)}\\`}\"\n                        //    <Timer.Days/>{this.model.attributes.displayLabels ? \" \"+this.model.attributes.labels.labelDays+\" \" : ', '}\n                        needsQuote =\n                            html.substring(twoCharBeforePos, twoCharBeforePos + 2) !== '=\"' &&\n                            html.substring(oneCharBeforePos, oneCharBeforePos + 1) === \"=\";\n                    }\n\n                    // If need to quote: replace patterns with quoted version also escaping some HTML entities\n                    if (needsQuote) {\n                        let replacement =\n                            '\"{' +\n                            found[i]\n                                .replace(\"<\", \"&lt;\")\n                                .replace(\">\", \"&gt;\")\n                                .replace(\"&\", \"&amp;\")\n                            + '}\"';\n                        html = html.replace(pattern, replacement);\n                        lastStartPos = matchPos + replacement.length;\n                    } else {\n                        lastStartPos = matchPos + pattern.length;\n                    }\n\n                    // No lastStartPos placed after the processed string\n                }\n            }\n            return html;\n        },\n\n\n\n        /**\n         * Unquote attributes containg JSX previously quoted using quoteJsxExpresionsInAttributes\n         * @param html\n         */\n        unquoteJsxExpresionsInAttributes(html) {\n            let found = html.match(/=[\"']{.*}[\"']/g);\n            if (!found) {\n                return html;\n            }\n            for (let i = 0; i < found.length; i++) {\n                let pattern = found[i];\n                let replacement = pattern.startsWith('=\"{')\n                    ? pattern.replace('\"{', \"{\").replace('}\"', \"}\")\n                    : pattern.replace(\"{'\", \"{\").replace(\"}'\", \"}\");\n                replacement = replacement\n                    .replace(\"&lt;\", \"<\")\n                    .replace(\"&gt;\", \">\")\n                    .replace(\"&amp;\", \"&\");\n                html = html.replace(pattern, replacement);\n            }\n            return html;\n        },\n\n\n        /**\n         * Parse style string to object\n         * @param {string} str\n         * @return {Object}\n         * @example\n         * var stl = ParserHtml.parseStyle('color:black; width:100px; test:value;');\n         * console.log(stl);\n         * // {color: 'black', width: '100px', test: 'value'}\n         */\n        parseStyle(str) {\n            var result = {};\n            var decls = str.split(';');\n            for (var i = 0, len = decls.length; i < len; i++) {\n                var decl = decls[i].trim();\n                if (!decl) continue;\n                var prop = decl.split(':');\n                result[prop[0].trim()] = prop\n                    .slice(1)\n                    .join(':')\n                    .trim();\n            }\n            return result;\n        },\n\n        /**\n         * Parse class string to array\n         * @param {string} str\n         * @return {Array<string>}\n         * @example\n         * var res = ParserHtml.parseClass('test1 test2 test3');\n         * console.log(res);\n         * // ['test1', 'test2', 'test3']\n         */\n        parseClass(str) {\n            const result = [];\n            const cls = str.split(' ');\n            for (let i = 0, len = cls.length; i < len; i++) {\n                const cl = cls[i].trim();\n                if (!cl) continue;\n                result.push(cl);\n            }\n            return result;\n        },\n\n        toAttrArray(obj){\n            var attrArr = [];\n            Object.keys(obj).map(key => {\n                attrArr.push({'nodeName':key, 'nodeValue':obj[key]})\n            })\n            return attrArr;\n        },\n\n        /**\n         * Get data from the node element\n         * @param  {HTMLElement} el DOM element to traverse\n         * @return {Array<Object>}\n         */\n        parseNode(el) {\n            const result = [];\n            const nodes = el.childNodes;\n\n            for (var i = 0, len = nodes.length; i < len; i++) {\n                const node = nodes[i];\n\n                // DOM copmatibility\n                node.nodeValue = node.rawText;\n                node.content = node.rawText;\n\n                // Make attrs compatible with DOM representation\n                let attrs = [];\n                    attrs = (typeof node.attributes == 'object'\n                        ? this.toAttrArray(node.attributes)\n                        :  node.attributes)\n                        || []\n                    const attrsLen = attrs.length;\n                const nodePrev = result[result.length - 1];\n                const nodeChild = node.childNodes.length;\n                const ct = this.compTypes;\n                let model = {};\n\n                if (ct) {\n                    let obj = '';\n                    let type =\n                        node.getAttribute && node.getAttribute(`${modelAttrStart}type`);\n                    if (!type) {\n                        type = node.attributes && node.attributes[`${modelAttrStart}type`];\n                    }\n\n                    if (type) {\n                        model = { type };\n                    } else {\n                       \n                        for (let it = 0; it < ct.length; it++) {\n                            const compType = ct[it];\n                            obj = compType.model.isComponent(node);\n\n                            if (obj) {\n                                if (typeof obj !== 'object') {\n                                    obj = { type: compType.id };\n                                }\n                                break;\n                            }\n                        }\n\n                        model = obj;\n                    }\n                }\n\n                model.tagName = node.tagName;\n\n                if (attrsLen) {\n                    model.attributes = {};\n                }\n\n                for (let j = 0; j < attrsLen; j++) {\n                    const nodeName = attrs[j].nodeName;\n                    let nodeValue = attrs[j].nodeValue;\n                    // if (nodeName == \"formatValue\") {\n                    //     debugger;\n                    // }\n\n                    // Isolate attributes\n                    if (nodeName == 'style') {\n                        model.style = this.parseStyle(nodeValue);\n                    } else if (nodeName == 'class') {\n                        model.classes = this.parseClass(nodeValue);\n                    } else if (nodeName == 'contenteditable') {\n                        continue;\n                    } else if (nodeName.indexOf(modelAttrStart) === 0) {\n                        const modelAttr = nodeName.replace(modelAttrStart, '');\n                        const valueLen = nodeValue.length;\n                        const firstChar = nodeValue && nodeValue.substr(0, 1);\n                        const lastChar = nodeValue && nodeValue.substr(valueLen - 1);\n                        nodeValue = nodeValue === 'true' ? true : nodeValue;\n                        nodeValue = nodeValue === 'false' ? false : nodeValue;\n\n                      \n                        try {\n                            nodeValue =\n                                (firstChar == '{' && lastChar == '}') ||\n                                (firstChar == '[' && lastChar == ']')\n                                    ? JSON.parse(nodeValue)\n                                    : nodeValue;\n                        } catch (e) {}\n\n                        model[modelAttr] = nodeValue;\n                    } else {\n                        model.attributes[nodeName] = nodeValue;\n                    }\n                }\n\n                if (nodeChild && !model.components) {\n                    const firstChild = node.childNodes[0];\n                    firstChild.nodeValue = firstChild.rawText;\n\n                    if (nodeChild === 1 && firstChild.nodeType === 3) {\n                        !model.type && (model.type = 'text');\n                        model.content = firstChild.nodeValue;\n                    } else {\n                        model.components = this.parseNode(node);\n                    }\n                }\n\n                if (model.type == 'textnode') {\n                    model.content = node.nodeValue;\n\n                    if (nodePrev && nodePrev.type == 'textnode') {\n                        nodePrev.content += model.content;\n                        continue;\n                    }\n\n                    if (!config.keepEmptyTextNodes) {\n                        const content = node.nodeValue;\n                        if (content != ' ' && !content.trim()) {\n                            continue;\n                        }\n                    }\n                }\n\n                \n                const comps = model.components;\n                if (!model.type && comps) {\n                    let allTxt = 1;\n                    let foundTextNode = 0;\n\n                    for (let ci = 0; ci < comps.length; ci++) {\n                        const comp = comps[ci];\n                        const cType = comp.type;\n\n                        if (\n                            ['text', 'textnode'].indexOf(cType) < 0 &&\n                            c.textTags.indexOf(comp.tagName) < 0\n                        ) {\n                            allTxt = 0;\n                            break;\n                        }\n\n                        if (cType == 'textnode') {\n                            foundTextNode = 1;\n                        }\n                    }\n\n                    if (allTxt && foundTextNode) {\n                        model.type = 'text';\n                    }\n                }\n\n                if (!model.tagName && model.type != 'textnode') {\n                    continue;\n                }\n\n                result.push(model);\n            }\n\n            return result;\n        },\n\n        /**\n         * Parse HTML string to a desired model object\n         * @param  {string} str HTML string\n         * @param  {ParserCss} parserCss In case there is style tags inside HTML\n         * @return {Object}\n         *\n         */\n        parse(str, parserCss) {\n            console.log(\"html\", str, parserCss);\n\n            var config = (c.em && c.em.get('Config')) || {};\n            var res = { html: '', css: '' };\n\n            var quoted = this.quoteJsxExpresionsInAttributes(str);\n            let wrappedInDiv = false;\n            if (!quoted.startsWith('<')) {\n                quoted = '<div>'+quoted+'</div>';\n                wrappedInDiv = true;\n            }\n            const dom = nodeHtmlParser(quoted);\n            var result = this.parseNode(dom);\n\n            if (result.length == 1) {\n                result = result[0];\n            }\n\n            if (wrappedInDiv) {\n                if (result.components) {\n                    result = result.components;\n                }\n                \n                else {\n                    delete result.tagName;\n                    result.type = \"textnode\";\n                }\n            }\n            res.html = result;\n\n           \n            if (parserCss) {\n                var el = document.createElement('div');\n                el.innerHTML = str;\n                var styleStr = '';\n                var styles = el.querySelectorAll('style');\n                var j = styles.length;\n\n                while (j--) {\n                    styleStr = styles[j].innerHTML + styleStr;\n                    styles[j].parentNode.removeChild(styles[j]);\n                }\n\n                if (styleStr) res.css = parserCss.parse(styleStr);\n            }\n\n            return res;\n        }\n    };\n};","import { TableRef } from \"./consts\";\n\nexport default function (editor, opt = {}) {\n  const c = opt;\n  const bm = editor.BlockManager;\n  bm.remove(TableRef);\n  bm.add(TableRef, {\n    label: \"Tabel\",\n    category: c.blockLabel,\n    attributes: { class: \"fa fa-table\" },\n    content: `\n      <div class=\"T\" data-gjs-type=\"${TableRef}\"></div>\n      <style>\n      .T {\n            float: left;\n      }\n      .Tbody {\n        max-height: 585px;\n        overflow: auto;\n      }\n      .Tbody tr:nth-child(even) {\n      background-color: #f8f6ff;\n    }\n      </style>\n    `,\n  });\n}\n","/**\n * Adds loadHtmltemplate command\n */\nimport {loadHtmltemplate} from \"./consts\";\n\nexport default (editor, config) => {\n  const cm = editor.Commands;\n\n  cm.add(loadHtmltemplate, e => {\n      const pHtml = e.getModel().get('Parser').parserHtml;\n      // JSX expression in attributes are quoted, so unquote them before passing on\n      let html = pHtml.unquoteJsxExpresionsInAttributes(e.getHtml());\n      config.setHtmlString(html);\n      config.setCssString(e.getCss());\n  });\n  cm.add\n    ('save-db',\n      {\n        run: function (editor, sender) {\n          sender && sender.set('active');\n          editor.store();\n        }\n      });\n \n  \n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TableRef } from \"./consts\";\nimport Material from \"./Material\";\nimport DashboardActions from \"../../../../actions/dashboard.actions\";\nimport DatasourceActions from \"../../../../actions/datasource.actions\";\nimport WidgetSettingsActions from \"../../../../actions/widgetSettings.actions\";\n\nexport default function (editor, opt = {}) {\n  const { id } = opt;\n\n  let d = [\n    [\n      {\n        Name: \"Henery\",\n        Location: \"Usa\",\n        id: \"5c24dc26dc10670017e40921\",\n        \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n        notes: \"\",\n      },\n    ],\n  ];\n\n  let updateTrait = [];\n  const domc = editor.DomComponents;\n  const defaultType = domc.getType(\"default\");\n  const defaultModel = defaultType.model;\n  const defaultView = defaultType.view;\n\n  function displayOptions(displayDevice) {\n    let newObj = [];\n\n    for (var key in displayDevice) {\n      if (displayDevice[key] === true) newObj.push(key);\n    }\n\n    return newObj;\n  }\n\n  domc.addType(TableRef, {\n    model: defaultModel.extend({\n      defaults: {\n        ...defaultModel.prototype.defaults,\n        droppable: true,\n        defaultData: [\n          [\n            {\n              Name: \"Henery\",\n              Location: \"Usa\",\n              id: \"5c24dc26dc10670017e40921\",\n              \"last Seen\": \"2020-06-10T19:51:40.452Z\",\n              notes: \"\",\n            },\n          ],\n        ],\n        prevData: [],\n        dbId: [],\n        keys: [[\"Name\", \"location\", \"id\", \"last Seen\", \"notes\"]],\n        traits: [\n          {\n            name: \"modify\",\n            type: \"button\",\n            text: `Modify`,\n            full: true,\n            command: async (editor) => {\n              try {\n                const datasources = await DatasourceActions.getDatasources({});\n                let component = editor.getSelected();\n                component.addTrait({\n                  name: \"dataSource\",\n                  type: \"select\",\n                  changeProp: 1,\n                  options: datasources.map((op) => {\n                    return { id: op.id, name: op.title };\n                  }),\n                });\n                component.removeTrait(\"modify\");\n              } catch (e) {\n                console.log(e);\n              }\n            },\n          },\n        ],\n        toHTML: function () {\n          return \"\";\n        },\n      },\n      init() {\n        this.listenTo(this, this.handlePropChange);\n        if (this.attributes.prevData.length >= 1) {\n          this.getTrait(\"modify\").set(\"text\", \"Edit\");\n          this.addTrait(\n            {\n              name: \"Prev\",\n              type: \"pre\",\n              text: `\n\t\t\t\t\t\tData Source : <span style=\"font-weight: bold;\">${\n              this.attributes.prevData[0].dataSourceId ===\n              \"5ec035f7bb377b08ebc8938a\"\n                ? \"MongoDB\"\n                : this.attributes.prevData[0].dataSourceId\n            }</span><br/>\n\t\t\t\t\t\t Table : <span style=\"font-weight: bold;\">${\n               this.attributes.prevData[0].config.docId\n             }</span><br/>\n\t\t\t\t\t\tFields : <span style=\"font-weight: bold;\">${this.attributes.prevData[0].config.fields\n              .toString()\n              .replace(/,/g, \" | \")}</span><br/>\n\t\t\t\t\t\tPrimary key : <span style=\"font-weight: bold;\"> ${\n              this.attributes.prevData[0].config.primaryKey\n            }</span><br/>\n\t\t\t\t\t`,\n            },\n            { at: 0 }\n          );\n        }\n        if (this.attributes.dataSource) {\n          this.attributes.dataSource = \"\";\n          this.attributes.Table = \"\";\n          this.attributes.collections = \"\";\n        } else {\n          return null;\n        }\n      },\n    }),\n\n    view: defaultView.extend({\n      init() {\n        this.listenTo(\n          this.model,\n          `change:modify change:dataSource change:Table change:console change:${updateTrait.toString()}`,\n          this.handleChanges\n        );\n      },\n      async handleChanges() {\n        try {\n          if (\n            this.model.attributes.dataSource &&\n            (this.model.attributes.Table == undefined ||\n              this.model.attributes.Table == \"\")\n          ) {\n            const docList = await DatasourceActions.getDocList(\n              this.model.attributes.dataSource\n            );\n            const component = editor.getSelected();\n            component.addTrait({\n              name: \"Table\",\n              type: \"select\",\n              options: docList.map((t) => {\n                return { id: t, name: t };\n              }),\n              changeProp: 1,\n            });\n          }\n          if (this.model.attributes.Table) {\n            const fieldList = await DatasourceActions.getFieldList(\n              this.model.attributes.dataSource,\n              this.model.attributes.Table\n            );\n            const component = editor.getSelected();\n\n            if (updateTrait.length > 1) {\n              this.model.get(\"traits\").each(function (trait) {\n                component.removeTrait(updateTrait.map((t) => t.toString()));\n                component.removeTrait(\"collections\");\n                component.removeTrait(\"console\");\n              });\n            }\n            fieldList.map((t) => {\n              let res = [\n                {\n                  label: t,\n                  name: t,\n                  type: \"checkbox\",\n                  changeProp: 1,\n                },\n              ];\n              updateTrait.push(t);\n              component.addTrait(res);\n            });\n\n            component.addTrait(\n              {\n                label: \"Primary key\",\n                name: \"collections\",\n                type: \"select\",\n                options: fieldList.map((t) => t),\n                changeProp: 1,\n              },\n              { at: 40 }\n            );\n\n            component.addTrait({\n              type: \"button\",\n              name: \"console\",\n              changeProp: 1,\n              label: \"log button\",\n              text: \"Click me\",\n              full: true,\n              command: async (editor) => {\n                try {\n                  const selected = editor.getSelected();\n                  let postData = {};\n                  let postDataArray = [];\n                  selected.attributes.traits.models.forEach((element) => {\n                    postData[element.attributes.name] =\n                      element.attributes.value;\n                  });\n                  postDataArray.push(postData);\n                  let arr = null;\n                  this.model.attributes.keys = [];\n                  arr = postDataArray.map((js) => {\n                    this.model.attributes.keys.push(displayOptions(js));\n\n                    return {\n                      dataSourceId: js.dataSource,\n                      config: {\n                        fields: displayOptions(js),\n                        primaryKey: js.collections,\n                        docId: js.Table,\n                        type: \"simple\",\n                        func: \"find\",\n                        query: {},\n                      },\n                      type: \"Table\",\n                    };\n                  })[0];\n                  const widget = await DashboardActions.createWidgetInDashboard(\n                    id,\n                    arr\n                  );\n                  let customId = widget.id;\n                  this.model.attributes.prevData = [];\n                  this.model.attributes.prevData.push(widget);\n                  if (this.model.attributes.prevData.length >= 1) {\n                    component.removeTrait(\"Prev\");\n                  }\n                  const queryResult = await WidgetSettingsActions.executeWidgetQuery(\n                    customId\n                  );\n\n                  if (this.model.attributes.defaultData.length < 1) {\n                    this.model.attributes.defaultData.push(queryResult);\n                  } else {\n                    this.model.attributes.defaultData = [];\n                    this.model.attributes.defaultData.push(queryResult);\n                  }\n\n                  ReactDOM.unmountComponentAtNode(this.el);\n                  this.render();\n                } catch (e) {\n                  console.log(\">> Error:\", e);\n                }\n              },\n            });\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      onRender({ el }) {\n        const comps = this.model.get(\"components\");\n        comps.reset();\n        ReactDOM.render(\n          <>\n            <div>\n              <Material\n                keys={this.model.attributes.keys}\n                data={this.model.attributes.defaultData[0]}\n              />\n            </div>\n          </>,\n          el\n        );\n      },\n    }),\n  });\n}\n","\nexport const TableRef = 'table';\nexport const nwTableRef = 'ttable'\nexport const TablePluginRef = 'Table-Plugin';\nexport const loadHtmltemplate = 'load-html-template';\n","import grapesjs from \"grapesjs\";\nimport loadComponents from \"./components\";\nimport loadBlocks from \"./blocks\";\nimport loadCommands from \"./commands\";\nimport loadPanels from \"./panels\";\nimport parserHtmlCaseSensitive from \"./ParserHtmlCaseSensitive\";\n\nimport { TablePluginRef } from \"./consts\";\n\nexport default function addTablePlugin(id) {\n  grapesjs.plugins.add(TablePluginRef, (editor, opts = {}) => {\n    editor.TraitManager.addType(\"pre\", {\n      noLabel: true,\n\n      getInputEl() {\n        const { model } = this;\n        const { text } = model.props();\n        const label = text;\n        const input = `<div type=\"text\" style=\"font-size: 1rem; line-height:30px; margin:10px; word-wrap: break-word; width: 180px;\">${label}</div>`;\n        return input;\n      },\n    });\n\n    let c = opts;\n\n    let defaults = {\n      blocks: [TablePluginRef],\n      blockLabel: \"Table\",\n      blockCategory: \"Extra\",\n      defaultStyle: true,\n      id\n    };\n\n    for (let name in defaults) {\n      if (!(name in c)) c[name] = defaults[name];\n    }\n\n    loadComponents(editor, c);\n    loadBlocks(editor, c);\n    loadCommands(editor, c);\n    loadPanels(editor, c);\n\n    const em = editor.getModel();\n    const emConf = em.get(\"Config\");\n    emConf.textTags = [\"br\", \"b\", \"i\", \"u\", \"a\", \"ul\", \"ol\"];\n    em.get(\"Parser\").parserHtml = parserHtmlCaseSensitive(emConf);\n    em.get(\"Parser\").parseHtml = (str) => {\n      const pHtml = em.get(\"Parser\").parserHtml;\n      pHtml.compTypes = em.get(\"DomComponents\").getTypes();\n      let res = pHtml.parse(str, em.get(\"Parser\").parserCss);\n      return res;\n    };\n\n    editor.on(\"load\", () => {\n      const openBl = editor.Panels.getButton(\"views\", \"open-blocks\");\n      openBl && openBl.set(\"active\", 1);\n    });\n  });\n}\n","\n\nexport default (editor, config) => {\n    const pn = editor.Panels;\n    console.log(pn.getPanels())\n\n    \n    pn.addButton('options', [{\n        id: 'save-db',\n        className: 'fa fa-floppy-o',\n        command: 'save-db',\n        attributes: { title: 'Save', style:\"color:#00C6CF; margin-left: 50px; \" }\n    }]);\n    \n}\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAQA;AACA;AACA;AACA;AADA;AAKA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AADA;AAKA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAaA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAIA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAGA;AAIA;AACA;AA3NA;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AAhEA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AADA;AAJA;AAWA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAJA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAxKA;;;;;;;;;;;;;;;;;;;ACbA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArZA;AAsZA;;;;;;;;;;;;AC7aA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAIA;AAEA;AACA;AAGA;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AALA;AASA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AAGA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AATA;AAYA;AACA;AArBA;AAwBA;AACA;AACA;AAlCA;AACA;AAoCA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AARA;AAWA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEA;AAoEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAIA;AAIA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AATA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAXA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAnEA;AAsEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAtKA;AAtEA;AA+OA;;;;;;;;;;;;ACvRA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAXA;AAiBA;AAEA;AACA;AAEA;AAEA;AAEA;AAPA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;AC1EA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAPA;AAyBA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7DA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAigHA;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArZA;AAsZA;;;;;;;;;;;;AC7aA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;AALA;AAoBA;;;;;;;;;;;;AC1BA;AAAA;AAAA;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AArBA;AAwBA;AACA;AACA;AA5CA;AACA;AA6CA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AAEA;AAIA;;AAjBA;AAqBA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AAsFA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAVA;AAYA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AArJA;AAvFA;AA8OA;;;;;;;;;;;;ACpRA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxDA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAOA;;;;A","sourceRoot":""}