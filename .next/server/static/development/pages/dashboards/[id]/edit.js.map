{"version":3,"file":"static/development/pages/dashboards/[id]/edit.js","sources":["webpack:///webpack/bootstrap","webpack:///./actions/dashboard.actions.ts","webpack:///./actions/datasource.actions.ts","webpack:///./actions/widgetSettings.actions.ts","webpack:///./components/dashboards/my-widgets.jsx","webpack:///./components/dashboards/settings/add-new-collaborator.jsx","webpack:///./components/dashboards/settings/collaborator-card.jsx","webpack:///./components/dashboards/settings/dashboard-settings.jsx","webpack:///./components/dashboards/settings/general-settings.jsx","webpack:///./components/dashboards/settings/privacy-settings.jsx","webpack:///./components/dashboards/settings/sub-boards-settings.jsx","webpack:///./components/dashboards/system-widgets.jsx","webpack:///./components/dashboards/widgets-menu.jsx","webpack:///./components/widgets/charts/area-chart/area-chart-widget-settings.jsx","webpack:///./components/widgets/charts/area-chart/area-chart-widget.jsx","webpack:///./components/widgets/charts/area-chart/index.js","webpack:///./components/widgets/charts/bar-chart/bar-chart-widget-settings.jsx","webpack:///./components/widgets/charts/bar-chart/bar-chart-widget.jsx","webpack:///./components/widgets/charts/bar-chart/index.js","webpack:///./components/widgets/charts/donut-chart/donut-chart-widget-settings.jsx","webpack:///./components/widgets/charts/donut-chart/donut-chart-widget.jsx","webpack:///./components/widgets/charts/donut-chart/index.js","webpack:///./components/widgets/charts/index.js","webpack:///./components/widgets/charts/line-chart/index.js","webpack:///./components/widgets/charts/line-chart/line-chart-widget-settings.jsx","webpack:///./components/widgets/charts/line-chart/line-chart-widget.jsx","webpack:///./components/widgets/charts/pie-chart/index.js","webpack:///./components/widgets/charts/pie-chart/pie-chart-widget-settings.jsx","webpack:///./components/widgets/charts/pie-chart/pie-chart-widget.jsx","webpack:///./components/widgets/form-controls/autocomplete/autocomplete-widget-settings.jsx","webpack:///./components/widgets/form-controls/autocomplete/autocomplete-widget.jsx","webpack:///./components/widgets/form-controls/autocomplete/index.js","webpack:///./components/widgets/form-controls/button/button-widget-settings.jsx","webpack:///./components/widgets/form-controls/button/button-widget.jsx","webpack:///./components/widgets/form-controls/button/index.js","webpack:///./components/widgets/form-controls/checkbox/checkbox-widget-settings.jsx","webpack:///./components/widgets/form-controls/checkbox/checkbox-widget.jsx","webpack:///./components/widgets/form-controls/checkbox/index.js","webpack:///./components/widgets/form-controls/date-time/datetime-widget-settings.jsx","webpack:///./components/widgets/form-controls/date-time/datetime-widget.jsx","webpack:///./components/widgets/form-controls/date-time/index.js","webpack:///./components/widgets/form-controls/file/file-widget-settings.jsx","webpack:///./components/widgets/form-controls/file/file-widget.jsx","webpack:///./components/widgets/form-controls/file/index.js","webpack:///./components/widgets/form-controls/form-group/form-group-widget-settings.jsx","webpack:///./components/widgets/form-controls/form-group/form-group-widget.jsx","webpack:///./components/widgets/form-controls/form-group/index.js","webpack:///./components/widgets/form-controls/index.js","webpack:///./components/widgets/form-controls/number/index.js","webpack:///./components/widgets/form-controls/number/number-widget-settings.jsx","webpack:///./components/widgets/form-controls/number/number-widget.jsx","webpack:///./components/widgets/form-controls/password/index.js","webpack:///./components/widgets/form-controls/password/password-widget-settings.jsx","webpack:///./components/widgets/form-controls/password/password-widget.jsx","webpack:///./components/widgets/form-controls/radio/index.js","webpack:///./components/widgets/form-controls/radio/radio-widget-settings.jsx","webpack:///./components/widgets/form-controls/radio/radio-widget.jsx","webpack:///./components/widgets/form-controls/select/index.js","webpack:///./components/widgets/form-controls/select/select-widget-settings.jsx","webpack:///./components/widgets/form-controls/select/select-widget.jsx","webpack:///./components/widgets/form-controls/textarea/index.js","webpack:///./components/widgets/form-controls/textarea/textarea-widget-settings.jsx","webpack:///./components/widgets/form-controls/textarea/textarea-widget.jsx","webpack:///./components/widgets/form-controls/textfield/index.js","webpack:///./components/widgets/form-controls/textfield/text-field-widget-settings.jsx","webpack:///./components/widgets/form-controls/textfield/text-field-widget.jsx","webpack:///./components/widgets/helpers/connection-settings/connection-settings.jsx","webpack:///./components/widgets/helpers/connection-settings/database-connection.jsx","webpack:///./components/widgets/helpers/connection-settings/http-connection.jsx","webpack:///./components/widgets/helpers/connection-settings/index.js","webpack:///./components/widgets/helpers/index.js","webpack:///./components/widgets/helpers/measure-conditions/add-measure-condition.jsx","webpack:///./components/widgets/helpers/measure-conditions/index.js","webpack:///./components/widgets/helpers/measure-conditions/measure-conditions-item.jsx","webpack:///./components/widgets/helpers/measure-conditions/measure-conditions.jsx","webpack:///./components/widgets/html-elements/accordion/accordion-widget-settings.jsx","webpack:///./components/widgets/html-elements/accordion/accordion-widget.jsx","webpack:///./components/widgets/html-elements/accordion/index.js","webpack:///./components/widgets/html-elements/data-grid/data-grid-widget-settings.jsx","webpack:///./components/widgets/html-elements/data-grid/data-grid-widget.jsx","webpack:///./components/widgets/html-elements/data-grid/index.js","webpack:///./components/widgets/html-elements/div/div-widget-settings.jsx","webpack:///./components/widgets/html-elements/div/div-widget.jsx","webpack:///./components/widgets/html-elements/div/index.js","webpack:///./components/widgets/html-elements/image/image-widget-settings.jsx","webpack:///./components/widgets/html-elements/image/image-widget.jsx","webpack:///./components/widgets/html-elements/image/index.js","webpack:///./components/widgets/html-elements/index.js","webpack:///./components/widgets/html-elements/list/index.js","webpack:///./components/widgets/html-elements/list/list-widget-settings.jsx","webpack:///./components/widgets/html-elements/list/list-widget.jsx","webpack:///./components/widgets/html-elements/paragraph/index.js","webpack:///./components/widgets/html-elements/paragraph/paragraph-widget-settings.jsx","webpack:///./components/widgets/html-elements/paragraph/paragraph-widget.jsx","webpack:///./components/widgets/html-elements/progress-bar/index.js","webpack:///./components/widgets/html-elements/progress-bar/progress-bar-widget-settings.jsx","webpack:///./components/widgets/html-elements/progress-bar/progress-bar-widget.jsx","webpack:///./components/widgets/html-elements/span/index.js","webpack:///./components/widgets/html-elements/span/span-widget-settings.jsx","webpack:///./components/widgets/html-elements/span/span-widget.jsx","webpack:///./components/widgets/html-elements/tabs/index.js","webpack:///./components/widgets/html-elements/tabs/tabs-widget-settings.jsx","webpack:///./components/widgets/html-elements/tabs/tabs-widget.jsx","webpack:///./components/widgets/index.js","webpack:///./components/widgets/table/export-table-data.jsx","webpack:///./components/widgets/table/index.js","webpack:///./components/widgets/table/table-widget-settings-panel.jsx","webpack:///./components/widgets/table/table-widget-settings.jsx","webpack:///./components/widgets/table/table-widget.jsx","webpack:///./components/widgets/widget-icon.jsx","webpack:///./helpers/css-colors.js","webpack:///./helpers/decide-widgets.jsx","webpack:///./helpers/measure-conditions.js","webpack:///./pages/dashboards//edit.jsx","webpack:///external \"@date-io/date-fns\"","webpack:///external \"@devexpress/dx-react-chart\"","webpack:///external \"@devexpress/dx-react-chart-material-ui\"","webpack:///external \"@material-ui/core\"","webpack:///external \"@material-ui/core/AppBar\"","webpack:///external \"@material-ui/core/Backdrop\"","webpack:///external \"@material-ui/core/Box\"","webpack:///external \"@material-ui/core/Button\"","webpack:///external \"@material-ui/core/ButtonBase\"","webpack:///external \"@material-ui/core/Card\"","webpack:///external \"@material-ui/core/CardActions\"","webpack:///external \"@material-ui/core/CardContent\"","webpack:///external \"@material-ui/core/CardHeader\"","webpack:///external \"@material-ui/core/Checkbox\"","webpack:///external \"@material-ui/core/CircularProgress\"","webpack:///external \"@material-ui/core/Drawer\"","webpack:///external \"@material-ui/core/ExpansionPanel\"","webpack:///external \"@material-ui/core/ExpansionPanelDetails\"","webpack:///external \"@material-ui/core/ExpansionPanelSummary\"","webpack:///external \"@material-ui/core/FormControl\"","webpack:///external \"@material-ui/core/FormControlLabel\"","webpack:///external \"@material-ui/core/FormGroup\"","webpack:///external \"@material-ui/core/FormLabel\"","webpack:///external \"@material-ui/core/Grid\"","webpack:///external \"@material-ui/core/IconButton\"","webpack:///external \"@material-ui/core/Input\"","webpack:///external \"@material-ui/core/InputLabel\"","webpack:///external \"@material-ui/core/MenuItem\"","webpack:///external \"@material-ui/core/Paper\"","webpack:///external \"@material-ui/core/Radio\"","webpack:///external \"@material-ui/core/RadioGroup\"","webpack:///external \"@material-ui/core/Select\"","webpack:///external \"@material-ui/core/Tab\"","webpack:///external \"@material-ui/core/Tabs\"","webpack:///external \"@material-ui/core/TextField\"","webpack:///external \"@material-ui/core/Typography\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"@material-ui/icons/ArrowDownward\"","webpack:///external \"@material-ui/icons/ArrowLeft\"","webpack:///external \"@material-ui/icons/ArrowUpward\"","webpack:///external \"@material-ui/icons/Assessment\"","webpack:///external \"@material-ui/icons/Autorenew\"","webpack:///external \"@material-ui/icons/BarChart\"","webpack:///external \"@material-ui/icons/BubbleChart\"","webpack:///external \"@material-ui/icons/Cancel\"","webpack:///external \"@material-ui/icons/CheckBox\"","webpack:///external \"@material-ui/icons/Dashboard\"","webpack:///external \"@material-ui/icons/DateRange\"","webpack:///external \"@material-ui/icons/Delete\"","webpack:///external \"@material-ui/icons/Dialpad\"","webpack:///external \"@material-ui/icons/DonutLarge\"","webpack:///external \"@material-ui/icons/Edit\"","webpack:///external \"@material-ui/icons/ExpandMore\"","webpack:///external \"@material-ui/icons/FileCopy\"","webpack:///external \"@material-ui/icons/GridOn\"","webpack:///external \"@material-ui/icons/Image\"","webpack:///external \"@material-ui/icons/List\"","webpack:///external \"@material-ui/icons/ListAlt\"","webpack:///external \"@material-ui/icons/Lock\"","webpack:///external \"@material-ui/icons/PieChart\"","webpack:///external \"@material-ui/icons/RadioButtonChecked\"","webpack:///external \"@material-ui/icons/Receipt\"","webpack:///external \"@material-ui/icons/Refresh\"","webpack:///external \"@material-ui/icons/Reorder\"","webpack:///external \"@material-ui/icons/Save\"","webpack:///external \"@material-ui/icons/SelectAll\"","webpack:///external \"@material-ui/icons/Settings\"","webpack:///external \"@material-ui/icons/Share\"","webpack:///external \"@material-ui/icons/Subject\"","webpack:///external \"@material-ui/icons/TableChart\"","webpack:///external \"@material-ui/icons/TextFields\"","webpack:///external \"@material-ui/icons/TextFormat\"","webpack:///external \"@material-ui/icons/TextRotationNone\"","webpack:///external \"@material-ui/icons/Timeline\"","webpack:///external \"@material-ui/icons/Title\"","webpack:///external \"@material-ui/icons/TouchApp\"","webpack:///external \"@material-ui/icons/ViewList\"","webpack:///external \"@material-ui/icons/VisibilityOff\"","webpack:///external \"@material-ui/lab/Autocomplete\"","webpack:///external \"@material-ui/pickers\"","webpack:///external \"axios\"","webpack:///external \"d3-scale\"","webpack:///external \"js-cookie\"","webpack:///external \"material-table\"","webpack:///external \"next/config\"","webpack:///external \"next/router\"","webpack:///external \"prismjs/components/prism-clike\"","webpack:///external \"prismjs/components/prism-core\"","webpack:///external \"prismjs/components/prism-javascript\"","webpack:///external \"react\"","webpack:///external \"react-grid-layout\"","webpack:///external \"react-simple-code-editor\"","webpack:///external \"sweetalert2\"","webpack:///external \"uuid\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport User from '../types/users.types'\nimport Dashboard from '../types/dashboard.types'\nimport Datasource from '../types/datasource.types'\nimport Widget from '../types/widget.types'\nimport WidgetSettings from '../types/widgetSettings.type'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class DashboardActions {\n\n  public static async createDashboard({ Authorization, dashboard }: { dashboard: Dashboard, Authorization?: string }): Promise<Dashboard> {\n    return axios\n      .post(`${API_URL}/Dashboards`, dashboard, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDashboards({ Authorization, query }: { Authorization?: string, query?: any }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards`, { headers: { Authorization: Authorization || Cookie.get('id') }, params: { filter: { where: { isSub: false } } } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async linkSubDashboard({ id, subDashboardId }: { id: string, subDashboardId: string }): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/subDashboards`,\n        { dashboardId: id, subDashboardId },\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async unLinkSubDashboard({ id, subDashboardId }: { id: string, subDashboardId: string }): Promise<any> {\n    return axios\n      .delete(`${API_URL}/Dashboards/${id}/subDashboards/${subDashboardId}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getSubDashboards({ Authorization, id }: { Authorization?: string, id: string }): Promise<any> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/subDashboards`, { headers: { Authorization: Authorization || Cookie.get('id') }, params: { filter: { include: 'subDashboard' } } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getDashboardById(id: string): Promise<Dashboard> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async updateDashboard(id: string, data): Promise<Dashboard> {\n    return axios\n      .patch(`${API_URL}/Dashboards/${id}`, data)\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteDashboard(data: Datasource): Promise<Dashboard> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getWidgetSettings({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/widgetSettings`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getCollaborators({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<User>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/collaborators`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getCollaboratorations({ Authorization }: { Authorization?: string }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards/collaborations`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async addCollaborator(\n    { Authorization, email, id, editor, viewer }: { Authorization?: string, email: string, id: string, editor: boolean, viewer: boolean }\n  ): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/dashboardRoleMappings`,\n        { email, editor, viewer },\n        { headers: { Authorization: Authorization || Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async addWidgetToDashboard(id: string, fk: string): Promise<Dashboard> {\n    return axios\n      .put(`${API_URL}/Dashboards/${id}/widgetSettings/rel/${fk}`, { dashboardId: id, widgetSettingsId: fk }, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async removeWidgetFromDashboard(data: Datasource): Promise<Dashboard> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n}\n\n","import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport Datasource from '../types/datasource.types'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class DatasourceActions {\n\n  public static async createDatasource(data: Datasource): Promise<Datasource> {\n    return axios\n      .post(`${API_URL}/DataSources`, data, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async updateDatasource(id: string, data: Datasource): Promise<Datasource> {\n    return axios\n      .patch(`${API_URL}/DataSources/${id}`, data, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDatasources({ Authorization, query }: { Authorization?: string, query?: any }): Promise<Array<Datasource>> {\n    return axios\n      .get(`${API_URL}/DataSources`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getUserDatasources(id: string, query: any): Promise<Array<Datasource>> {\n    return axios\n      .get(`${API_URL}/users/${id}/dataSrouces`, { headers: { Authorization: Cookie.get('id') }, params: { ...query } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDatasourceById(id: string): Promise<Datasource> {\n    return axios\n      .get(`${API_URL}/DataSources/${id}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async removeDatasource(id: string): Promise<Datasource> {\n    return axios\n      .delete(`${API_URL}/DataSources/${id}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDocList(id: string): Promise<any> {\n    return axios\n      .get(`${API_URL}/DataSources/${id}/doc-list`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getFieldList(id: string, docId: string): Promise<any> {\n    return axios\n      .get(`${API_URL}/DataSources/${id}/field-list`, { headers: { Authorization: Cookie.get('id') }, params: { docId } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async queryDatasource(query: string): Promise<any> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n}\n\n","import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport User from '../types/users.types'\nimport Dashboard from '../types/dashboard.types'\nimport Datasource from '../types/datasource.types'\nimport Widget from '../types/widget.types'\nimport MeasureCondition from '../types/measureCondition.types'\nimport WidgetSettings from '../types/widgetSettings.type'\nimport { promises } from 'dns'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class WidgetSettingsActions {\n\n  public static async addWidgetSettingsDocument(widgetSettingsId: string, data): Promise<any> {\n    return axios\n      .post(`${API_URL}/WidgetSettings/${widgetSettingsId}/add-document`, data, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async editWidgetSettingsDocument(widgetSettingsId: string, data, keyId: string): Promise<any> {\n    return axios\n      .post(`${API_URL}/WidgetSettings/${widgetSettingsId}/edit-document`, data, { headers: { Authorization: Cookie.get('id') }, params: { keyId } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteWidgetSettingsDocument(widgetSettingsId: string, keyId: string): Promise<any> {\n    return axios\n      .delete(`${API_URL}/WidgetSettings/${widgetSettingsId}/delete-document`, { headers: { Authorization: Cookie.get('id') }, params: { keyId } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async createWidgetSettings(widgetSettings: WidgetSettings): Promise<WidgetSettings> {\n    return axios\n      .post(`${API_URL}/WidgetSettings`, widgetSettings, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getSubWidgets(widgetSettingsId: string): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings`,\n        {\n          headers: {\n            Authorization: Cookie.get('id')\n          },\n          params: {\n            filter: { include: 'subWidgetSettings' }\n          }\n        }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async exportWidgetData(widgetSettingsId: string, format: string, method: string, selectedFields: Array<any>): Promise<any> {\n    if (format == 'email') {\n      return axios\n        .get(\n          `${API_URL}/WidgetSettings/${widgetSettingsId}/export-data`,\n          {\n            headers: { Authorization: Cookie.get('id') },\n            params: { format, selectedFields, method }\n          }\n        )\n        .then(res => res.data)\n        .catch(err => err.response)\n    } else {\n      window.open(`${API_URL}/WidgetSettings/${widgetSettingsId}/export-data?format=${format}&method=${method}&selectedFields=${selectedFields}`)\n    }\n  }\n\n  public static async createSubWidget(widgetSettingsId: string, subWidgetSettingsId: string): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings`,\n        { subWidgetSettingsId },\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getWidgetSettingsMeasureConditions(widgetSettingsId: string): Promise<Array<MeasureCondition>> {\n    return axios\n      .get(`${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async createWidgetSettingsMeasureConditions(widgetSettingsId: string, measureCondition: MeasureCondition): Promise<MeasureCondition> {\n    return axios\n      .post(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions`,\n        measureCondition,\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteWidgetSettingsMeasureConditions(widgetSettingsId: string, measureConditionId: string): Promise<any> {\n    return axios\n      .delete(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/measureConditions/${measureConditionId}`,\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteSubWidget(widgetSettingsId: string, subWidgetSettingsId: string): Promise<any> {\n    return axios\n      .delete(\n        `${API_URL}/WidgetSettings/${widgetSettingsId}/subWidgetSettings/${subWidgetSettingsId}`,\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getFormGroupWidgets(): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(\n        `${API_URL}/WidgetSettings`,\n        {\n          headers: {\n            Authorization: Cookie.get('id')\n          },\n          params: {\n            filter: { where: { type: \"Form Group\" } }\n          }\n        }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async getWidgetSettings(): Promise<Array<WidgetSettings>> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async getWidgetSettingsById(id: string, Authorization?: string): Promise<WidgetSettings> {\n    return axios\n      .get(`${API_URL}/WidgetSettings/${id}`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async updateWidgetSettings(id: string, widgetSettings: WidgetSettings): Promise<WidgetSettings> {\n    return axios\n      .patch(`${API_URL}/WidgetSettings/${id}`, widgetSettings, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  // TODO\n  public static async deleteWidgetSettings(id: string): Promise<WidgetSettings> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async executeWidgetQuery(id: string, Authorization?: string): Promise<any> {\n    return axios\n      .get(`${API_URL}/WidgetSettings/${id}/execute-query`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport Grid from '@material-ui/core/Grid'\nimport WidgetIcon from '../widgets/widget-icon'\n\nimport TableChartIcon from '@material-ui/icons/TableChart'\nimport TimelineIcon from '@material-ui/icons/Timeline'\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart'\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\nimport PieChartIcon from '@material-ui/icons/PieChart'\nimport BarChartIcon from '@material-ui/icons/BarChart'\nimport ListAltIcon from '@material-ui/icons/ListAlt'\n\nconst useStyles = makeStyles(() => ({\n\n}))\n\nconst MyWidgets = ({ addPredefinedWidget, widgetSettings }) => {\n  const classes = useStyles()\n\n  const TableWidgets = [\n    { title: 'Table', icon: <TableChartIcon /> }\n  ]\n  const ChartWidgets = [\n    { title: 'Line Chart', icon: <TimelineIcon /> },\n    { title: 'Bar Chart', icon: <BarChartIcon /> },\n    { title: 'Bubble Chart', icon: <BubbleChartIcon /> },\n    { title: 'Pie Chart', icon: <PieChartIcon /> },\n    { title: 'Donut Chart', icon: <DonutLargeIcon /> },\n    { title: 'Gantt Chart', icon: <ListAltIcon /> }\n  ]\n\n  const MyTableWidgets = widgetSettings.filter(widget => widget.type.indexOf('Table') > -1).map(widget => ({ ...widget, icon: TableWidgets.find($ => $.title == widget.type).icon }))\n  const MyChartWidgets = widgetSettings.filter(widget => widget.type.indexOf('Chart') > -1).map(widget => ({ ...widget, icon: ChartWidgets.find($ => $.title == widget.type).icon }))\n\n  return (\n    <div className={classes.root}>\n\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography className={classes.heading}>Tables</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={2}>\n            {MyTableWidgets.map(widget => (\n              <Grid item xs={4} key={widget.id}>\n                <WidgetIcon widget={widget} addPredefinedWidget={addPredefinedWidget} icon={widget.icon} title={widget.title} />\n              </Grid>\n            ))}\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography className={classes.heading}>Charts</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={2}>\n            {MyChartWidgets.map(widget => (\n              <Grid item xs={4} key={widget.id}>\n                <WidgetIcon widget={widget} addPredefinedWidget={addPredefinedWidget} icon={widget.icon} title={widget.title} />\n              </Grid>\n            ))}\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  )\n}\n\nexport default MyWidgets","import { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport Grid from '@material-ui/core/Grid'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Card from '@material-ui/core/Card'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(() => ({\n\n}))\n\nconst AddCollaboratorCard = ({ id, cancel }) => {\n  const classes = useStyles()\n  const [email, setEmail] = useState('')\n  const [permissions, setPermissions] = useState({ viewer: false, editor: false })\n\n  const handleEmailChange = e => { setEmail(e.target.value) }\n\n  const handlePermissionsChange = (event) => {\n    setPermissions({\n      ...permissions,\n      [event.target.name]: event.target.checked\n    })\n  }\n\n  const addCollaborator = async () => {\n    const { editor, viewer } = permissions\n    try {\n      const collaboration = await DashboardActions.addCollaborator({ email, editor, viewer, id })\n      if (collaboration.status == 500) {\n        Swal.fire('Error', collaboration.data.error.message, 'error')\n      } else {\n        if (collaboration.sent)\n          Swal.fire('Success', `${email} is now a collaborator on this board. `, 'success')\n        else\n          Swal.fire('Success', `${email} is not a member yet, but they'll be assigned as a collaborator as soon as they sign up. `, 'success')\n\n        setEmail('')\n        setPermissions({ editor: false, viewer: false })\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card style={{ marginBottom: 10 }}>\n      <Grid spacing={2} container style={{ margin: 0, width: '100%' }}>\n        <Grid item xs={6} className={classes.name}>\n          <TextField type=\"email\" onChange={handleEmailChange} label=\"Email\" placeholder=\"example@domain.com\" fullWidth />\n        </Grid>\n        <Grid item xs={6} style={{ display: 'flex', alignItems: 'flex-end' }}>\n          <FormControlLabel\n            style={{ margin: 0 }}\n            control={<Checkbox checked={permissions.viewer} onChange={handlePermissionsChange} name=\"viewer\" />}\n            label=\"Editor\"\n          />\n          <FormControlLabel\n            style={{ margin: 0 }}\n            control={<Checkbox checked={permissions.editor} onChange={handlePermissionsChange} name=\"editor\" />}\n            label=\"Viewer\"\n          />\n        </Grid>\n      </Grid>\n      <Grid spacing={2} container style={{ margin: 0, width: '100%', marginTop: 10 }}>\n        <Grid item xs={6}>\n          <Button fullWidth onClick={cancel}>Cancel</Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Button fullWidth onClick={addCollaborator}>Add</Button>\n        </Grid>\n      </Grid>\n    </Card>\n  )\n}\n\nexport default AddCollaboratorCard","import { makeStyles } from '@material-ui/core/styles'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport Grid from '@material-ui/core/Grid'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport IconButton from '@material-ui/core/IconButton'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles(() => ({\n  name: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  collaboratorActionButtons: {\n    display: 'flex'\n  }\n}))\n\nconst CollaboratorCard = ({ collaborator }) => {\n  const classes = useStyles()\n  const { id, email, firstName, lastName, sent } = collaborator\n  const { viewer, editor } = collaborator.permissions\n\n  return (\n    <Card style={{ marginBottom: 15 }}>\n      <Grid spacing={2} container style={{ margin: 0, width: '100%' }}>\n        <Grid item xs={7} className={classes.name}>\n          <Typography>{email}</Typography>\n          {\n            sent ?\n              (<Typography>{firstName} {lastName}</Typography>) :\n              (<Typography style={{ fontSize: 11 }}>User is not registered yet. They'll recieve the collaboration invitation once they register for an account</Typography>)\n          }\n        </Grid>\n        <Grid item xs={3}>\n          <FormControlLabel\n            style={{ margin: 0 }}\n            control={<Checkbox name=\"viewer\" checked={editor} onChange={() => { console.log() }} />}\n            label=\"Editor\"\n          />\n          <FormControlLabel\n            style={{ margin: 0 }}\n            control={<Checkbox name=\"editor\" checked={viewer} onChange={() => { console.log() }} />}\n            label=\"Viewer\"\n          />\n        </Grid>\n        <Grid item xs={2} className={classes.collaboratorActionButtons}>\n          <IconButton aria-label=\"delete\" style={{ outline: 'none' }}>\n            <DeleteIcon fontSize=\"small\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </Card>\n  )\n}\n\nexport default CollaboratorCard","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport LockIcon from '@material-ui/icons/Lock'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport { useRouter } from 'next/router'\nimport PrivacySettings from './privacy-settings'\nimport GeneralSettings from './general-settings'\nimport SubBoardsSettings from './sub-boards-settings'\n\nconst TabPanel = (props) => {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  )\n}\n\nconst a11yProps = (index) => {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`\n  }\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: 500\n  }\n}))\n\nconst DashboardSettings = ({ id, refresh, setRefresh }) => {\n  const classes = useStyles()\n  const router = useRouter()\n  const [value, setValue] = useState(0)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"General Settings\" icon={<SettingsIcon />} {...a11yProps(0)} />\n          <Tab label=\"Privacy Settings\" icon={<LockIcon />} {...a11yProps(1)} />\n          {id == router.query.id && <Tab label=\"Pages Settings\" icon={<DashboardIcon />} {...a11yProps(2)} />}\n        </Tabs>\n      </AppBar>\n      <div\n        index={value}\n      >\n        <TabPanel value={value} index={0}>\n          <GeneralSettings id={id} refresh={refresh} setRefresh={setRefresh} />\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <PrivacySettings id={id} />\n        </TabPanel>\n        {\n          id == router.query.id && (\n            <TabPanel value={value} index={2}>\n              <SubBoardsSettings id={id} refresh={refresh} setRefresh={setRefresh} />\n            </TabPanel>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default DashboardSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst useStyles = makeStyles(() => ({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n}))\n\nconst GeneralSettings = ({ id, refresh, setRefresh }) => {\n  const classes = useStyles()\n  const [state, setState] = useState({ title: '', description: '' })\n  const [isSub, setIsSub] = useState(false)\n  const [showDelete, setShowDelete] = useState(false)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isEditing, setIsEditing] = useState(false)\n  const [dashboard, setDashboard] = useState({})\n\n  useEffect(() => {\n    const getInitialProps = async () => {\n      try {\n        const $dashboard = await DashboardActions.getDashboardById(id)\n        setDashboard($dashboard)\n        setState({ ...state, title: $dashboard.title, description: dashboard.description })\n        setIsSub($dashboard.isSub ? true : false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getInitialProps()\n  }, [])\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Dashboard Details</span>\n      </h2>\n      <div>\n        <TextField label=\"Title\" value={state.title} placeholder=\"Dashboard Title\" fullWidth />\n\n        <TextField\n          style={{ marginTop: 10 }}\n          fullWidth\n          value={state.description}\n          label=\"Description\"\n          placeholder=\"Dashboard Description\"\n          multiline\n          rows={2}\n          rowsMax={4}\n        />\n\n        <Button fullWidth style={{ marginTop: 10 }}>Save Changes</Button>\n      </div>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Delete Project</span>\n      </h2>\n      {\n        showDelete ? (\n          <Card style={{ marginTop: 10, padding: 15 }}>\n            {\n              !isSub ? (\n                <div>\n                  <Typography style={{ fontSize: 12 }}>\n                    Confirm your delete action by typing in the dashboard title below.\n                  </Typography>\n                  <Typography style={{ fontSize: 8, color: '#c0392b' }}>\n                    *Deleting this project will result in deleting all of its included pages\n                  </Typography>\n                </div>\n              ) : (\n                  <Typography>\n                    Confirm your delete action by typing in the dashboard title below.\n                  </Typography>\n                )\n            }\n            <TextField fullWidth label=\"Title\" placeholder={dashboard.title} />\n            <Grid container spacing={2} style={{ marginTop: 10 }}>\n              <Grid item xs={6}>\n                <Button fullWidth onClick={() => { setShowDelete(false) }}>Cancel</Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button fullWidth style={{ backgroundColor: '#c0392b', color: '#FFF' }}>Confirm Delete</Button>\n              </Grid>\n            </Grid>\n          </Card>\n        ) : (\n            <Button fullWidth onClick={() => { setShowDelete(true) }} style={{ marginTop: 10, backgroundColor: '#c0392b', color: \"#FFF\" }}>Delete Project</Button>\n          )\n      }\n\n    </div>\n  )\n}\n\nexport default GeneralSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport CollaboratorCard from './collaborator-card'\nimport AddCollaboratorCard from './add-new-collaborator'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles(() => ({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n}))\n\nconst PrivacySettings = ({ id }) => {\n  const classes = useStyles()\n  const [collaborators, setCollaborators] = useState([])\n  const [isAddingCollaborator, setIsAddingCollaborator] = useState(false)\n\n  useEffect(() => {\n    const getInitialProps = async () => {\n      try {\n        const $collaborators = await DashboardActions.getCollaborators({ id })\n        setCollaborators($collaborators)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getInitialProps()\n  }, [])\n\n  const renderButtonOrAdd = () => {\n    return isAddingCollaborator ? <AddCollaboratorCard id={id} cancel={() => setIsAddingCollaborator(false)} /> :\n      <Button fullWidth style={{ marginBottom: 10, outline: 'none' }} onClick={() => setIsAddingCollaborator(true)}>Add New Collaborator</Button>\n  }\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Collaborators</span>\n      </h2>\n      <div>\n        {renderButtonOrAdd()}\n        {collaborators.map(collaborator => <CollaboratorCard key={collaborator.id} collaborator={collaborator} />)}\n      </div>\n    </div>\n  )\n}\n\nexport default PrivacySettings","import { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DashboardActions from '../../../actions/dashboard.actions'\n\nconst SubDashboardSettings = ({ id, refresh, setRefresh }) => {\n  const [subDashboards, setSubDashboards] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [update, setUpdate] = useState(0)\n  const [isShowingAddFields, setIsShowingAddFields] = useState(false)\n  const [isAdding, setIsAdding] = useState(false)\n  const [state, setState] = useState({ title: '', description: '', isSub: true })\n\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({ id })\n        setSubDashboards($subDashBoards)\n        setIsLoading(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getSubDashboards()\n  }, [update])\n\n  const addNewDashboard = async () => {\n    try {\n      setIsAdding(true)\n      const subDashboard = await DashboardActions.createDashboard({ dashboard: state })\n      const linkDashboard = await DashboardActions.linkSubDashboard({ subDashboardId: subDashboard.id, id })\n      setUpdate(update + 1)\n      setIsShowingAddFields(false)\n      setIsAdding(false)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const deleteSubDashboard = async (subDashboardId) => {\n    try {\n      const subDashboard = await DashboardActions.unLinkSubDashboard({ id, subDashboardId })\n      setUpdate(update + 1)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n\n  const renderSubDashboardCard = subDashboard => (\n    <Card variant=\"outlined\" key={subDashboard.id} style={{ marginTop: 15 }}>\n      <CardHeader\n        title={subDashboard.subDashboard.title}\n        subheader={subDashboard.subDashboard.createdAt}\n      />\n      <CardContent>\n        <Typography>{subDashboard.subDashboard.description}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button onClick={() => { deleteSubDashboard(subDashboard.id) }}>Delete</Button>\n      </CardActions>\n    </Card>\n  )\n\n  return (\n    <div>\n      {\n        isShowingAddFields ? (\n          <Card variant=\"outlined\">\n\n            <CardContent>\n              <TextField label=\"Title\" fullWidth\n                onChange={event => { setState({ ...state, title: event.target.value }) }}\n              />\n\n              <TextField\n                style={{ marginTop: 10 }}\n                fullWidth\n                label=\"Description\"\n                multiline\n                rows={2}\n                rowsMax={4}\n                onChange={event => { setState({ ...state, description: event.target.value }) }}\n              />\n            </CardContent>\n\n            {\n              isAdding ? (\n                <CardActions>\n                  <CircularProgress />\n                </CardActions>\n              ) : (\n                  <CardActions>\n                    <Button onClick={addNewDashboard}>Add</Button>\n                    <Button onClick={() => { setIsShowingAddFields(false) }}>Cancel</Button>\n                  </CardActions>\n                )\n            }\n\n          </Card >\n        ) : (<Button fullWidth onClick={() => { setIsShowingAddFields(true) }}>Add New Page</Button>)\n      }\n      {\n        isLoading ? (\n          <div style={{ display: 'flex', justifyContent: 'center', marginTop: 15 }}>\n            <CircularProgress />\n          </div>) : subDashboards.map(subDashboard => (renderSubDashboardCard(subDashboard)))\n      }\n    </div >\n  )\n}\n\nexport default SubDashboardSettings","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport Grid from '@material-ui/core/Grid'\nimport WidgetIcon from '../widgets/widget-icon'\nimport { v4 as uuidv4 } from 'uuid'\nimport TableChartIcon from '@material-ui/icons/TableChart'\nimport TimelineIcon from '@material-ui/icons/Timeline'\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart'\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\nimport PieChartIcon from '@material-ui/icons/PieChart'\nimport BarChartIcon from '@material-ui/icons/BarChart'\nimport ListAltIcon from '@material-ui/icons/ListAlt'\nimport TextRotationNoneIcon from '@material-ui/icons/TextRotationNone'\nimport TouchAppIcon from '@material-ui/icons/TouchApp'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\nimport DateRangeIcon from '@material-ui/icons/DateRange'\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\nimport DialpadIcon from '@material-ui/icons/Dialpad'\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff'\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked'\nimport SelectAllIcon from '@material-ui/icons/SelectAll'\nimport TextFormatIcon from '@material-ui/icons/TextFormat'\nimport TextFieldsIcon from '@material-ui/icons/TextFields'\nimport GridOnIcon from '@material-ui/icons/GridOn'\nimport ReceiptIcon from '@material-ui/icons/Receipt'\nimport ImageIcon from '@material-ui/icons/Image'\nimport ListIcon from '@material-ui/icons/List'\nimport SubjectIcon from '@material-ui/icons/Subject'\nimport AutorenewIcon from '@material-ui/icons/Autorenew'\nimport TitleIcon from '@material-ui/icons/Title'\nimport ViewListIcon from '@material-ui/icons/ViewList'\nimport ReorderIcon from '@material-ui/icons/Reorder'\n\nconst useStyles = makeStyles(() => ({\n\n}))\n\nconst SystemWidgets = (props) => {\n  const classes = useStyles()\n\n  const TableWidgets = [\n    { title: 'Table', icon: <TableChartIcon /> }\n  ]\n  const ChartWidgets = [\n    { title: 'Line Chart', icon: <TimelineIcon /> },\n    { title: 'Bar Chart', icon: <BarChartIcon /> },\n    { title: 'Bubble Chart', icon: <BubbleChartIcon /> },\n    { title: 'Pie Chart', icon: <PieChartIcon /> },\n    { title: 'Donut Chart', icon: <DonutLargeIcon /> },\n    { title: 'Gantt Chart', icon: <ListAltIcon /> }\n  ]\n  const FormControlsWidgets = [\n    { title: 'Form Group', icon: <ReorderIcon /> },\n    { title: 'Auto Complete', icon: <TextRotationNoneIcon /> },\n    { title: 'Button', icon: <TouchAppIcon /> },\n    { title: 'Checkbox', icon: <CheckBoxIcon /> },\n    { title: 'Date Time', icon: <DateRangeIcon /> },\n    { title: 'File', icon: <FileCopyIcon /> },\n    { title: 'Number', icon: <DialpadIcon /> },\n    { title: 'Password', icon: <VisibilityOffIcon /> },\n    { title: 'Radio', icon: <RadioButtonCheckedIcon /> },\n    { title: 'Select', icon: <SelectAllIcon /> },\n    { title: 'Text Area', icon: <TextFormatIcon /> },\n    { title: 'Text Field', icon: <TextFieldsIcon /> }\n  ]\n  const HtmlElementWidgets = [\n    { title: 'Accordion', icon: <ExpandMoreIcon /> },\n    { title: 'Data Grid', icon: <GridOnIcon /> },\n    { title: 'Div', icon: <ReceiptIcon /> },\n    { title: 'Image', icon: <ImageIcon /> },\n    { title: 'List', icon: <ListIcon /> },\n    { title: 'Paragraph', icon: <SubjectIcon /> },\n    { title: 'Progress Bar', icon: <AutorenewIcon /> },\n    { title: 'Span', icon: <TitleIcon /> },\n    { title: 'Tabs', icon: <ViewListIcon /> }\n  ]\n\n  return (\n    <div className={classes.root}>\n\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography className={classes.heading}>Tables</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={2}>\n            {TableWidgets.map(chart => (\n              <Grid item xs={4} key={uuidv4()}>\n                <WidgetIcon onWidgetClick={props.onWidgetClick} icon={chart.icon} title={chart.title} />\n              </Grid>\n            ))}\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography className={classes.heading}>Charts</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={2}>\n            {ChartWidgets.map(chart => (\n              <Grid item xs={4} key={uuidv4()}>\n                <WidgetIcon onWidgetClick={props.onWidgetClick} icon={chart.icon} title={chart.title} />\n              </Grid>\n            ))}\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography className={classes.heading}>HTML Elements</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={2}>\n            {HtmlElementWidgets.map(element => (\n              <Grid item xs={4} key={uuidv4()}>\n                <WidgetIcon onWidgetClick={props.onWidgetClick} icon={element.icon} title={element.title} />\n              </Grid>\n            ))}\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography className={classes.heading}>Form Controls</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={2}>\n            {FormControlsWidgets.map(control => (\n              <Grid item xs={4} key={uuidv4()}>\n                <WidgetIcon onWidgetClick={props.onWidgetClick} icon={control.icon} title={control.title} />\n              </Grid>\n            ))}\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n    </div>\n  )\n}\n\nexport default SystemWidgets","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport SystemWidgets from './system-widgets'\nimport MyWidgets from './my-widgets'\n\nconst TabPanel = (props) => {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  )\n}\n\nconst a11yProps = (index) => {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`\n  }\n}\n\nconst useStyles = makeStyles(() => ({\n\n}))\n\nconst WidgetSidemenu = ({ onWidgetClick, widgetSettings, addPredefinedWidget }) => {\n  const classes = useStyles()\n  const [value, setValue] = useState(0)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  return (\n    <div>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"System Widgets\" {...a11yProps(0)} />\n          <Tab label=\"My Widgets\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <div\n        index={value}\n      >\n        <TabPanel value={value} index={0}>\n          <SystemWidgets onWidgetClick={onWidgetClick} />\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <MyWidgets addPredefinedWidget={addPredefinedWidget} widgetSettings={widgetSettings} />\n        </TabPanel>\n      </div>\n    </div>\n  )\n}\n\nexport default WidgetSidemenu","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst AreaChartWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [query, setQuery] = useState({})\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {}\n        },\n        type: 'Table'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <div>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Widget Properties</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id='title'>Title</InputLabel>\n          <Input />\n        </FormControl>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Connection Settings</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id=\"data-source\">Data Source</InputLabel>\n          <Select\n            name=\"datasource\"\n            labelId=\"data-source\"\n            value={datasource}\n            onChange={handleDatasourceChange}\n          >\n            {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n          <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n          <Select\n            name=\"docList\"\n            labelId=\"doc-list\"\n            value={doc}\n            onChange={handleDocChange}\n          >\n            {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        {renderFieldSettings()}\n\n        {renderQuerySettings()}\n\n        <Button fullWidth onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n\n      </div>\n    </div>\n  )\n}\n\nexport default AreaChartWidgetSettings","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  AreaSeries,\n  Title,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { ArgumentScale, Animation } from '@devexpress/dx-react-chart';\nimport { scalePoint } from 'd3-scale';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst data = [\n  { year: '2010', android: 67225, ios: 46598 },\n  { year: '2011', android: 179873, ios: 90560 },\n  { year: '2012', android: 310088, ios: 118848 },\n  { year: '2015', android: 539318, ios: 189924 },\n];\n\nconst chartRootStyles = {\n  chart: {\n    paddingRight: '20px',\n  },\n};\nconst legendStyles = {\n  root: {\n    display: 'flex',\n    margin: 'auto',\n    flexDirection: 'row',\n  },\n};\nconst legendLabelStyles = theme => ({\n  label: {\n    paddingTop: theme.spacing(1),\n  },\n});\nconst legendItemStyles = {\n  item: {\n    flexDirection: 'column',\n  },\n};\n\nconst ChartRootBase = ({ classes, ...restProps }) => (\n  <Chart.Root {...restProps} className={classes.chart} />\n);\nconst LegendRootBase = ({ classes, ...restProps }) => (\n  <Legend.Root {...restProps} className={classes.root} />\n);\nconst LegendLabelBase = ({ classes, ...restProps }) => (\n  <Legend.Label {...restProps} className={classes.label} />\n);\nconst LegendItemBase = ({ classes, ...restProps }) => (\n  <Legend.Item {...restProps} className={classes.item} />\n);\nconst ChartRoot = withStyles(chartRootStyles, { name: 'ChartRoot' })(ChartRootBase);\nconst LegendRoot = withStyles(legendStyles, { name: 'LegendRoot' })(LegendRootBase);\nconst LegendLabel = withStyles(legendLabelStyles, { name: 'LegendLabel' })(LegendLabelBase);\nconst LegendItem = withStyles(legendItemStyles, { name: 'LegendItem' })(LegendItemBase);\n\nexport default class Demo extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data,\n    };\n  }\n\n  render() {\n    const { data: chartData } = this.state;\n    return (\n      <Paper>\n        <Chart\n          data={chartData}\n          rootComponent={ChartRoot}\n        >\n          <ArgumentScale factory={scalePoint} />\n          <ArgumentAxis />\n          <ValueAxis />\n\n          <AreaSeries\n            name=\"Android\"\n            valueField=\"android\"\n            argumentField=\"year\"\n          />\n          <AreaSeries\n            name=\"iOS\"\n            valueField=\"ios\"\n            argumentField=\"year\"\n          />\n          <Animation />\n          <Legend\n            position=\"bottom\"\n            rootComponent={LegendRoot}\n            itemComponent={LegendItem}\n            labelComponent={LegendLabel}\n          />\n          <Title\n            text=\"Worldwide Sales to End Users by OS\"\n          />\n        </Chart>\n      </Paper>\n    );\n  }\n}","import AreaChartWidget from './area-chart-widget'\nimport AreaChartWidgetSettings from './area-chart-widget-settings'\nexport { AreaChartWidget, AreaChartWidgetSettings }","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst BarChartWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [query, setQuery] = useState({})\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {}\n        },\n        type: 'Table'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <div>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Widget Properties</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id='title'>Title</InputLabel>\n          <Input />\n        </FormControl>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Connection Settings</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id=\"data-source\">Data Source</InputLabel>\n          <Select\n            name=\"datasource\"\n            labelId=\"data-source\"\n            value={datasource}\n            onChange={handleDatasourceChange}\n          >\n            {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n          <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n          <Select\n            name=\"docList\"\n            labelId=\"doc-list\"\n            value={doc}\n            onChange={handleDocChange}\n          >\n            {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        {renderFieldSettings()}\n\n        {renderQuerySettings()}\n\n        <Button fullWidth onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n\n      </div>\n    </div>\n  )\n}\n\nexport default BarChartWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n  ValueAxis,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { Animation } from '@devexpress/dx-react-chart'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport BarChartWidgetSettings from './bar-chart-widget-settings'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\",\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))\n\nconst BarChartWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [data, setData] = useState([])\n  const [isLoadingData, setIsLoadingData] = useState(false)\n  const [refresh, setRefresh] = useState(0)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n      console.log($data, $data)\n      setData($data)\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n      console.log('$widget', $widget)\n      setWidget($widget)\n      return $widget\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getWidget()\n    getWidgetData()\n  }, [refresh])\n\n  const refreshData = async () => {\n    setIsLoadingData(true)\n    getWidget()\n    getWidgetData()\n    setIsLoadingData(false)\n  }\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1)\n    toggleDrawer('right', false)\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const renderChart = () => {\n    return isLoadingData || !widget ? (<CircularProgress />) : (\n      <Paper>\n        <Chart\n          data={data}\n        >\n          <ArgumentAxis />\n          <ValueAxis max={7} />\n\n          <BarSeries\n            valueField=\"total\"\n            argumentField=\"month\"\n          />\n          <Title text=\"World population\" />\n          <Animation />\n        </Chart>\n      </Paper>\n    )\n  }\n\n  return (\n    <div>\n      <div className={classes.widgetActions}>\n        <div className={classes.widgetTitle}>\n          <Typography style={{ color: \"#FFF\" }}>Widget Title</Typography>\n        </div>\n        <div className={classes.actionButtons}>\n          <IconButton onClick={toggleDrawer('right', true)}>\n            <SettingsIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={refreshData}>\n            <RefreshIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n        </div>\n      </div>\n      <div>\n        {renderChart()}\n      </div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        <BarChartWidgetSettings widget={widget} handleSettingsClose={handleSettingsClose} />\n      </Drawer>\n    </div>\n  )\n}\n\nexport default BarChartWidget","import BarChartWidget from './bar-chart-widget'\nimport BarChartWidgetSettings from './bar-chart-widget-settings'\nexport { BarChartWidget, BarChartWidgetSettings }","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst DonutChartWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [query, setQuery] = useState({})\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {}\n        },\n        type: 'Table'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <div>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Widget Properties</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id='title'>Title</InputLabel>\n          <Input />\n        </FormControl>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Connection Settings</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id=\"data-source\">Data Source</InputLabel>\n          <Select\n            name=\"datasource\"\n            labelId=\"data-source\"\n            value={datasource}\n            onChange={handleDatasourceChange}\n          >\n            {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n          <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n          <Select\n            name=\"docList\"\n            labelId=\"doc-list\"\n            value={doc}\n            onChange={handleDocChange}\n          >\n            {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        {renderFieldSettings()}\n\n        {renderQuerySettings()}\n\n        <Button fullWidth onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n\n      </div>\n    </div>\n  )\n}\n\nexport default DonutChartWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport {\n  Chart,\n  PieSeries,\n  Title,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { Animation } from '@devexpress/dx-react-chart'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport DonutChartWidgetSettings from './donut-chart-widget-settings'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\",\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))\n\nconst DonutChartWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [data, setData] = useState([])\n  const [isLoadingData, setIsLoadingData] = useState(false)\n  const [refresh, setRefresh] = useState(0)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n      console.log($data, $data)\n      setData($data)\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n      console.log('$widget', $widget)\n      setWidget($widget)\n      return $widget\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getWidget()\n    getWidgetData()\n  }, [refresh])\n\n  const refreshData = async () => {\n    setIsLoadingData(true)\n    getWidget()\n    getWidgetData()\n    setIsLoadingData(false)\n  }\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1)\n    toggleDrawer('right', false)\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const renderChart = () => {\n    return isLoadingData || !widget ? (<CircularProgress />) : (\n      <Paper>\n        <Chart data={data}>\n          <PieSeries\n            valueField=\"total\"\n            argumentField=\"month\"\n            innerRadius={0.6}\n          />\n          <Title\n            text=\"The Population of Continents and Regions\"\n          />\n          <Animation />\n        </Chart>\n      </Paper>\n    )\n  }\n\n  return (\n    <div>\n      <div className={classes.widgetActions}>\n        <div className={classes.widgetTitle}>\n          <Typography style={{ color: \"#FFF\" }}>Widget Title</Typography>\n        </div>\n        <div className={classes.actionButtons}>\n          <IconButton onClick={toggleDrawer('right', true)}>\n            <SettingsIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={refreshData}>\n            <RefreshIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n        </div>\n      </div>\n      <div>\n        {renderChart()}\n      </div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        <DonutChartWidgetSettings widget={widget} handleSettingsClose={handleSettingsClose} />\n      </Drawer>\n    </div>\n  )\n}\n\nexport default DonutChartWidget","import DonutChartWidget from './donut-chart-widget'\nimport DonutChartWidgetSettings from './donut-chart-widget-settings'\nexport { DonutChartWidget, DonutChartWidgetSettings }","export * from './area-chart'\nexport * from './bar-chart'\nexport * from './donut-chart'\n// export * from './gantt-chart'\nexport * from './line-chart'\nexport * from './pie-chart'","import LineChartWidget from './line-chart-widget'\nimport LineChartWidgetSettings from './line-chart-widget-settings'\nexport { LineChartWidget, LineChartWidgetSettings }","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst LineChartWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [query, setQuery] = useState({})\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\nconst saveConfigSettings = async () => {\n  try {\n    const data = {\n      dataSourceId: datasource,\n      config: {\n        docId: doc,\n        fields,\n        type: 'simple',\n        func: 'find',\n        query: {}\n      },\n      type: 'Table'\n    }\n    if (isAdding) {\n      onWidgetAdd(data)\n    } else {\n      const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n      handleSettingsClose(update)\n    }\n  } catch (e) {\n    console.log(e)\n  }\n}\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <div>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Widget Properties</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id='title'>Title</InputLabel>\n          <Input />\n        </FormControl>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Connection Settings</span>\n        </h2>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel id=\"data-source\">Data Source</InputLabel>\n          <Select\n            name=\"datasource\"\n            labelId=\"data-source\"\n            value={datasource}\n            onChange={handleDatasourceChange}\n          >\n            {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n          <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n          <Select\n            name=\"docList\"\n            labelId=\"doc-list\"\n            value={doc}\n            onChange={handleDocChange}\n          >\n            {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n          </Select>\n        </FormControl>\n\n        {renderFieldSettings()}\n\n        {renderQuerySettings()}\n\n        <Button fullWidth onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n\n      </div>\n    </div>\n  )\n}\n\nexport default LineChartWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  LineSeries,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { ValueScale } from '@devexpress/dx-react-chart'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport LineChartWidgetSettings from './line-chart-widget-settings'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\",\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))\n\nconst LineChartWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [data, setData] = useState([])\n  const [isLoadingData, setIsLoadingData] = useState(false)\n  const [refresh, setRefresh] = useState(0)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n      setData($data)\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n      setWidget($widget)\n      return $widget\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getWidget()\n    getWidgetData()\n  }, [refresh])\n\n  const refreshData = async () => {\n    setIsLoadingData(true)\n    getWidget()\n    getWidgetData()\n    setIsLoadingData(false)\n  }\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1)\n    toggleDrawer('right', false)\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const renderTable = () => {\n    return isLoadingData || !widget ? (<CircularProgress />) : <Paper>\n      <Chart data={data}>\n        <ValueScale name=\"total\" />\n        <ArgumentAxis />\n        <ValueAxis scaleName=\"total\" position=\"left\" showGrid={true} showLine showTicks />\n        <LineSeries\n          name=\"Total Transactions\"\n          valueField=\"total\"\n          argumentField=\"month\"\n          scaleName=\"total\"\n        />\n        <Legend />\n      </Chart>\n    </Paper>\n  }\n\n  return (\n    <div>\n      <div className={classes.widgetActions}>\n        <div className={classes.widgetTitle}>\n          <Typography style={{ color: \"#FFF\" }}>Widget Title</Typography>\n        </div>\n        <div className={classes.actionButtons}>\n          <IconButton onClick={toggleDrawer('right', true)}>\n            <SettingsIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={refreshData}>\n            <RefreshIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n        </div>\n      </div>\n      <div>\n        {renderTable()}\n      </div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        <LineChartWidgetSettings widget={widget} handleSettingsClose={handleSettingsClose} />\n      </Drawer>\n    </div>\n  )\n}\n\nexport default LineChartWidget","import PieChartWidget from './pie-chart-widget'\nimport PieChartWidgetSettings from './pie-chart-widget-settings'\nexport { PieChartWidget, PieChartWidgetSettings }","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst PieChartWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [query, setQuery] = useState({})\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {}\n        },\n        type: 'Table'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id='title'>Title</InputLabel>\n        <Input />\n      </FormControl>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Connection Settings</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id=\"data-source\">Data Source</InputLabel>\n        <Select\n          name=\"datasource\"\n          labelId=\"data-source\"\n          value={datasource}\n          onChange={handleDatasourceChange}\n        >\n          {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n        <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n        <Select\n          name=\"docList\"\n          labelId=\"doc-list\"\n          value={doc}\n          onChange={handleDocChange}\n        >\n          {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      {renderFieldSettings()}\n\n      {renderQuerySettings()}\n\n      <Button fullWidth onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n    </div>\n  )\n}\n\nexport default PieChartWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport {\n  Chart,\n  PieSeries,\n  Title,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { Animation } from '@devexpress/dx-react-chart'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport PieChartWidgetSettings from './pie-chart-widget-settings'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\",\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))\n\nconst PieChartWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [data, setData] = useState([])\n  const [isLoadingData, setIsLoadingData] = useState(false)\n  const [refresh, setRefresh] = useState(0)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n      console.log($data, $data)\n      setData($data)\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n      console.log('$widget', $widget)\n      setWidget($widget)\n      return $widget\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getWidget()\n    getWidgetData()\n  }, [refresh])\n\n  const refreshData = async () => {\n    setIsLoadingData(true)\n    getWidget()\n    getWidgetData()\n    setIsLoadingData(false)\n  }\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1)\n    toggleDrawer('right', false)\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const renderChart = () => {\n    return isLoadingData || !widget ? (<CircularProgress />) : (\n      <Paper>\n        <Chart\n          data={data}\n        >\n          <PieSeries\n            valueField=\"total\"\n            argumentField=\"month\"\n          />\n          <Title\n            text=\"Area of Countries\"\n          />\n          <Animation />\n        </Chart>\n      </Paper>\n    )\n  }\n\n  return (\n    <div>\n      <div className={classes.widgetActions}>\n        <div className={classes.widgetTitle}>\n          <Typography style={{ color: \"#FFF\" }}>Widget Title</Typography>\n        </div>\n        <div className={classes.actionButtons}>\n          <IconButton onClick={toggleDrawer('right', true)}>\n            <SettingsIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={refreshData}>\n            <RefreshIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n        </div>\n      </div>\n      <div>\n        {renderChart()}\n      </div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        <PieChartWidgetSettings widget={widget} handleSettingsClose={handleSettingsClose} />\n      </Drawer>\n    </div>\n  )\n}\n\nexport default PieChartWidget","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Radio from '@material-ui/core/Radio'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\nimport { Typography } from '@material-ui/core'\n\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst AutoCompleteWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [selectionOption, setSelectionOption] = useState('datasource')\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', placeholder: '', className: '', value: ''\n  })\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : '')\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = event => {\n    const { value } = event.target\n    setFields(value)\n  }\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  const handleSourceChange = (event) => {\n    const { value } = event.target\n    setSelectionOption(value)\n  }\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        config: {\n          docId: doc,\n          fields: [fields],\n          type: selectionOption == 'datasource' ? 'simple' : 'constant',\n          func: 'find',\n          query: {},\n          values: selectionOption == 'datasource' ? [] : []\n        },\n        properties,\n        type: 'Auto Complete'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const renderFieldSettings = () => fieldList.length ?\n    (\n      <div>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Fields Settings</span>\n        </h2>\n        <RadioGroup onChange={handleFieldChange}>\n          {\n            fieldList.map(field => (\n              <FormControlLabel\n                key={field}\n                control={<Radio value={field} />}\n                label={field}\n              />))\n          }\n        </RadioGroup>\n        <Typography style={{ fontSize: 12, color: '#F00', marginTop: 10 }}>\n          * You can only select one field in an autocomplete textfield.\n    </Typography>\n      </div>\n    ) : (\n      <div>\n\n      </div>\n    )\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Placeholder</InputLabel>\n        <Input name='placeholder' onChange={handlePropertiesChange} value={properties.placeholder} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Unique Properties</span>\n      </h2>\n      <FormGroup row>\n        <RadioGroup onChange={handleSourceChange} value={selectionOption} style={{ justifyContent: 'space-evenly', width: '100%', flexDirection: 'row' }}>\n          <FormControlLabel value=\"datasource\" control={<Radio />} label=\"From Data Source\" />\n          <FormControlLabel value=\"fixed\" control={<Radio />} label=\"Fixed Values\" />\n        </RadioGroup>\n      </FormGroup>\n      {\n        selectionOption == 'datasource' ? (\n          <div>\n            <FormControl fullWidth className={classes.formControl}>\n              <InputLabel id=\"data-source\">Data Source</InputLabel>\n              <Select\n                name=\"datasource\"\n                labelId=\"data-source\"\n                value={datasource}\n                onChange={handleDatasourceChange}\n              >\n                {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n              </Select>\n            </FormControl>\n\n            <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n              <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n              <Select\n                name=\"docList\"\n                labelId=\"doc-list\"\n                value={doc}\n                onChange={handleDocChange}\n              >\n                {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n              </Select>\n            </FormControl>\n            {renderFieldSettings()}\n          </div>\n        ) : (\n            <div>\n\n            </div>\n          )\n      }\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl} style={{ marginBottom: 10 }}>Save</Button>\n    </div>\n  )\n}\n\nexport default AutoCompleteWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst AutoCompleteWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {}, config: { fields: [] } })\n  const [data, setData] = useState([])\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n        setWidget($widget)\n        setData($data)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <Autocomplete\n      id={widget.properties.id}\n      placeholder={widget.properties.placeholder}\n      className={widget.properties.className}\n      value={widget.properties.value}\n      options={data}\n      getOptionLabel={(option) => option[widget.config.fields[0]]}\n      fullWidth\n      renderInput={(params) => (\n        <TextField fullWidth name={widget.properties.name} {...params} label={widget.properties.label} />\n      )}\n    />\n  )\n}\n\nexport default AutoCompleteWidget","import AutoCompleteWidget from './autocomplete-widget'\nimport AutoCompleteWidgetSettings from './autocomplete-widget-settings'\n\nexport {\n  AutoCompleteWidget,\n  AutoCompleteWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Typography from '@material-ui/core/Typography'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\nimport Editor from 'react-simple-code-editor'\nimport { highlight, languages } from 'prismjs/components/prism-core'\nimport 'prismjs/components/prism-clike'\nimport 'prismjs/components/prism-javascript'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst ButtonWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', className: '',\n  })\n  const [code, setCode] = useState(`function (a, b) {\n    alert(a + b)\n  }`)\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties: {\n          ...properties,\n          code\n        },\n        type: 'Button'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  \n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Unique Properties</span>\n      </h2>\n      <Typography>OnClick Event</Typography>\n      <Editor\n        value={code}\n        onValueChange={code => setCode(code)}\n        highlight={code => highlight(code, languages.javascript)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          border: '1px solid #DEDEDE'\n        }}\n      />\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default ButtonWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst ButtonWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        console.log($widget.properties.code)\n        Function($widget.properties.code)()\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <Button className={widget.properties.className} id={widget.properties.id} onClick={Function(widget.properties.code)()}>\n      {widget.properties.label}\n    </Button>\n  )\n}\n\nexport default ButtonWidget","import ButtonWidget from './button-widget'\nimport ButtonWidgetSettings from './button-widget-settings'\n\nexport {\n  ButtonWidget,\n  ButtonWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst CheckboxWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Placeholder</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Value</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Type</InputLabel>\n        <Input />\n      </FormControl>\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default CheckboxWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst CheckboxWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        console.log($widget)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <TextField\n    // label={widget.config.label || ''}\n    // id={widget.config.id || ''}\n    // placeholder={widget.config.placeholder || ''}\n    // className={widget.config.className || ''}\n    // styles={widget.config.styles || {}}\n    // name={widget.config.name || ''}\n    // value={widget.config.value || ''}\n    // type={widget.config.type || 'text'}\n    />\n  )\n}\n\nexport default CheckboxWidget","import CheckboxWidget from './checkbox-widget'\nimport CheckboxWidgetSettings from './checkbox-widget-settings'\n\nexport {\n  CheckboxWidget,\n  CheckboxWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst DateTimeWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', className: ''\n  })\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setSelectedFileFormats([...selectedFileFormats, name]) : setSelectedFileFormats(selectedFileFormats.filter(format => format != name))\n  }\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Date Time'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default DateTimeWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport DateFnsUtils from '@date-io/date-fns'\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst DateTimeWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [menuState, setMenuState] = useState({ right: false })\n  const [selectedDate, setSelectedDate] = useState(new Date())\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        console.log($widget)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date)\n  }\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        fullWidth\n        name={widget.properties.name}\n        variant=\"inline\"\n        format=\"MM/dd/yyyy\"\n        margin=\"normal\"\n        id={widget.properties.id}\n        label={widget.properties.label}\n        value={selectedDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          'aria-label': 'change date',\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  )\n}\n\nexport default DateTimeWidget","import DateTimeWidget from './datetime-widget'\nimport DateTimeWidgetSettings from './datetime-widget-settings'\n\nexport {\n  DateTimeWidget,\n  DateTimeWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst acceptedFileFormats = [\n  \"text/plain\", \"application/pdf\", \"image/png\", \"image/tiff\", \"image/webp\", \"image/gif\", \"image/jpeg\",\n  \"application/json\", \"audio/mpeg\", \"audio/wav\", \"audio/webm\", \"video/mpeg\", \"video/ogg\", \"video/mp2t\",\n  \"video/webm\", \"video/3gpp\", \"video/3gpp2\", \"application/xml\", \"text/csv\"\n]\n\nconst FileWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    id: '', name: '', className: ''\n  })\n  const [selectedFileFormats, setSelectedFileFormats] = useState([])\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setSelectedFileFormats([...selectedFileFormats, name]) : setSelectedFileFormats(selectedFileFormats.filter(format => format != name))\n  }\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties: {\n          ...properties,\n          acceptedFileFormats: selectedFileFormats\n        },\n        type: 'File'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Unique Properties</span>\n      </h2>\n      <Typography>Accepted File Formats</Typography>\n      <Typography style={{ color: \"#F00\", fontSize: 10 }}>*Leave blank to accept all file types.</Typography>\n      {acceptedFileFormats.map(format => (<FormControlLabel\n        key={format}\n        control={\n          <Checkbox checked={selectedFileFormats.includes(format)} onChange={handleFieldChange(format)} value={format} />\n        }\n        label={format}\n      />))}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default FileWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst FileWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: { acceptedFileFormats: [] } })\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <input\n      type='file'\n      id={widget.properties.id}\n      name={widget.properties.name}\n      className={widget.properties.className}\n      accept={widget.properties.acceptedFileFormats.join(',')}\n    />\n  )\n}\n\nexport default FileWidget","import FileWidget from './file-widget'\nimport FileWidgetSettings from './file-widget-settings'\n\nexport {\n  FileWidget,\n  FileWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst FormGroupWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [properties, setProperties] = useState({})\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Form Group'\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default FormGroupWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport { decideWidget } from '../../../../helpers/decide-widgets'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst FormGroupWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [subWidgets, setSubWidgets] = useState([])\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        const $subWidgets = await WidgetSettingsActions.getSubWidgets(widgetId)\n        setWidget($widget)\n        setSubWidgets($subWidgets)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <FormGroup>\n      {\n        subWidgets.map(subWidget => (\n          <div key={subWidget.id}>\n            {decideWidget(subWidget.subWidgetSettings)}\n          </div>\n        ))\n      }\n    </FormGroup>\n  )\n}\n\nexport default FormGroupWidget","import FormGroupWidget from './form-group-widget'\nimport FormGroupWidgetSettings from './form-group-widget-settings'\n\nexport {\n    FormGroupWidget,\n    FormGroupWidgetSettings\n}","export * from './autocomplete'\nexport * from './button'\nexport * from './checkbox'\nexport * from './date-time'\nexport * from './file'\nexport * from './number'\nexport * from './password'\nexport * from './radio'\nexport * from './select'\nexport * from './textarea'\nexport * from './textfield'\nexport * from './form-group'","import NumberWidget from './number-widget'\nimport NumberWidgetSettings from './number-widget-settings'\n\nexport {\n  NumberWidget,\n  NumberWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst NumberWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', placeholder: '', className: ''\n  })\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Number'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Placeholder</InputLabel>\n        <Input name='placeholder' onChange={handlePropertiesChange} value={properties.placeholder} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default NumberWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst NumberWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <TextField\n      fullWidth\n      type=\"number\"\n      label={widget.properties.label}\n      id={widget.properties.id}\n      placeholder={widget.properties.placeholder}\n      className={widget.properties.className}\n      value={widget.properties.value}\n    />\n  )\n}\n\nexport default NumberWidget","import PasswordWidget from './password-widget'\nimport PasswordWidgetSettings from './password-widget-settings'\n\nexport {\n  PasswordWidget,\n  PasswordWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst PasswordWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', className: ''\n  })\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Password'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default PasswordWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport TextField from '@material-ui/core/TextField'\nimport FormControl from '@material-ui/core/FormControl'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst PasswordWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [menuState, setMenuState] = useState({ right: false })\n  const [value, setValue] = useState('')\n\n  const handleChange = (event) => {\n    const { value } = event.target\n    setValue(value)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <TextField\n      name={widget.properties.name}\n      label={widget.properties.label}\n      id={widget.properties.id}\n      fullWidth\n      onChange={handleChange}\n      className={widget.properties.className}\n      value={value}\n      type={'password'}\n    />\n  )\n}\n\nexport default PasswordWidget","import RadioWidget from './radio-widget'\nimport RadioWidgetSettings from './radio-widget-settings'\n\nexport {\n  RadioWidget,\n  RadioWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst RadioWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Placeholder</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Value</InputLabel>\n        <Input />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Type</InputLabel>\n        <Input />\n      </FormControl>\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default RadioWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst RadioWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        console.log($widget)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <TextField\n    // label={widget.config.label || ''}\n    // id={widget.config.id || ''}\n    // placeholder={widget.config.placeholder || ''}\n    // className={widget.config.className || ''}\n    // styles={widget.config.styles || {}}\n    // name={widget.config.name || ''}\n    // value={widget.config.value || ''}\n    // type={widget.config.type || 'text'}\n    />\n  )\n}\n\nexport default RadioWidget","import SelectWidget from './select-widget'\nimport SelectWidgetSettings from './select-widget-settings'\n\nexport {\n  SelectWidget,\n  SelectWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Radio from '@material-ui/core/Radio'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst SelectWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', className: ''\n  })\n  const [selectionOption, setSelectionOption] = useState('datasource')\n  const [datasources, setDatasources] = useState([])\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [docList, setDocList] = useState([])\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [fieldList, setFieldList] = useState([])\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : '')\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { name, value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = event => {\n    const { value } = event.target\n    setFields(value)\n  }\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  const handleSourceChange = (event) => {\n    const { value } = event.target\n    setSelectionOption(value)\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const renderFieldSettings = () => fieldList.length ?\n    (\n      <div>\n        <h2 className={classes.h2}>\n          <span className={classes.span}>Fields Settings</span>\n        </h2>\n        <RadioGroup onChange={handleFieldChange}>\n          {\n            fieldList.map(field => (\n              <FormControlLabel\n                key={field}\n                control={<Radio value={field} />}\n                label={field}\n              />))\n          }\n        </RadioGroup>\n        <Typography style={{ fontSize: 12, color: '#F00', marginTop: 10 }}>\n          * You can only select one field in a select field.\n    </Typography>\n      </div>\n    ) : (\n      <div>\n        \n      </div>\n    )\n\n    const saveConfigData = async () => {\n      try {\n        const data = {\n          dataSourceId: datasource,\n          config: {\n            docId: doc,\n            fields: [fields],\n            type: selectionOption == 'datasource' ? 'simple' : 'constant',\n            func: 'find',\n            query: {},\n            values: selectionOption == 'datasource' ? [] : []\n          },\n          properties,\n          type: 'Select'\n        }\n        if (isAdding) {\n          onWidgetAdd(data, true, selectedFormGroup)\n        } else {\n          const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n          handleSettingsClose(update)\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Unique Properties</span>\n      </h2>\n      <FormGroup row>\n        <RadioGroup onChange={handleSourceChange} value={selectionOption} style={{ justifyContent: 'space-evenly', width: '100%', flexDirection: 'row' }}>\n          <FormControlLabel value=\"datasource\" control={<Radio />} label=\"From Data Source\" />\n          <FormControlLabel value=\"fixed\" control={<Radio />} label=\"Fixed Values\" />\n        </RadioGroup>\n      </FormGroup>\n      {\n        selectionOption == 'datasource' ? (\n          <div>\n            <FormControl fullWidth className={classes.formControl}>\n              <InputLabel id=\"data-source\">Data Source</InputLabel>\n              <Select\n                name=\"datasource\"\n                labelId=\"data-source\"\n                value={datasource}\n                onChange={handleDatasourceChange}\n              >\n                {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n              </Select>\n            </FormControl>\n\n            <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n              <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n              <Select\n                name=\"docList\"\n                labelId=\"doc-list\"\n                value={doc}\n                onChange={handleDocChange}\n              >\n                {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n              </Select>\n            </FormControl>\n            {renderFieldSettings()}\n          </div>\n        ) : (\n            <div>\n\n            </div>\n          )\n      }\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default SelectWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst SelectWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const labelId = uuidv4()\n  const [widget, setWidget] = useState({ config: {}, properties: {} })\n  const [data, setData] = useState([])\n  const [menuState, setMenuState] = useState({ right: false })\n  const [value, setValue] = useState()\n\n  const handleChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n        setWidget($widget)\n        setData($data)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <FormControl fullWidth className={classes.formControl}>\n      <InputLabel id={labelId}>{widget.properties.label}</InputLabel>\n      <Select\n        fullWidth\n        labelId={labelId}\n        id={widget.properties.id}\n        name={widget.properties.name}\n        value={value}\n        onChange={handleChange}\n        className={widget.properties.className}\n      >\n        {\n          data.map(option => (\n            <MenuItem value={option[widget.config.fields[0]]}>{option[widget.config.fields[0]]}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default SelectWidget","import TextAreaWidget from './textarea-widget'\nimport TextAreaWidgetSettings from './textarea-widget-settings'\n\nexport {\n  TextAreaWidget,\n  TextAreaWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst TextAreaWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', className: ''\n  })\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Text Area'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default TextAreaWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst TextAreaWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [menuState, setMenuState] = useState({ right: false })\n  const [value, setValue] = useState('')\n\n  const handleChange = (event) => {\n    const { value } = event.target\n    setValue(value)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <TextField\n      name={widget.properties.name}\n      label={widget.properties.label}\n      id={widget.properties.id}\n      fullWidth\n      onChange={handleChange}\n      className={widget.properties.className}\n      value={value}\n      multiline\n    />\n  )\n}\n\nexport default TextAreaWidget","import TextFieldWidget from './text-field-widget'\nimport TextFieldWidgetSettings from './text-field-widget-settings'\n\nexport {\n  TextFieldWidget,\n  TextFieldWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst TextFieldWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [linkToFormGroup, setLinkToFormGroup] = useState(false)\n  const [formGroups, setFormGroups] = useState([])\n  const [selectedFormGroup, setSelectedFormGroup] = useState(null)\n  const [properties, setProperties] = useState({\n    label: '', id: '', name: '', className: ''\n  })\n\n  const handlePropertiesChange = (event) => {\n    const { name, value } = event.target\n    setProperties({ ...properties, [name]: value })\n  }\n\n  useEffect(() => {\n    const getFormGroups = async () => {\n      try {\n        const $formGroups = await WidgetSettingsActions.getFormGroupWidgets()\n        setFormGroups($formGroups)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getFormGroups()\n  }, [])\n\n  const handleSelectFormGroup = event => {\n    const { value } = event.target\n    setSelectedFormGroup(value)\n  }\n\n  const handleLinkToFormGroup = event => {\n    const { checked } = event.target\n    if (!checked)\n      setSelectedFormGroup(null)\n    setLinkToFormGroup(checked)\n  }\n\n  const renderFormGroupSelection = _ => linkToFormGroup ? (\n    <FormControl fullWidth>\n      <InputLabel id=\"form-group-title\">Form Group</InputLabel>\n      <Select\n        fullWidth\n        labelId=\"form-group-title\"\n        value={selectedFormGroup}\n        onChange={handleSelectFormGroup}\n      >\n        {\n          formGroups.map(formGroup => (\n            <MenuItem value={formGroup.id}>{formGroup.properties.name}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  ) : (\n      <div></div>\n    )\n\n  const saveConfigData = async () => {\n    try {\n      const data = {\n        properties,\n        type: 'Text Field'\n      }\n      if (isAdding) {\n        onWidgetAdd(data, true, selectedFormGroup)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Label</InputLabel>\n        <Input name='label' onChange={handlePropertiesChange} value={properties.label} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>ID</InputLabel>\n        <Input name='id' onChange={handlePropertiesChange} value={properties.id} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Name</InputLabel>\n        <Input name='name' onChange={handlePropertiesChange} value={properties.name} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Class name</InputLabel>\n        <Input name='className' onChange={handlePropertiesChange} value={properties.className} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <FormControlLabel\n          control={<Checkbox checked={linkToFormGroup} onChange={handleLinkToFormGroup} />}\n          label=\"Link To Form Group?\"\n        />\n      </FormControl>\n\n      {renderFormGroupSelection()}\n\n      <Button onClick={saveConfigData} fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default TextFieldWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst TextFieldWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({ properties: {} })\n  const [menuState, setMenuState] = useState({ right: false })\n  const [value, setValue] = useState('')\n\n  const handleChange = (event) => {\n    const { value } = event.target\n    setValue(value)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <TextField\n      name={widget.properties.name}\n      label={widget.properties.label}\n      id={widget.properties.id}\n      fullWidth\n      onChange={handleChange}\n      className={widget.properties.className}\n      value={value}\n    />\n  )\n}\n\nexport default TextFieldWidget","import { makeStyles } from '@material-ui/core/styles'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport DatabaseConnection from './database-connection'\nimport HTTPConnection from './http-connection'\n\nconst useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n})\n\nconst ConnectionSettings = ({\n  connectionMethod,\n  setConnectionMethod,\n  isAdding,\n  setDoc,\n  setDatasource,\n  setFields,\n  doc,\n  datasource,\n  fields,\n  primaryKey,\n  setPrimaryKey,\n  url, setURL,\n  headers, setHeaders,\n  method, setMethod,\n  body, setBody,\n  query, setQuery\n}) => {\n  const classes = useStyles()\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Connection Settings</span>\n      </h2>\n      <FormControl>\n        <FormLabel>Connection Method</FormLabel>\n        <RadioGroup\n          style={{ display: 'flex', flexDirection: 'row' }}\n          value={connectionMethod}\n          onChange={event => setConnectionMethod(event.target.value)}\n        >\n          <FormControlLabel value=\"database\" control={<Radio />} label=\"Database\" />\n          <FormControlLabel value=\"http\" control={<Radio />} label=\"HTTP\" />\n        </RadioGroup>\n      </FormControl>\n      {\n        connectionMethod == 'database' ? (\n          <DatabaseConnection\n            isAdding={isAdding}\n            setDoc={setDoc}\n            setDatasource={setDatasource}\n            setFields={setFields}\n            doc={doc}\n            datasource={datasource}\n            fields={fields}\n            primaryKey={primaryKey}\n            setPrimaryKey={setPrimaryKey}\n          />\n        ) : (\n            <HTTPConnection\n              url={url} setURL={setURL}\n              headers={headers} setHeaders={setHeaders}\n              method={method} setMethod={setMethod}\n              body={body} setBody={setBody}\n              query={query} setQuery={setQuery}\n            />\n          )\n      }\n    </div>\n  )\n}\n\nexport default ConnectionSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DataSourceActions from '../../../../actions/datasource.actions'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst DatabaseConnection = ({\n  isAdding,\n  setDoc,\n  setDatasource,\n  setFields,\n  doc,\n  datasource,\n  fields,\n  primaryKey,\n  setPrimaryKey\n}) => {\n  const classes = useStyles()\n  const [datasources, setDatasources] = useState([])\n  const [docList, setDocList] = useState([])\n  const [fieldList, setFieldList] = useState([])\n  const [query, setQuery] = useState({})\n\n  const getDatasources = async () => {\n    try {\n      const $datasources = await DataSourceActions.getDatasources({})\n      if (!isAdding) {\n        const $docList = await DataSourceActions.getDocList(datasource)\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\n        setDocList($docList)\n        setFieldList($fieldList)\n      }\n      setDatasources($datasources)\n      return $datasources\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getDocList = async (id) => {\n    try {\n      setDatasource(id)\n      const $docList = await DataSourceActions.getDocList(id)\n      setDocList($docList)\n      return $docList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getFieldList = async (id, docId) => {\n    try {\n      setDoc(docId)\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\n      setFieldList($fieldList)\n      return $fieldList\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleDatasourceChange = async (event) => {\n    const { value } = event.target\n    setFieldList([])\n    setFields([])\n    await getDocList(value)\n  }\n\n  const handleDocChange = async (event) => {\n    const { value } = event.target\n    setFieldList([])\n    setFields([])\n    await getFieldList(datasource, value)\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const renderFieldSettings = () => fieldList.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Fields Settings</span>\n    </h2>\n\n    {fieldList.map(field => (<FormControlLabel\n      key={field}\n      control={\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n      }\n      label={field}\n    />))}\n\n    <FormControl fullWidth>\n      <InputLabel id=\"primary-key\">Primary Key</InputLabel>\n      <Select\n        name=\"primaryKey\"\n        labelId=\"primary-key\"\n        value={primaryKey}\n        onChange={event => setPrimaryKey(event.target.value)}\n      >\n        {fields.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n      </Select>\n    </FormControl>\n  </div>) : <div></div>\n\n  const renderQuerySettings = () => fields.length ? (<div>\n    <h2 className={classes.h2}>\n      <span className={classes.span}>Query Settings</span>\n    </h2>\n\n    {fields.map(field => (<div>\n\n    </div>))}\n  </div>) : <div></div>\n\n  useEffect(() => {\n    getDatasources()\n  }, [])\n\n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id=\"data-source\">Data Source</InputLabel>\n        <Select\n          name=\"datasource\"\n          labelId=\"data-source\"\n          value={datasource}\n          onChange={handleDatasourceChange}\n        >\n          {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\n        <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\n        <Select\n          name=\"docList\"\n          labelId=\"doc-list\"\n          value={doc}\n          onChange={handleDocChange}\n        >\n          {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      {renderFieldSettings()}\n\n      {renderQuerySettings()}\n\n    </div>\n  )\n}\n\nexport default DatabaseConnection","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst useStyles = makeStyles({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n})\n\nconst httpMethods = [\n  { value: 'get', title: 'Get' },\n  { value: 'post', title: 'Post' },\n  { value: 'put', title: 'Put' },\n  { value: 'patch', title: 'Patch' },\n  { value: 'head', title: 'Head' },\n  { value: 'delete', title: 'Delete' }\n]\n\nconst HTTPConnection = ({\n  url, setURL,\n  method, setMethod,\n  headers, setHeaders,\n  body, setBody,\n  query, setQuery\n}) => {\n  const classes = useStyles()\n  const [requestHeader, setRequestHeader] = useState({ key: '', value: '' })\n  const [isAddingRequestHeader, setIsAddingRequestHeader] = useState(false)\n  const [queryParam, setQueryParam] = useState({ key: '', value: '' })\n  const [isAddingRequestQueryParam, setIsAddingQueryParam] = useState(false)\n  const [bodyParam, setBodyParam] = useState({ key: '', value: '' })\n  const [isAddingRequestBodyParam, setIsAddingRequestBodyParam] = useState(false)\n\n  const renderRequestHeader = header => {\n\n  }\n\n  const renderQueryParameter = queryParameter => {\n\n  }\n\n  const renderBodyParameter = bodyParameter => {\n\n  }\n\n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id='title'>Request URL</InputLabel>\n        <Input value={url} onChange={event => { setURL(event.target.value) }} />\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id='http-method-label'>Request Method</InputLabel>\n        <Select value={method} onChange={event => { setMethod(event.target.value) }} labelId=\"http-method-label\" fullWidth className={classes.formControl}>\n          {httpMethods.map(m => (<MenuItem value={m.value} key={m.value}>{m.title}</MenuItem>))}\n        </Select>\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Request Headers</span>\n      </h2>\n      {\n        isAddingRequestHeader ? (\n          <Card style={{ padding: 15, marginBottom: 15 }}>\n            <Grid container spacing={0}>\n              <Grid item xs={6} style={{ paddingLeft: 10, paddingRight: 10 }}>\n                <FormControl fullWidth>\n                  <InputLabel>Key</InputLabel>\n                  <Input onChange={event => {\n                    setRequestHeader({ ...requestHeader, key: event.target.value })\n                  }} />\n                </FormControl>\n              </Grid>\n              <Grid item xs={6} style={{ paddingLeft: 10, paddingRight: 10 }}>\n                <FormControl fullWidth>\n                  <InputLabel>Value</InputLabel>\n                  <Input onChange={event => {\n                    setRequestHeader({ ...requestHeader, value: event.target.value })\n                  }} />\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Grid container spacing={0} className={classes.formControl}>\n              <Grid item xs={6}>\n                <Button fullWidth onClick={() => { setIsAddingRequestHeader(false) }}>\n                  <CancelIcon style={{ color: \"#F00\" }} />\n                  <Typography>Cancel</Typography>\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button fullWidth>\n                  <SaveIcon style={{ color: \"#3F51B5\" }} />\n                  <Typography>Save</Typography>\n                </Button>\n              </Grid>\n            </Grid>\n          </Card>\n        ) : (\n            <Button fullWidth onClick={() => { setIsAddingRequestHeader(true) }}>Add</Button>\n          )\n      }\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Request Query Parameters</span>\n      </h2>\n      {\n        isAddingRequestQueryParam ? (\n          <Card style={{ padding: 15, marginBottom: 15 }}>\n            <Grid container spacing={0}>\n              <Grid item xs={6}>\n                <FormControl fullWidth style={{ paddingLeft: 10, paddingRight: 10 }}>\n                  <InputLabel>Key</InputLabel>\n                  <Input onChange={event => {\n                    setQueryParam({ ...queryParam, key: event.target.value })\n                  }} />\n                </FormControl>\n              </Grid>\n              <Grid item xs={6}>\n                <FormControl fullWidth style={{ paddingLeft: 10, paddingRight: 10 }}>\n                  <InputLabel>Value</InputLabel>\n                  <Input onChange={event => {\n                    setQueryParam({ ...queryParam, value: event.target.value })\n                  }} />\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Grid container spacing={0} className={classes.formControl}>\n              <Grid item xs={6}>\n                <Button fullWidth onClick={() => { setIsAddingQueryParam(false) }}>\n                  <CancelIcon style={{ color: \"#F00\" }} />\n                  <Typography>Cancel</Typography>\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button fullWidth>\n                  <SaveIcon style={{ color: \"#3F51B5\" }} />\n                  <Typography>Save</Typography>\n                </Button>\n              </Grid>\n            </Grid>\n          </Card>\n        ) : (\n            <Button fullWidth onClick={() => { setIsAddingQueryParam(true) }}>Add</Button>\n          )\n      }\n    </div>\n  )\n}\n\nexport default HTTPConnection","import ConnectionSettings from './connection-settings'\n\nexport {\n  ConnectionSettings\n}","export * from './measure-conditions'\nexport * from './connection-settings'","import { useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Colors from '../../../../helpers/css-colors'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport { conditionCases } from '../../../../helpers/measure-conditions'\n\nconst AddMeasureCondition = ({ widget, setIsAddingMeasureCondition, setRefresh, refresh }) => {\n  const [measureConditionsFields, updateMeasureConditionsFields] = useState({})\n  const [fields, setFields] = useState(widget.config.fields)\n  const [showSpinner, setShowSpinner] = useState(false)\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    updateMeasureConditionsFields({ ...measureConditionsFields, [name]: value })\n  }\n\n  const addMeasureCondition = async () => {\n    try {\n      setShowSpinner(true)\n      const measureCondition = await WidgetSettingsActions.createWidgetSettingsMeasureConditions(widget.id, measureConditionsFields)\n      setShowSpinner(false)\n      setIsAddingMeasureCondition(false)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card style={{ padding: 15, marginBottom: 15 }}>\n      <Grid container spacing={0}>\n        <Grid item xs={4} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"field-select-label\">Field</InputLabel>\n            <Select\n              fullWidth\n              labelId=\"field-select-label\"\n              value={measureConditionsFields.field}\n              onChange={handleChange}\n              name=\"field\"\n            >\n              {fields.map(field => <MenuItem key={field} value={field}>{field}</MenuItem>)}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={4} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"expression-select-label\">Expression</InputLabel>\n            <Select\n              fullWidth\n              labelId=\"expression-select-label\"\n              value={measureConditionsFields.expression}\n              onChange={handleChange}\n              name=\"expression\"\n            >\n              {conditionCases.map(conditionCase => <MenuItem key={conditionCase.title} value={conditionCase.title}>{conditionCase.friendlyName}</MenuItem>)}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={4} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <Autocomplete\n            fullWidth\n            options={Colors}\n            renderInput={params => (\n              <TextField fullWidth name=\"color\" {...params} label=\"Color\" onChange={handleChange} />\n            )}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={0} style={{ marginTop: 15 }}>\n        <Grid item xs={6} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Minimum Value\"\n            onChange={handleChange}\n            name=\"minValue\"\n            value={measureConditionsFields.minValue}\n          />\n        </Grid>\n        <Grid item xs={6} style={{ paddingLeft: 5, paddingRight: 5 }}>\n          <TextField\n            fullWidth\n            type=\"number\"\n            name=\"maxValue\"\n            onChange={handleChange}\n            label=\"Maximum Value\"\n            value={measureConditionsFields.maxValue}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={0} style={{ marginTop: 15 }}>\n        <Grid item xs={6}>\n          <Button fullWidth onClick={() => { setIsAddingMeasureCondition(false) }}>\n            <CancelIcon style={{ color: '#F00' }} />\n            <Typography style={{ marginLeft: 10 }}>Cancel</Typography>\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          {\n            showSpinner ?\n              (\n                <CircularProgress />\n              ) : (\n                <Button fullWidth onClick={addMeasureCondition}>\n                  <SaveIcon style={{ color: '#3F51B5' }} />\n                  <Typography style={{ marginLeft: 10 }}>Save</Typography>\n                </Button>\n              )\n          }\n        </Grid>\n      </Grid>\n    </Card >\n  )\n}\n\nexport default AddMeasureCondition","import MeasureConditionItem from './measure-conditions-item'\nimport ListMeasureCondition from './measure-conditions'\nimport AddMeasureCondition from './add-measure-condition'\n\nexport {\n  MeasureConditionItem,\n  ListMeasureCondition,\n  AddMeasureCondition\n}","import { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward'\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward'\nimport EditIcon from '@material-ui/icons/Edit'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles({\n  measureConditionFieldTitle: {\n    fontSize: 12,\n    fontWeight: 'bold'\n  }\n})\n\nconst MeasureConditionItem = ({ widget, measureCondition, key, setRefresh, refresh }) => {\n  const classes = useStyles()\n  const [showSpinner, setShowSpinner] = useState(false)\n\n  const removeMeasureCondition = async () => {\n    try {\n      setShowSpinner(true)\n      const $measureCondition = await WidgetSettingsActions.deleteWidgetSettingsMeasureConditions(widget.id, measureCondition.id)\n      setShowSpinner(false)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card style={{ padding: 15, marginBottom: 15 }} key={key}>\n      <Grid container spacing={0}>\n        <Grid item xs={4}>\n          <Typography className={classes.measureConditionFieldTitle}>Field</Typography>\n          <Typography>{measureCondition.field}</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography className={classes.measureConditionFieldTitle}>Expression</Typography>\n          <Typography>{measureCondition.expression}</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography className={classes.measureConditionFieldTitle}>Color</Typography>\n          <Typography>{measureCondition.color}</Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={0} style={{ marginTop: 15 }}>\n        <Grid item xs={6} style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', alignItems: 'center' }}>\n          <ArrowUpwardIcon />\n          <Typography>{measureCondition.minValue}</Typography>\n        </Grid>\n        <Grid item xs={6} style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', alignItems: 'center' }}>\n          <ArrowDownwardIcon />\n          <Typography>{measureCondition.maxValue}</Typography>\n        </Grid>\n      </Grid>\n      {\n        showSpinner ?\n          (\n            <CircularProgress />\n          ) : (\n            <Grid container spacing={0} style={{ marginTop: 15 }}>\n              <Grid item xs={6}>\n                <Button fullWidth onClick={removeMeasureCondition}>\n                  <DeleteIcon style={{ color: '#F00' }} />\n                  <Typography style={{ marginLeft: 10 }}>Delete</Typography>\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button fullWidth>\n                  <EditIcon style={{ color: '#3F51B5' }} />\n                  <Typography style={{ marginLeft: 10 }}>Edit</Typography>\n                </Button>\n              </Grid>\n            </Grid>\n          )\n      }\n    </Card >\n  )\n}\n\nexport default MeasureConditionItem","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport MeasureConditionItem from './measure-conditions-item'\nimport AddMeasureCondition from './add-measure-condition'\n\nconst useStyles = makeStyles({\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  }\n})\n\nconst ListMeasureConditions = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [isAddingMeasureCondition, setIsAddingMeasureCondition] = useState(false)\n  const [measureConditions, setMeasureConditions] = useState([])\n  const [refresh, setRefresh] = useState(0)\n\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widget.id)\n        setMeasureConditions($measureConditions)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getMeasureConditions()\n  }, [refresh])\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Measure Conditions</span>\n      </h2>\n      {\n        isAddingMeasureCondition ?\n          <AddMeasureCondition\n            setRefresh={setRefresh}\n            refresh={refresh}\n            widget={widget}\n            setIsAddingMeasureCondition={setIsAddingMeasureCondition}\n          /> :\n          (\n            <Button\n              fullWidth\n              style={{ marginBottom: 15 }}\n              onClick={() => { setIsAddingMeasureCondition(true) }}>\n              Add Measure Condition\n            </Button>\n          )\n      }\n      {\n        measureConditions.map(measureCondition => (\n          <MeasureConditionItem\n            setRefresh={setRefresh}\n            refresh={refresh}\n            widget={widget}\n            key={measureCondition.id}\n            measureCondition={measureCondition}\n          />\n        ))\n      }\n    </div>\n  )\n}\n\nexport default ListMeasureConditions","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst AccordionWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default AccordionWidgetSettings","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}))\n\nconst AccordionWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [expanded, setExpanded] = useState(false)\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false)\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  const expansionPanelItem = ({ id, title, description, innerHTML, text }) => {\n    return (\n      <ExpansionPanel expanded={expanded === id} onChange={handleChange(id)}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography className={classes.heading}>{title}</Typography>\n          <Typography className={classes.secondaryHeading}>{description}</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography>\n            {text}\n          </Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    )\n  }\n\n  return (\n    <div className={classes.root}>\n      {expansionPanelItem({\n        id: 1,\n        title: 'Test',\n        description: 'Description',\n        text: \"Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit amet egestas eros, vitae egestas augue. Duis vel est augue.\"\n      })}\n    </div>\n  )\n}\n\nexport default AccordionWidget","import AccordionWidget from './accordion-widget'\nimport AccordionWidgetSettings from './accordion-widget-settings'\n\nexport {\n  AccordionWidget,\n  AccordionWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst DataGridWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default DataGridWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst DataGridWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default DataGridWidget","import DataGridWidget from './data-grid-widget'\nimport DataGridWidgetSettings from './data-grid-widget-settings'\n\nexport {\n  DataGridWidget,\n  DataGridWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst DivWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default DivWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst DivWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default DivWidget","import DivWidget from './div-widget'\nimport DivWidgetSettings from './div-widget-settings'\n\nexport {\n  DivWidget,\n  DivWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst ImageWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [state, setState] = useState({})\n\n  const saveConfigData = async () => {\n    try {\n      const { url, title } = state\n      const data = {\n        title,\n        type: 'Image',\n        config: {\n          url\n        }\n      }\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input onChange={event => { setState({ ...state, title: event.target.value }) }} />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Image URL</InputLabel>\n        <Input onChange={event => { setState({ ...state, url: event.target.value }) }} />\n      </FormControl>\n\n\n      <Button fullWidth color=\"primary\" onClick={saveConfigData} className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default ImageWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst ImageWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState({})\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        console.log($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div style={{ backgroundImage: widget.config ? `url('${widget.config.url}')` : '', width: '100%', height: '100%' }}>\n    </div>\n  )\n}\n\nexport default ImageWidget","import ImageWidget from './image-widget'\nimport ImageWidgetSettings from './image-widget-settings'\n\nexport {\n  ImageWidget,\n  ImageWidgetSettings\n}","export * from './accordion'\nexport * from './data-grid'\nexport * from './div'\nexport * from './image'\nexport * from './list'\nexport * from './paragraph'\nexport * from './progress-bar'\nexport * from './span'\nexport * from './tabs'","import ListWidget from './list-widget'\nimport ListWidgetSettings from './list-widget-settings'\n\nexport {\n  ListWidget,\n  ListWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst ListWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default ListWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst ListWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default ListWidget","import ParagraphWidget from './paragraph-widget'\nimport ParagraphWidgetSettings from './paragraph-widget-settings'\n\nexport {\n  ParagraphWidget,\n  ParagraphWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst ParagraphWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default ParagraphWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst ParagraphWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default ParagraphWidget","import ProgressBarWidget from './progress-bar-widget'\nimport ProgressBarWidgetSettings from './progress-bar-widget-settings'\n\nexport {\n  ProgressBarWidget,\n  ProgressBarWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst ProgressBarWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default ProgressBarWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst ProgressBarWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default ProgressBarWidget","import SpanWidget from './span-widget'\nimport SpanWidgetSettings from './span-widget-settings'\n\nexport {\n  SpanWidget,\n  SpanWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst SpanWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default SpanWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst SpanWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default SpanWidget","import TabsWidget from './tabs-widget'\nimport TabsWidgetSettings from './tabs-widget-settings'\n\nexport {\n  TabsWidget,\n  TabsWidgetSettings\n}","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport DataSourceActions from '../../../../actions/datasource.actions'\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\nimport Swal from 'sweetalert2'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst TabsWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Info</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel>Title</InputLabel>\n        <Input />\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n\n\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\n    </div>\n  )\n}\n\nexport default TabsWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n\n}))\n\nconst TabsWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [menuState, setMenuState] = useState({ right: false })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n        setWidget($widget)\n        return $widget\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getData()\n  }, [])\n\n  return (\n    <div></div>\n  )\n}\n\nexport default TabsWidget","export * from './table'\nexport * from './charts'\nexport * from './form-controls'\nexport * from './html-elements'","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\n\nconst useStyles = makeStyles({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n})\n\nconst ExportTableData = ({ widget, data, selectedRows }) => {\n  const classes = useStyles()\n  const [state, setState] = useState({\n    method: 'download', format: 'csv', fields: widget.config.fields\n  })\n  const [fields, setFields] = useState([])\n\n  const handleDataChange = event => {\n    const { name, value } = event.target\n    setState({ ...state, [name]: value })\n  }\n\n  const handleFieldChange = name => event => {\n    const { checked } = event.target\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\n  }\n\n  const exportData = async () => {\n    try {\n      const { format, method } = state\n      const file = await WidgetSettingsActions.exportWidgetData(widget.id, format, method, JSON.stringify(fields))\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Export Settings</span>\n      </h2>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id=\"export-format\">Export Format</InputLabel>\n        <Select\n          name=\"format\"\n          labelId=\"export-format\"\n          value={state.format}\n          onChange={handleDataChange}\n        >\n          <MenuItem value=\"csv\">CSV</MenuItem>\n          <MenuItem value=\"json\">JSON</MenuItem>\n        </Select>\n      </FormControl>\n\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id=\"export-method\">Export Method</InputLabel>\n        <Select\n          name=\"method\"\n          labelId=\"export-method\"\n          value={state.method}\n          onChange={handleDataChange}\n        >\n          <MenuItem value=\"download\">Download</MenuItem>\n          <MenuItem value=\"email\">Email</MenuItem>\n        </Select>\n      </FormControl>\n\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Export Fields</span>\n      </h2>\n      <Typography>Select fields to export from the data set.</Typography>\n      {\n        state.fields.map(field => (\n          <FormControlLabel\n            key={field}\n            control={\n              <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\n            }\n            label={field}\n          />)\n        )\n      }\n\n      <Button onClick={exportData} className={classes.formControl} fullWidth>\n        Export\n      </Button>\n    </div>\n  )\n}\n\nexport default ExportTableData","import TableWidget from './table-widget'\nimport TableWidgetSettings from './table-widget-settings'\nexport { TableWidget, TableWidgetSettings }","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\nimport { ConnectionSettings } from '../helpers'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  h2: {\n    width: '100%',\n    textAlign: 'center',\n    borderBottom: '1px solid #000',\n    lineHeight: '0.1em',\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    fontFamily: 'Roboto',\n    fontSize: '13px',\n    color: \"#3F51B5\"\n  },\n  span: {\n    background: '#fff',\n    padding: '0 10px'\n  },\n  formControl: {\n    marginTop: \"15px\"\n  }\n}))\n\nconst TableWidgetSettingsPanel = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [connectionMethod, setConnectionMethod] = useState(!isAdding ? widget.config.connectionMethod : 'database')\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\n  const [title, setTitle] = useState(!isAdding ? widget.title : '')\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\n  const [primaryKey, setPrimaryKey] = useState(!isAdding ? widget.config.primaryKey : null)\n  const [isEditable, setIsEditable] = useState(isAdding ? false : widget.config.isEditable)\n  const [isDeletable, setIsDeletable] = useState(isAdding ? false : widget.config.isDeletable)\n  const [isAddable, setIsAddable] = useState(isAdding ? false : widget.config.isAddable)\n\n  const [url, setURL] = useState(isAdding ? '' : widget.config.url)\n  const [headers, setHeaders] = useState(isAdding ? {} : widget.config.headers || {})\n  const [method, setMethod] = useState(isAdding ? '' : widget.config.method)\n  const [body, setBody] = useState(isAdding ? {} : widget.config.body || {})\n  const [query, setQuery] = useState(isAdding ? {} : widget.config.query || {})\n\n  const saveConfigSettings = async () => {\n    try {\n      const data = {\n        dataSourceId: datasource,\n        title,\n        config: {\n          docId: doc,\n          fields,\n          type: 'simple',\n          func: 'find',\n          query: {},\n          isEditable,\n          isDeletable,\n          isAddable,\n          primaryKey,\n          connectionMethod,\n          url,\n          headers,\n          method,\n          body,\n          query\n        },\n        type: 'Table'\n      }\n      console.log(data)\n      if (isAdding) {\n        onWidgetAdd(data)\n      } else {\n        const update = await WidgetSettingsActions.updateWidgetSettings(widget.id, data)\n        handleSettingsClose(update)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <div>\n      <h2 className={classes.h2}>\n        <span className={classes.span}>Widget Properties</span>\n      </h2>\n      <FormControl fullWidth className={classes.formControl}>\n        <InputLabel id='title'>Title</InputLabel>\n        <Input value={title} onChange={event => { setTitle(event.target.value) }} />\n      </FormControl>\n      <div style={{ marginTop: 20 }}>\n        <FormControlLabel\n          control={\n            <Checkbox checked={isEditable} onChange={event => { setIsEditable(event.target.checked) }} />\n          }\n          label=\"Allow Edit?\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox checked={isDeletable} onChange={event => { setIsDeletable(event.target.checked) }} />\n          }\n          label=\"Allow Delete?\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox checked={isAddable} onChange={event => { setIsAddable(event.target.checked) }} />\n          }\n          label=\"Allow Add?\"\n        />\n      </div>\n\n      <ConnectionSettings\n        isAdding={isAdding}\n        connectionMethod={connectionMethod}\n        setConnectionMethod={setConnectionMethod}\n        setDoc={setDoc}\n        setDatasource={setDatasource}\n        setFields={setFields}\n        doc={doc}\n        datasource={datasource}\n        fields={fields}\n        primaryKey={primaryKey}\n        setPrimaryKey={setPrimaryKey}\n        url={url} setURL={setURL}\n        headers={headers} setHeaders={setHeaders}\n        method={method} setMethod={setMethod}\n        body={body} setBody={setBody}\n        query={query} setQuery={setQuery}\n      />\n\n      <Button fullWidth className={classes.formControl} onClick={saveConfigSettings}>{isAdding ? 'Add' : 'Save'}</Button>\n    </div>\n  )\n}\n\nexport default TableWidgetSettingsPanel","import { makeStyles } from '@material-ui/core/styles'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport AssessmentIcon from '@material-ui/icons/Assessment'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport TableWidgetSettingsPanel from './table-widget-settings-panel'\nimport { ListMeasureCondition } from '../helpers'\nimport Swal from 'sweetalert2'\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500,\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\"\n  },\n  panel: {\n    backgroundColor: \"#FFF\",\n    color: \"#000\"\n  }\n}))\n\nconst TableWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.list} role=\"presentation\">\n\n      <AppBar position=\"static\" className={classes.panel}>\n        <Tabs value={value} onChange={handleChange}>\n          <Tab icon={<SettingsIcon />} label=\"Widget Settings\" {...a11yProps(0)} />\n          <Tab icon={<AssessmentIcon />} label=\"Measure Conditions\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n\n      <TabPanel value={value} index={0}>\n        <TableWidgetSettingsPanel widget={widget} handleSettingsClose={handleSettingsClose} isAdding={isAdding} onWidgetAdd={onWidgetAdd} />\n      </TabPanel>\n\n      <TabPanel value={value} index={1}>\n        <ListMeasureCondition widget={widget} handleSettingsClose={handleSettingsClose} isAdding={isAdding} onWidgetAdd={onWidgetAdd} />\n      </TabPanel>\n\n    </div>\n  )\n}\n\nexport default TableWidgetSettings","import { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MaterialTable from 'material-table'\nimport Drawer from '@material-ui/core/Drawer'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport ShareIcon from '@material-ui/icons/Share'\nimport TableWidgetSettings from './table-widget-settings'\nimport ExportTableData from './export-table-data'\nimport { measureConditionResult } from '../../../helpers/measure-conditions'\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 500\n  },\n  widgetActions: {\n    display: 'flex',\n    backgroundColor: \"#3F51B5\",\n    borderTopRightRadius: \"5px\",\n    borderTopLeftRadius: \"5px\",\n  },\n  widgetTitle: {\n    flex: 1,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    paddingLeft: \"10px\"\n  },\n  actionButtons: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))\n\nconst TableWidget = ({ widgetId }) => {\n  const classes = useStyles()\n  const [widget, setWidget] = useState(null)\n  const [data, setData] = useState([])\n  const [isLoadingData, setIsLoadingData] = useState(false)\n  const [refresh, setRefresh] = useState(0)\n  const [menuState, setMenuState] = useState({ right: false, export: false })\n  const [measureConditions, setMeasureConditions] = useState([])\n  const [measureConditionsFields, setMeasureConditionsFields] = useState([])\n\n  useEffect(() => {\n    const getMeasureConditions = async () => {\n      try {\n        const $measureConditions = await WidgetSettingsActions.getWidgetSettingsMeasureConditions(widgetId)\n        setMeasureConditions($measureConditions)\n        setMeasureConditionsFields($measureConditions.map(condition => condition.field))\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getMeasureConditions()\n  }, [])\n\n  const getWidgetData = async () => {\n    try {\n      const $data = await WidgetSettingsActions.executeWidgetQuery(widgetId)\n      setData($data)\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const getWidget = async () => {\n    try {\n      const $widget = await WidgetSettingsActions.getWidgetSettingsById(widgetId)\n      setWidget($widget)\n      return $widget\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    getWidget()\n    getWidgetData()\n  }, [refresh])\n\n  const refreshData = async () => {\n    setIsLoadingData(true)\n    getWidget()\n    getWidgetData()\n    setIsLoadingData(false)\n  }\n\n  const handleSettingsClose = () => {\n    setRefresh(refresh + 1)\n    toggleDrawer('right', false)\n  }\n\n  const onRowAdd = async newData => {\n    try {\n      const $data = await WidgetSettingsActions.addWidgetSettingsDocument(widgetId, newData)\n      getWidgetData()\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const onRowUpdate = async (newData, oldData) => {\n    try {\n      const keyId = oldData[widget.config.primaryKey]\n      const $data = await WidgetSettingsActions.editWidgetSettingsDocument(widgetId, newData, keyId)\n      getWidgetData()\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const onRowDelete = async oldData => {\n    try {\n      const keyId = oldData[widget.config.primaryKey]\n      const $data = await WidgetSettingsActions.deleteWidgetSettingsDocument(widgetId, keyId)\n      getWidgetData()\n      return $data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const editable = () => {\n    const { isEditable, isDeletable, isAddable } = widget.config\n    const obj = {}\n    if (isEditable) obj.onRowUpdate = onRowUpdate\n    if (isDeletable) obj.onRowDelete = onRowDelete\n    if (isAddable) obj.onRowAdd = onRowAdd\n    return obj\n  }\n\n  const renderTable = () => {\n    return isLoadingData || !widget ? (<CircularProgress />) : (\n      <MaterialTable\n        columns={\n          widget.config.fields.map(field => ({\n            field,\n            title: field,\n            render: rowData => {\n              const doesHaveCondition = measureConditionsFields.includes(field)\n              if (doesHaveCondition) {\n                const condition = measureConditions.filter(c => c.field == field)[0]\n                const isConditionMet = measureConditionResult(condition, rowData[field])\n                return isConditionMet ? (\n                  <Typography style={{ backgroundColor: condition.color }}>{rowData[field]}</Typography>\n                ) : <Typography>{rowData[field]}</Typography>\n              } else {\n                return <Typography>{rowData[field]}</Typography>\n              }\n            }\n          }))\n        }\n        data={data}\n        title={widget.title || ''}\n        editable={editable()}\n      />\n    )\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  return (\n    <div>\n      <div className={classes.widgetActions}>\n        <div className={classes.widgetTitle}>\n          <Typography style={{ color: \"#FFF\" }}>{widget && widget.title ? widget.title : 'Widget Title'}</Typography>\n        </div>\n        <div className={classes.actionButtons}>\n          <IconButton onClick={toggleDrawer('export', true)}>\n            <ShareIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={toggleDrawer('right', true)}>\n            <SettingsIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n          <IconButton onClick={refreshData}>\n            <RefreshIcon style={{ color: \"#FFF\" }} fontSize=\"small\" />\n          </IconButton>\n        </div>\n      </div>\n      <div>\n        {renderTable()}\n      </div>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        <TableWidgetSettings widget={widget} handleSettingsClose={handleSettingsClose} />\n      </Drawer>\n      <Drawer anchor=\"right\" open={menuState.export} onClose={toggleDrawer('export', false)}>\n        <ExportTableData widget={widget} data={data} />\n      </Drawer>\n    </div>\n  )\n}\n\nexport default TableWidget","import Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ButtonBase from '@material-ui/core/ButtonBase'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    cursor: 'pointer',\n    outline: 'none'\n  },\n  card: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center',\n    flexDirection: 'column',\n    paddingTop: 15,\n    paddingBottom: 15,\n  }\n}))\n\nconst TableWidget = ({ title, widget, icon, onWidgetClick, addPredefinedWidget }) => {\n  const classes = useStyles()\n\n  return (\n    <ButtonBase className={classes.root} onClick={widget ? addPredefinedWidget.bind(this, widget) : onWidgetClick.bind(this, title)}>\n      <Card className={classes.card}>\n        {icon}\n        <Typography style={{ marginTop: 10 }}>{widget ? widget.title : title}</Typography>\n      </Card>\n    </ButtonBase>\n  )\n}\n\nexport default TableWidget","const CSS_COLOR_NAMES = [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"Black\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkBlue\",\n  \"DarkCyan\",\n  \"DarkGoldenRod\",\n  \"DarkGray\",\n  \"DarkGrey\",\n  \"DarkGreen\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"DarkOrange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkSlateGrey\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DimGrey\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"GoldenRod\",\n  \"Gray\",\n  \"Grey\",\n  \"Green\",\n  \"GreenYellow\",\n  \"HoneyDew\",\n  \"HotPink\",\n  \"IndianRed\",\n  \"Indigo\",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenRodYellow\",\n  \"LightGray\",\n  \"LightGrey\",\n  \"LightGreen\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSlateGrey\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquaMarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenRod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"RebeccaPurple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"SeaShell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"SlateGrey\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"White\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\",\n]\n\nexport default CSS_COLOR_NAMES","import {\n  TableWidget, TableWidgetSettings,\n  LineChartWidget, LineChartWidgetSettings,\n  PieChartWidget, PieChartWidgetSettings,\n  DonutChartWidget, DonutChartWidgetSettings,\n  BarChartWidget, BarChartWidgetSettings,\n  AreaChartWidget, AreaChartWidgetSettings,\n  AutoCompleteWidget, AutoCompleteWidgetSettings,\n  ButtonWidget, ButtonWidgetSettings,\n  CheckboxWidget, CheckboxWidgetSettings,\n  DateTimeWidget, DateTimeWidgetSettings,\n  FileWidget, FileWidgetSettings,\n  NumberWidget, NumberWidgetSettings,\n  PasswordWidget, PasswordWidgetSettings,\n  RadioWidget, RadioWidgetSettings,\n  SelectWidget, SelectWidgetSettings,\n  TextAreaWidget, TextAreaWidgetSettings,\n  TextFieldWidget, TextFieldWidgetSettings,\n  AccordionWidget, AccordionWidgetSettings,\n  DataGridWidget, DataGridWidgetSettings,\n  DivWidget, DivWidgetSettings,\n  ImageWidget, ImageWidgetSettings,\n  ListWidget, ListWidgetSettings,\n  ParagraphWidget, ParagraphWidgetSettings,\n  ProgressBarWidget, ProgressBarWidgetSettings,\n  SpanWidget, SpanWidgetSettings,\n  TabsWidget, TabsWidgetSettings,\n  FormGroupWidget, FormGroupWidgetSettings\n} from '../components/widgets'\n\nconst decideWidgetSettings = (addType, onWidgetAdd) => {\n  switch (addType) {\n    case 'Table':\n      return <TableWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Line Chart':\n      return <LineChartWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Bar Chart':\n      return <BarChartWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Pie Chart':\n      return <PieChartWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Donut Chart':\n      return <DonutChartWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Area Chart':\n      return <AreaChartWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Auto Complete':\n      return <AutoCompleteWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Button':\n      return <ButtonWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Checkbox':\n      return <CheckboxWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Date Time':\n      return <DateTimeWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'File':\n      return <FileWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Number':\n      return <NumberWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Password':\n      return <PasswordWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Radio':\n      return <RadioWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Select':\n      return <SelectWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Text Area':\n      return <TextAreaWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Text Field':\n      return <TextFieldWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Accordion':\n      return <AccordionWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Data Grid':\n      return <DataGridWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Div':\n      return <DivWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Image':\n      return <ImageWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'List':\n      return <ListWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Paragraph':\n      return <ParagraphWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Progress Bar':\n      return <ProgressBarWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Span':\n      return <SpanWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Tabs':\n      return <TabsWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    case 'Form Group':\n      return <FormGroupWidgetSettings isAdding={true} onWidgetAdd={onWidgetAdd} />\n    default:\n      return <div></div>\n  }\n}\n\nconst decideWidget = (widget) => {\n  switch (widget.type) {\n    case 'Table':\n      return <TableWidget widgetId={widget.id} />\n    case 'Line Chart':\n      return <LineChartWidget widgetId={widget.id} />\n    case 'Bar Chart':\n      return <BarChartWidget widgetId={widget.id} />\n    case 'Pie Chart':\n      return <PieChartWidget widgetId={widget.id} />\n    case 'Donut Chart':\n      return <DonutChartWidget widgetId={widget.id} />\n    case 'Area Chart':\n      return <AreaChartWidget widgetId={widget.id} />\n    case 'TextField':\n      return <TextFieldWidget widgetId={widget.id} />\n    case 'Auto Complete':\n      return <AutoCompleteWidget widgetId={widget.id} />\n    case 'Button':\n      return <ButtonWidget widgetId={widget.id} />\n    case 'Checkbox':\n      return <CheckboxWidget widgetId={widget.id} />\n    case 'Date Time':\n      return <DateTimeWidget widgetId={widget.id} />\n    case 'File':\n      return <FileWidget widgetId={widget.id} />\n    case 'Number':\n      return <NumberWidget widgetId={widget.id} />\n    case 'Password':\n      return <PasswordWidget widgetId={widget.id} />\n    case 'Radio':\n      return <RadioWidget widgetId={widget.id} />\n    case 'Select':\n      return <SelectWidget widgetId={widget.id} />\n    case 'Text Area':\n      return <TextAreaWidget widgetId={widget.id} />\n    case 'Text Field':\n      return <TextFieldWidget widgetId={widget.id} />\n    case 'Accordion':\n      return <AccordionWidget widgetId={widget.id} />\n    case 'Data Grid':\n      return <DataGridWidget widgetId={widget.id} />\n    case 'Div':\n      return <DivWidget widgetId={widget.id} />\n    case 'Image':\n      return <ImageWidget widgetId={widget.id} />\n    case 'List':\n      return <ListWidget widgetId={widget.id} />\n    case 'Paragraph':\n      return <ParagraphWidget widgetId={widget.id} />\n    case 'Progress Bar':\n      return <ProgressBarWidget widgetId={widget.id} />\n    case 'Span':\n      return <SpanWidget widgetId={widget.id} />\n    case 'Tabs':\n      return <TabsWidget widgetId={widget.id} />\n    case 'Form Group':\n      return <FormGroupWidget widgetId={widget.id} />\n  }\n}\n\nexport {\n  decideWidgetSettings,\n  decideWidget\n}","const conditionCases = [\n  { title: 'equals', friendlyName: 'Equals' },\n  { title: 'does_not_equal', friendlyName: 'Does Not Equal' },\n  { title: 'is_less_than', friendlyName: 'Is Less Than' },\n  { title: 'is_greater_than', friendlyName: 'Is Greater Than' },\n  { title: 'is_between', friendlyName: 'Is Between' },\n  { title: 'is_not_between', friendlyName: 'Is Not Between' }\n]\n\nconst measureConditionResult = (measureCondition, value) => {\n  const { expression, minValue, maxValue } = measureCondition\n  switch (expression) {\n    case 'equals':\n      return value == minValue ? true : false\n    case 'does_not_equal':\n      return value != minValue ? true : false\n    case 'is_less_than':\n      return value < minValue ? true : false\n    case 'is_greater_than':\n      return value > minValue ? true : false\n    case 'is_between':\n      return value > minValue && value < maxValue ? true : false\n    case 'is_not_between':\n      return value < minValue || value > maxValue ? true : false\n    default:\n      return false\n  }\n}\n\nexport {\n  measureConditionResult,\n  conditionCases\n}","import { useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GridLayout from 'react-grid-layout'\nimport IconButton from '@material-ui/core/IconButton'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Typography from '@material-ui/core/Typography'\nimport ArrowLeft from '@material-ui/icons/ArrowLeft'\nimport SaveIcon from '@material-ui/icons/Save'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu'\nimport DashboardSettings from '../../../components/dashboards/settings/dashboard-settings'\nimport { useRouter } from 'next/router'\nimport { decideWidgetSettings, decideWidget } from '../../../helpers/decide-widgets'\n\nconst useStyles = makeStyles((theme) => ({\n  list: {\n    width: 500\n  },\n  fullList: {\n    width: 'auto'\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  }\n}))\n\nconst EditDashboard = () => {\n  const classes = useStyles()\n  const router = useRouter()\n  const [id, setId] = useState(router.query.id)\n  const [menuState, setMenuState] = useState({ right: false, addWidget: false, settings: false })\n  const [layout, setLayout] = useState([])\n  const [addType, setAddType] = useState(null)\n  const [WidgetSettings, setWidgetSettings] = useState([])\n  const [SubDashboards, setSubDashboards] = useState([])\n  const [refresh, setRefresh] = useState(0)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const getProps = async () => {\n      try {\n        setIsLoading(true)\n        const dashboard = await DashboardActions.getDashboardById(id)\n        if (!dashboard.isSub) {\n          const $SubDashboards = await DashboardActions.getSubDashboards({ id })\n          setSubDashboards($SubDashboards)\n        }\n        const $WidgetSettings = await DashboardActions.getWidgetSettings({ id })\n        setLayout($WidgetSettings)\n        setWidgetSettings($WidgetSettings)\n        setIsLoading(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getProps()\n  }, [id, refresh])\n\n  const onLayoutChange = async ($event) => {\n    try {\n      const layouts = layout.map(item => {\n        const $eventItem = $event.filter($item => $item.i == item.layout.i)[0]\n        return { ...item, layout: $eventItem }\n      })\n      await Promise.all(layouts.map(item => WidgetSettingsActions.updateWidgetSettings(item.id, item)))\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const addPredefinedWidget = async (widget, _) => {\n    try {\n      const $widget = { ...widget }\n      delete $widget.id; delete $widget.icon\n      $widget.layout.i = uuidv4()\n      const saveWidget = await WidgetSettingsActions.createWidgetSettings($widget)\n      await DashboardActions.addWidgetToDashboard(id, saveWidget.id)\n      setLayout([...layout, { layout: $widget.layout, type: $widget.type }])\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const onWidgetAdd = async (config, isFormControl = false, widgetSettingsId = null) => {\n    try {\n      const layoutItem = {\n        layout: { i: uuidv4(), x: 0, y: 0, w: 6, h: 11, maxW: 16, isDraggable: true, isResizable: true },\n        ...config\n      }\n      if (widgetSettingsId) {\n        delete layoutItem.layout\n        setIsLoading(true)\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem)\n        const linkWidget = await WidgetSettingsActions.createSubWidget(widgetSettingsId, saveWidget.id)\n        setIsLoading(false)\n      } else {\n        setIsLoading(true)\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem)\n        const linkWidget = await DashboardActions.addWidgetToDashboard(id, saveWidget.id)\n        layoutItem.id = saveWidget.id\n        setLayout([...layout, layoutItem])\n        setIsLoading(false)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const addWidget = async (type, _) => {\n    setAddType(type)\n    setMenuState({ ...menuState, addWidget: true, right: false })\n  }\n\n  const sideList = () => (\n    <div className={classes.list} role=\"presentation\">\n      <WidgetSidemenu onWidgetClick={addWidget} addPredefinedWidget={addPredefinedWidget} widgetSettings={Object.values(WidgetSettings)} />\n    </div>\n  )\n\n  const renderWidgets = () => layout.map((item, i) => (\n    <div key={item.layout.i}>\n      {decideWidget(item)}\n    </div>\n  ))\n\n  return (\n    <div>\n      <Backdrop className={classes.backdrop} open={isLoading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        {sideList()}\n      </Drawer>\n\n      <Drawer anchor=\"right\" open={menuState.addWidget} onClose={toggleDrawer('addWidget', false)}>\n        {decideWidgetSettings(addType, onWidgetAdd)}\n      </Drawer>\n\n      <Drawer anchor=\"right\" open={menuState.settings} onClose={toggleDrawer('settings', false)}>\n        <DashboardSettings id={id} refresh={refresh} setRefresh={setRefresh} />\n      </Drawer>\n\n      <Card style={{ display: 'flex', flexDirection: 'row' }}>\n        <IconButton onClick={() => { router.back() }} aria-label=\"back\" size=\"medium\" style={{ outline: 'none' }}>\n          <ArrowLeft fontSize=\"default\" />\n        </IconButton>\n        <div style={{ display: 'flex', flex: 1, overflowX: 'scroll', alignItems: 'center' }}>\n          <Button onClick={() => { setId(router.query.id) }} style={{ marginLeft: 10 }}>Main</Button>\n          {\n            SubDashboards.map(subDashboard => (\n              <div key={subDashboard.subDashboardId}>\n                <Button\n                  onClick={() => {\n                    setId(subDashboard.subDashboardId)\n                  }}\n                  style={{ marginLeft: 10 }}>\n                  <Typography noWrap style={{ fontWeight: 500, fontSize: '0.875rem', color: 'rgba(0, 0, 0, 0.87)' }}>\n                    {subDashboard.subDashboard.title}\n                  </Typography>\n                </Button>\n              </div>\n            ))\n          }\n        </div>\n        <div style={{ justifySelf: 'flex-end', display: 'flex', flex: 1, justifyContent: 'flex-end', paddingRight: '10px' }}>\n          <Button style={{ outline: 'none' }} size=\"small\" startIcon={<SaveIcon />}>\n            Save\n          </Button>\n          <Button style={{ marginLeft: '10px', outline: 'none' }} size=\"small\" onClick={toggleDrawer('right', true)} startIcon={<DashboardIcon />}>\n            Widgets\n          </Button>\n          <Button style={{ marginLeft: '10px', outline: 'none' }} size=\"small\" onClick={toggleDrawer('settings', true)} startIcon={<SettingsIcon />}>\n            Settings\n          </Button>\n        </div>\n      </Card>\n\n      <div style={{ paddingBottom: '15px' }}>\n        <GridLayout className=\"layout\" cols={16} rowHeight={30} width={1920} layout={layout.map(item => item.layout)} onLayoutChange={onLayoutChange}>\n          {renderWidgets()}\n        </GridLayout>\n      </div>\n    </div>\n  )\n};\n\n// EditDashboard.getInitialProps = async (req) => {\n//   const Authorization = Cookies(req).id\n//   const { id } = req.query\n//   const WidgetSettings = await DashboardActions.getWidgetSettings({ Authorization, id })\n//   const SubDashboards = await DashboardActions.getSubDashboards({ Authorization, id })\n//   return { WidgetSettings, SubDashboards }\n// }\n\nexport default EditDashboard;","module.exports = require(\"@date-io/date-fns\");","module.exports = require(\"@devexpress/dx-react-chart\");","module.exports = require(\"@devexpress/dx-react-chart-material-ui\");","module.exports = require(\"@material-ui/core\");","module.exports = require(\"@material-ui/core/AppBar\");","module.exports = require(\"@material-ui/core/Backdrop\");","module.exports = require(\"@material-ui/core/Box\");","module.exports = require(\"@material-ui/core/Button\");","module.exports = require(\"@material-ui/core/ButtonBase\");","module.exports = require(\"@material-ui/core/Card\");","module.exports = require(\"@material-ui/core/CardActions\");","module.exports = require(\"@material-ui/core/CardContent\");","module.exports = require(\"@material-ui/core/CardHeader\");","module.exports = require(\"@material-ui/core/Checkbox\");","module.exports = require(\"@material-ui/core/CircularProgress\");","module.exports = require(\"@material-ui/core/Drawer\");","module.exports = require(\"@material-ui/core/ExpansionPanel\");","module.exports = require(\"@material-ui/core/ExpansionPanelDetails\");","module.exports = require(\"@material-ui/core/ExpansionPanelSummary\");","module.exports = require(\"@material-ui/core/FormControl\");","module.exports = require(\"@material-ui/core/FormControlLabel\");","module.exports = require(\"@material-ui/core/FormGroup\");","module.exports = require(\"@material-ui/core/FormLabel\");","module.exports = require(\"@material-ui/core/Grid\");","module.exports = require(\"@material-ui/core/IconButton\");","module.exports = require(\"@material-ui/core/Input\");","module.exports = require(\"@material-ui/core/InputLabel\");","module.exports = require(\"@material-ui/core/MenuItem\");","module.exports = require(\"@material-ui/core/Paper\");","module.exports = require(\"@material-ui/core/Radio\");","module.exports = require(\"@material-ui/core/RadioGroup\");","module.exports = require(\"@material-ui/core/Select\");","module.exports = require(\"@material-ui/core/Tab\");","module.exports = require(\"@material-ui/core/Tabs\");","module.exports = require(\"@material-ui/core/TextField\");","module.exports = require(\"@material-ui/core/Typography\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"@material-ui/icons/ArrowDownward\");","module.exports = require(\"@material-ui/icons/ArrowLeft\");","module.exports = require(\"@material-ui/icons/ArrowUpward\");","module.exports = require(\"@material-ui/icons/Assessment\");","module.exports = require(\"@material-ui/icons/Autorenew\");","module.exports = require(\"@material-ui/icons/BarChart\");","module.exports = require(\"@material-ui/icons/BubbleChart\");","module.exports = require(\"@material-ui/icons/Cancel\");","module.exports = require(\"@material-ui/icons/CheckBox\");","module.exports = require(\"@material-ui/icons/Dashboard\");","module.exports = require(\"@material-ui/icons/DateRange\");","module.exports = require(\"@material-ui/icons/Delete\");","module.exports = require(\"@material-ui/icons/Dialpad\");","module.exports = require(\"@material-ui/icons/DonutLarge\");","module.exports = require(\"@material-ui/icons/Edit\");","module.exports = require(\"@material-ui/icons/ExpandMore\");","module.exports = require(\"@material-ui/icons/FileCopy\");","module.exports = require(\"@material-ui/icons/GridOn\");","module.exports = require(\"@material-ui/icons/Image\");","module.exports = require(\"@material-ui/icons/List\");","module.exports = require(\"@material-ui/icons/ListAlt\");","module.exports = require(\"@material-ui/icons/Lock\");","module.exports = require(\"@material-ui/icons/PieChart\");","module.exports = require(\"@material-ui/icons/RadioButtonChecked\");","module.exports = require(\"@material-ui/icons/Receipt\");","module.exports = require(\"@material-ui/icons/Refresh\");","module.exports = require(\"@material-ui/icons/Reorder\");","module.exports = require(\"@material-ui/icons/Save\");","module.exports = require(\"@material-ui/icons/SelectAll\");","module.exports = require(\"@material-ui/icons/Settings\");","module.exports = require(\"@material-ui/icons/Share\");","module.exports = require(\"@material-ui/icons/Subject\");","module.exports = require(\"@material-ui/icons/TableChart\");","module.exports = require(\"@material-ui/icons/TextFields\");","module.exports = require(\"@material-ui/icons/TextFormat\");","module.exports = require(\"@material-ui/icons/TextRotationNone\");","module.exports = require(\"@material-ui/icons/Timeline\");","module.exports = require(\"@material-ui/icons/Title\");","module.exports = require(\"@material-ui/icons/TouchApp\");","module.exports = require(\"@material-ui/icons/ViewList\");","module.exports = require(\"@material-ui/icons/VisibilityOff\");","module.exports = require(\"@material-ui/lab/Autocomplete\");","module.exports = require(\"@material-ui/pickers\");","module.exports = require(\"axios\");","module.exports = require(\"d3-scale\");","module.exports = require(\"js-cookie\");","module.exports = require(\"material-table\");","module.exports = require(\"next/config\");","module.exports = require(\"next/router\");","module.exports = require(\"prismjs/components/prism-clike\");","module.exports = require(\"prismjs/components/prism-core\");","module.exports = require(\"prismjs/components/prism-javascript\");","module.exports = require(\"react\");","module.exports = require(\"react-grid-layout\");","module.exports = require(\"react-simple-code-editor\");","module.exports = require(\"sweetalert2\");","module.exports = require(\"uuid\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;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AAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AATA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAjBA;AACA;AAuzIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtjBA;AACA;AAuBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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AAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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AA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AACA;AAMA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AA2BA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1LA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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A;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAZA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAhBA;AAkaA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;ACzHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AApBA;AAsBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAjBA;AACA;AAuBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACpCA;AAAA;AAuJA;;;;;;;;;;;;;;;;;;;;;ACvxxDA;AA0DA;AACA;;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAdA;AAgBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AClsourceRoot":""}