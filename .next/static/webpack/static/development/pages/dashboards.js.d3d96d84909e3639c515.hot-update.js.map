{"version":3,"file":"static/webpack/static/development/pages/dashboards.js.d3d96d84909e3639c515.hot-update.js","sources":["webpack:///./components/dashboards/create-dashboard.jsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport DatasourceActions from '../../actions/datasource.actions'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '25px'\n  },\n  cardBody: {\n    padding: '10px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    backgroundColor: '#3F51B5',\n    padding: '3px 3px 3px 6px',\n    color: '#FFF',\n    fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"]\n  },\n  actionButtons: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}))\n\nconst getSteps = () => ['Dashboard Settings', 'Datasource Settings', 'Add Collaborators', 'Confirmation']\n\nconst CreateDashboard = () => {\n  const classes = useStyles()\n  const [state, setState] = useState({\n    title: '',\n    description: '',\n    datasourceId: '',\n    collaborators: []\n  })\n  const [activeStep, setActiveStep] = useState(0)\n  const [datasources, setDatasources] = useState([])\n  const [skipped, setSkipped] = useState(new Set())\n  const steps = getSteps()\n\n  useEffect(() => {\n    const getDataSources = async () => {\n      try {\n        const data = await DatasourceActions.getDatasources({})\n        console.log(data)\n        setDatasources(data)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getDataSources()\n  }, [])\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    console.log(name, value)\n    setState({ ...state, [name]: value })\n  }\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return (\n          <FormGroup row style={{ marginBottom: 15 }}>\n            <TextField onChange={handleChange} fullWidth label=\"Title\" type='text' name='title' />\n            <TextField onChange={handleChange} fullWidth label=\"Description\" multiline={true} type='text' name='description' />\n          </FormGroup>\n        );\n      case 1:\n        return (\n          <FormGroup row style={{ marginBottom: 15 }}>\n            <InputLabel id='datasource-label'>Default DataSource</InputLabel>\n            <Select value={state.datasourceId} onChange={handleChange} name='datasourceId' fullWidth labelId='datasource-label'>\n              {datasources.map(datasource => (\n                <MenuItem value={datasource.id}>{datasource.title}</MenuItem>\n              ))}\n            </Select>\n          </FormGroup>\n        );\n      case 2:\n        return 'Allow people to help you build your dashboard!';\n      case 3:\n        return 'Confirm your data';\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  const isStepOptional = step => step === 2\n  const isStepSkipped = step => skipped.has(step)\n  const handleNext = () => {\n    let newSkipped = skipped\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values())\n      newSkipped.delete(activeStep)\n    }\n    setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    setSkipped(newSkipped)\n  }\n  const handleBack = () => { setActiveStep((prevActiveStep) => prevActiveStep - 1) }\n  const handleReset = () => { setActiveStep(0) }\n\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.cardTitle}>Create new dashboard</div>\n      <div className={classes.cardBody}>\n        <div className={classes.root}>\n          <Stepper activeStep={activeStep}>\n            {steps.map((label, index) => {\n              const stepProps = {};\n              const labelProps = {};\n              if (isStepOptional(index)) {\n                labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n              }\n              if (isStepSkipped(index)) {\n                stepProps.completed = false;\n              }\n              return (\n                <Step key={label} {...stepProps}>\n                  <StepLabel {...labelProps}>{label}</StepLabel>\n                </Step>\n              );\n            })}\n          </Stepper>\n          <div>\n            {\n              activeStep === steps.length ?\n                (\n                  <div>\n                    <Typography className={classes.instructions}>\n                      All steps completed - you&apos;re finished\n                    </Typography>\n                    <div className={classes.actionButtons}>\n                      <Button onClick={handleReset} className={classes.button}>\n                        Reset\n                     </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                    <div className={classes.actionButtons}>\n                      <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                        Back\n                      </Button>\n\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleNext}\n                        className={classes.button}\n                      >\n                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                      </Button>\n                    </div>\n                  </div>\n                )\n            }\n          </div>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default CreateDashboard"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAdA;AAAA;AACA;AAmxBA;AA0BA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;;;;A","sourceRoot":""}