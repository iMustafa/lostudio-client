{"version":3,"file":"static/webpack/static/development/pages/dashboards.js.4dadbfb6070ee642dc4c.hot-update.js","sources":["webpack:///./actions/dashboard.actions.ts"],"sourcesContent":["import axios from \"axios\";\nimport config from \"next/config\";\nimport Cookie from \"js-cookie\";\nimport User from \"../types/users.types\";\nimport Dashboard from \"../types/dashboard.types\";\nimport Datasource from \"../types/datasource.types\";\nimport Widget from \"../types/widget.types\";\nimport WidgetSettings from \"../types/widgetSettings.type\";\n\nconst { API_URL } = config().publicRuntimeConfig;\n\nexport default class DashboardActions {\n  public static async createDashboard({\n    Authorization,\n    dashboard,\n  }: {\n    dashboard: Dashboard;\n    Authorization?: string;\n  }): Promise<Dashboard> {\n    return axios\n      .post(`${API_URL}/Dashboards`, dashboard, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getDashboards({\n    Authorization,\n    query,\n  }: {\n    Authorization?: string;\n    query?: any;\n  }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n        params: {\n          filter: { where: { or: [{ isSub: false }, { type: \"dashboard\" }] } },\n        },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async getWebpages({\n    Authorization,\n  }: {\n    Authorization?: string;\n  }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n        params: { filter: { where: { type: \"webpage\" } } },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async linkSubDashboard({\n    id,\n    subDashboardId,\n  }: {\n    id: string;\n    subDashboardId: string;\n  }): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/subDashboards`,\n        { dashboardId: id, subDashboardId },\n        { headers: { Authorization: Cookie.get(\"id\") } }\n      )\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async unLinkSubDashboard({\n    id,\n    subDashboardId,\n  }: {\n    id: string;\n    subDashboardId: string;\n  }): Promise<any> {\n    return axios\n      .delete(`${API_URL}/Dashboards/${id}/subDashboards/${subDashboardId}`, {\n        headers: { Authorization: Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async getSubDashboards({\n    Authorization,\n    id,\n  }: {\n    Authorization?: string;\n    id: string;\n  }): Promise<any> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/subDashboards`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n        params: { filter: { include: \"subDashboard\" } },\n      })\n      .then((res) => res.data)\n      .catch((err) => err);\n  }\n\n  public static async getDashboardById(id: string): Promise<Dashboard> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}`, {\n        headers: { Authorization: Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async updateDashboard(id: string, data): Promise<Dashboard> {\n    return axios\n      .patch(`${API_URL}/Dashboards/${id}`, data)\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async deleteDashboard(data: Datasource): Promise<Dashboard> {\n    return axios\n      .post(\"\", {})\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getWidgetSettings({\n    Authorization,\n    id,\n  }: {\n    Authorization?: string;\n    id: string;\n  }): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/widgetSettings`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getCollaborators({\n    Authorization,\n    id,\n  }: {\n    Authorization?: string;\n    id: string;\n  }): Promise<Array<User>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/collaborators`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async getCollaboratorations({\n    Authorization,\n  }: {\n    Authorization?: string;\n  }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards/collaborations`, {\n        headers: { Authorization: Authorization || Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async addCollaborator({\n    Authorization,\n    email,\n    id,\n    editor,\n    viewer,\n  }: {\n    Authorization?: string;\n    email: string;\n    id: string;\n    editor: boolean;\n    viewer: boolean;\n  }): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/dashboardRoleMappings`,\n        { email, editor, viewer },\n        { headers: { Authorization: Authorization || Cookie.get(\"id\") } }\n      )\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async addWidgetToDashboard(\n    id: string,\n    fk: string\n  ): Promise<Dashboard> {\n    return axios\n      .put(\n        `${API_URL}/Dashboards/${id}/widgetSettings/rel/${fk}`,\n        { dashboardId: id, widgetSettingsId: fk },\n        { headers: { Authorization: Cookie.get(\"id\") } }\n      )\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async createWidgetInDashboard(\n    id: string,\n    widgetData: any\n  ): Promise<Dashboard> {\n    return axios\n      .post(`${API_URL}/Dashboards/${id}/widgetSettings`, widgetData, {\n        headers: { Authorization: Cookie.get(\"id\") },\n      })\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n\n  public static async removeWidgetFromDashboard(\n    data: Datasource\n  ): Promise<Dashboard> {\n    return axios\n      .post(\"\", {})\n      .then((res) => res.data)\n      .catch((err) => err.response);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AACA;;;;;;;;;;;;;AAEA;AAMA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAMA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAMA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAMA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAMA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAMA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAMA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAIA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAYA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAGA;;;;;AAGA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAGA;;;;;AAGA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAGA;;;;;AAEA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}