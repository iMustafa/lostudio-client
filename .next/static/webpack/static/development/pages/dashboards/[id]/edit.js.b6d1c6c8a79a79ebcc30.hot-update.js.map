{"version":3,"file":"static/webpack/static/development/pages/dashboards/[id]/edit.js.b6d1c6c8a79a79ebcc30.hot-update.js","sources":["webpack:///./actions/dashboard.actions.ts"],"sourcesContent":["import axios from 'axios'\nimport config from 'next/config'\nimport Cookie from 'js-cookie'\nimport User from '../types/users.types'\nimport Dashboard from '../types/dashboard.types'\nimport Datasource from '../types/datasource.types'\nimport Widget from '../types/widget.types'\nimport WidgetSettings from '../types/widgetSettings.type'\n\nconst { API_URL } = config().publicRuntimeConfig\n\nexport default class DashboardActions {\n\n  public static async createDashboard({ Authorization, dashboard }: { dashboard: Dashboard, Authorization?: string }): Promise<Dashboard> {\n    return axios\n      .post(`${API_URL}/Dashboards`, dashboard, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getDashboards({ Authorization, query }: { Authorization?: string, query?: any }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards`, { headers: { Authorization: Authorization || Cookie.get('id') }, params: { filter: { where: { isSub: false } } } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async linkSubDashboard({ id, subDashboardId }: { id: string, subDashboardId: string }): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/subDashboards`,\n        { dashboardId: id, subDashboardId },\n        { headers: { Authorization: Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async unLinkSubDashboard({ id, subDashboardId }: { id: string, subDashboardId: string }): Promise<any> {\n    return axios\n      .delete(`${API_URL}/Dashboards/${id}/subDashboards/${subDashboardId}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getSubDashboards({ Authorization, id }: { Authorization?: string, id: string }): Promise<any> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/subDashboards`, { headers: { Authorization: Authorization || Cookie.get('id') }, params: { filter: { include: 'subDashboard' } } })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n\n  public static async getDashboardById(id: string): Promise<Dashboard> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}`, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async updateDashboard(id: string, data): Promise<Dashboard> {\n    return axios\n      .patch(`${API_URL}/Dashboards/${id}`, data)\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async deleteDashboard(data: Datasource): Promise<Dashboard> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getWidgetSettings({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<WidgetSettings>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/widgetSettings`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getCollaborators({ Authorization, id }: { Authorization?: string, id: string }): Promise<Array<User>> {\n    return axios\n      .get(`${API_URL}/Dashboards/${id}/collaborators`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async getCollaboratorations({ Authorization }: { Authorization?: string }): Promise<Array<Dashboard>> {\n    return axios\n      .get(`${API_URL}/Dashboards/collaborations`, { headers: { Authorization: Authorization || Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async addCollaborator(\n    { Authorization, email, id, editor, viewer }: { Authorization?: string, email: string, id: string, editor: boolean, viewer: boolean }\n  ): Promise<any> {\n    return axios\n      .post(\n        `${API_URL}/Dashboards/${id}/dashboardRoleMappings`,\n        { email, editor, viewer },\n        { headers: { Authorization: Authorization || Cookie.get('id') } }\n      )\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async addWidgetToDashboard(id: string, fk: string): Promise<Dashboard> {\n    return axios\n      .put(`${API_URL}/Dashboards/${id}/widgetSettings/rel/${fk}`, { dashboardId: id, widgetSettingsId: fk }, { headers: { Authorization: Cookie.get('id') } })\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n  public static async removeWidgetFromDashboard(data: Datasource): Promise<Dashboard> {\n    return axios\n      .post('', {})\n      .then(res => res.data)\n      .catch(err => err.response)\n  }\n\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAGA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;;;;;AACA;AAEA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}