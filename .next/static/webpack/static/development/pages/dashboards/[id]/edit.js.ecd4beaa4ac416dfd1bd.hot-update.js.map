{"version":3,"file":"static/webpack/static\\development\\pages\\dashboards\\[id]\\edit.js.ecd4beaa4ac416dfd1bd.hot-update.js","sources":["webpack:///./components/widgets/form-controls/autocomplete/autocomplete-widget-settings.jsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Input from '@material-ui/core/Input'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport Select from '@material-ui/core/Select'\r\nimport DataSourceActions from '../../../../actions/datasource.actions'\r\nimport WidgetSettingsActions from '../../../../actions/widgetSettings.actions'\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  list: {\r\n    width: 500,\r\n    paddingLeft: \"15px\",\r\n    paddingRight: \"15px\",\r\n    paddingTop: \"15px\"\r\n  },\r\n  h2: {\r\n    width: '100%',\r\n    textAlign: 'center',\r\n    borderBottom: '1px solid #000',\r\n    lineHeight: '0.1em',\r\n    marginTop: \"20px\",\r\n    marginBottom: \"20px\",\r\n    fontFamily: 'Roboto',\r\n    fontSize: '13px',\r\n    color: \"#3F51B5\"\r\n  },\r\n  span: {\r\n    background: '#fff',\r\n    padding: '0 10px'\r\n  },\r\n  formControl: {\r\n    marginTop: \"15px\"\r\n  }\r\n}))\r\n\r\nconst AutoCompleteWidgetSettings = ({ widget, handleSettingsClose, isAdding, onWidgetAdd }) => {\r\n  const classes = useStyles()\r\n  const [datasources, setDatasources] = useState([])\r\n  const [datasource, setDatasource] = useState(!isAdding ? widget.dataSourceId : '')\r\n  const [docList, setDocList] = useState([])\r\n  const [doc, setDoc] = useState(!isAdding ? widget.config.docId : '')\r\n  const [fieldList, setFieldList] = useState([])\r\n  const [fields, setFields] = useState(!isAdding ? widget.config.fields : [])\r\n\r\n  const getDatasources = async () => {\r\n    try {\r\n      const $datasources = await DataSourceActions.getDatasources({})\r\n      if (!isAdding) {\r\n        const $docList = await DataSourceActions.getDocList(datasource)\r\n        const $fieldList = await DataSourceActions.getFieldList(datasource, doc)\r\n        setDocList($docList)\r\n        setFieldList($fieldList)\r\n      }\r\n      setDatasources($datasources)\r\n      return $datasources\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  const getDocList = async (id) => {\r\n    try {\r\n      setDatasource(id)\r\n      const $docList = await DataSourceActions.getDocList(id)\r\n      setDocList($docList)\r\n      return $docList\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  const getFieldList = async (id, docId) => {\r\n    try {\r\n      setDoc(docId)\r\n      const $fieldList = await DataSourceActions.getFieldList(id, docId)\r\n      setFieldList($fieldList)\r\n      return $fieldList\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  const handleDatasourceChange = async (event) => {\r\n    const { name, value } = event.target\r\n    setFieldList([])\r\n    setFields([])\r\n    await getDocList(value)\r\n  }\r\n\r\n  const handleDocChange = async (event) => {\r\n    const { name, value } = event.target\r\n    setFieldList([])\r\n    setFields([])\r\n    await getFieldList(datasource, value)\r\n  }\r\n\r\n  const handleFieldChange = name => event => {\r\n    const { checked } = event.target\r\n    checked ? setFields([...fields, name]) : setFields(fields.filter(field => field != name))\r\n  }\r\n\r\n  const renderFieldSettings = () => fieldList.length ? (<div>\r\n    <h2 className={classes.h2}>\r\n      <span className={classes.span}>Fields Settings</span>\r\n    </h2>\r\n\r\n    {fieldList.map(field => (<FormControlLabel\r\n      key={field}\r\n      control={\r\n        <Checkbox checked={fields.includes(field)} onChange={handleFieldChange(field)} value={field} />\r\n      }\r\n      label={field}\r\n    />))}\r\n  </div>) : <div></div>\r\n\r\n  return (\r\n    <div className={classes.list} role=\"presentation\">\r\n      <h2 className={classes.h2}>\r\n        <span className={classes.span}>Widget Info</span>\r\n      </h2>\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>Title</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <h2 className={classes.h2}>\r\n        <span className={classes.span}>Widget Properties</span>\r\n      </h2>\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>Label</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>ID</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>Name</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>Placeholder</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>Class name</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <InputLabel>Value</InputLabel>\r\n        <Input />\r\n      </FormControl>\r\n\r\n      <h2 className={classes.h2}>\r\n        <span className={classes.span}>Unique Properties</span>\r\n      </h2>\r\n      <FormGroup row>\r\n        <RadioGroup style={{ justifyContent: 'space-evenly', width: '100%', flexDirection: 'row' }}>\r\n          <FormControlLabel value=\"female\" control={<Radio />} label=\"From Data Source\" />\r\n          <FormControlLabel value=\"male\" control={<Radio />} label=\"Fixed Values\" />\r\n        </RadioGroup>\r\n      </FormGroup>\r\n      <div>\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <InputLabel id=\"data-source\">Data Source</InputLabel>\r\n          <Select\r\n            name=\"datasource\"\r\n            labelId=\"data-source\"\r\n            value={datasource}\r\n            onChange={handleDatasourceChange}\r\n          >\r\n            {datasources.map(item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth className={classes.formControl} disabled={datasource ? false : true}>\r\n          <InputLabel id=\"doc-list\">Table/Collection</InputLabel>\r\n          <Select\r\n            name=\"docList\"\r\n            labelId=\"doc-list\"\r\n            value={doc}\r\n            onChange={handleDocChange}\r\n          >\r\n            {docList.map(item => (<MenuItem key={item} value={item}>{item}</MenuItem>))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        {renderFieldSettings()}\r\n      </div>\r\n\r\n      <Button fullWidth color=\"primary\" className={classes.formControl}>Save</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AutoCompleteWidgetSettings"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAtBA;AAAA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AACA;AADA;AAKA;AACA;AACA;AACA;AARA;AASA;AATA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}