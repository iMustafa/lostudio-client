{"version":3,"file":"static/webpack/static/development/pages/dashboards/[id]/edit.js.4b002c52ef0a9a2348fb.hot-update.js","sources":["webpack:///./pages/dashboards//edit.jsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GridLayout from 'react-grid-layout'\nimport IconButton from '@material-ui/core/IconButton'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Typography from '@material-ui/core/Typography'\nimport ArrowLeft from '@material-ui/icons/ArrowLeft'\nimport SaveIcon from '@material-ui/icons/Save'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Drawer from '@material-ui/core/Drawer'\nimport DashboardActions from '../../../actions/dashboard.actions'\nimport WidgetSettingsActions from '../../../actions/widgetSettings.actions'\nimport WidgetSidemenu from '../../../components/dashboards/widgets-menu'\nimport DashboardSettings from '../../../components/dashboards/settings/dashboard-settings'\nimport { useRouter } from 'next/router'\nimport { decideWidgetSettings, decideWidget } from '../../../helpers/decide-widgets'\n\nconst useStyles = makeStyles((theme) => ({\n  list: {\n    width: 500\n  },\n  fullList: {\n    width: 'auto'\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  }\n}))\n\nconst EditDashboard = () => {\n  const classes = useStyles()\n  const router = useRouter()\n  const [id, setId] = useState(router.query.id)\n  const [menuState, setMenuState] = useState({ right: false, addWidget: false, settings: false })\n  const [layout, setLayout] = useState([])\n  const [addType, setAddType] = useState(null)\n  const [WidgetSettings, setWidgetSettings] = useState([])\n  const [SubDashboards, setSubDashboards] = useState([])\n  const [refresh, setRefresh] = useState(0)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const getProps = async () => {\n      try {\n        setIsLoading(true)\n        const dashboard = await DashboardActions.getDashboardById(id)\n        if (!dashboard.isSub) {\n          const $SubDashboards = await DashboardActions.getSubDashboards({ id })\n          setSubDashboards($SubDashboards)\n        }\n        const $WidgetSettings = await DashboardActions.getWidgetSettings({ id })\n        setLayout($WidgetSettings)\n        setWidgetSettings($WidgetSettings)\n        setIsLoading(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getProps()\n  }, [id, refresh])\n\n  const onLayoutChange = async ($event) => {\n    try {\n      const layouts = layout.map(item => {\n        const $eventItem = $event.filter($item => $item.i == item.layout.i)[0]\n        return { ...item, layout: $eventItem }\n      })\n      await Promise.all(layouts.map(item => WidgetSettingsActions.updateWidgetSettings(item.id, item)))\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift'))\n      return\n\n    setMenuState({ ...menuState, [side]: open })\n  }\n\n  const addPredefinedWidget = async (widget, _) => {\n    try {\n      const $widget = { ...widget }\n      delete $widget.id; delete $widget.icon\n      $widget.layout.i = uuidv4()\n      const saveWidget = await WidgetSettingsActions.createWidgetSettings($widget)\n      await DashboardActions.addWidgetToDashboard(id, saveWidget.id)\n      setLayout([...layout, { layout: $widget.layout, type: $widget.type }])\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const onWidgetAdd = async (config, isFormControl = false, widgetSettingsId = null) => {\n    try {\n      const layoutItem = {\n        layout: { i: uuidv4(), x: 0, y: 0, w: 6, h: 11, maxW: 16, isDraggable: true, isResizable: true },\n        ...config\n      }\n      if (widgetSettingsId) {\n        delete layoutItem.layout\n        setIsLoading(true)\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem)\n        const linkWidget = await WidgetSettingsActions.createSubWidget(widgetSettingsId, saveWidget.id)\n        setIsLoading(false)\n      } else {\n        setIsLoading(true)\n        const saveWidget = await WidgetSettingsActions.createWidgetSettings(layoutItem)\n        const linkWidget = await DashboardActions.addWidgetToDashboard(id, saveWidget.id)\n        layoutItem.id = saveWidget.id\n        setLayout([...layout, layoutItem])\n        setIsLoading(false)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const addWidget = async (type, _) => {\n    setAddType(type)\n    setMenuState({ ...menuState, addWidget: true, right: false })\n  }\n\n  const sideList = () => (\n    <div className={classes.list} role=\"presentation\">\n      <WidgetSidemenu onWidgetClick={addWidget} addPredefinedWidget={addPredefinedWidget} widgetSettings={Object.values(WidgetSettings)} />\n    </div>\n  )\n\n  const renderWidgets = () => layout.map((item, i) => (\n    <div key={item.layout.i}>\n      {decideWidget(item)}\n    </div>\n  ))\n\n  return (\n    <div>\n      <Backdrop className={classes.backdrop} open={isLoading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <Drawer anchor=\"right\" open={menuState.right} onClose={toggleDrawer('right', false)}>\n        {sideList()}\n      </Drawer>\n\n      <Drawer anchor=\"right\" open={menuState.addWidget} onClose={toggleDrawer('addWidget', false)}>\n        {decideWidgetSettings(addType, onWidgetAdd)}\n      </Drawer>\n\n      <Drawer anchor=\"right\" open={menuState.settings} onClose={toggleDrawer('settings', false)}>\n        <DashboardSettings id={id} refresh={refresh} setRefresh={setRefresh} />\n      </Drawer>\n\n      <Card style={{ display: 'flex', flexDirection: 'row' }}>\n        <IconButton onClick={() => { router.back() }} aria-label=\"back\" size=\"medium\" style={{ outline: 'none' }}>\n          <ArrowLeft fontSize=\"default\" />\n        </IconButton>\n        <div style={{ display: 'flex', flex: 1, overflowX: 'scroll', alignItems: 'center' }}>\n          <Button onClick={() => { setId(router.query.id) }} style={{ marginLeft: 10 }}>Main</Button>\n          {\n            SubDashboards.map(subDashboard => (\n              <div key={subDashboard.subDashboardId}>\n                <Button\n                  onClick={() => {\n                    setId(subDashboard.subDashboardId)\n                  }}\n                  style={{ marginLeft: 10 }}>\n                  <Typography noWrap style={{ fontWeight: 500, fontSize: '0.875rem', color: 'rgba(0, 0, 0, 0.87)' }}>\n                    {subDashboard.subDashboard.title}\n                  </Typography>\n                </Button>\n              </div>\n            ))\n          }\n        </div>\n        <div style={{ justifySelf: 'flex-end', display: 'flex', flex: 1, justifyContent: 'flex-end', paddingRight: '10px' }}>\n          <Button style={{ outline: 'none' }} size=\"small\" startIcon={<SaveIcon />}>\n            Save\n          </Button>\n          <Button style={{ marginLeft: '10px', outline: 'none' }} size=\"small\" onClick={toggleDrawer('right', true)} startIcon={<DashboardIcon />}>\n            Widgets\n          </Button>\n          <Button style={{ marginLeft: '10px', outline: 'none' }} size=\"small\" onClick={toggleDrawer('settings', true)} startIcon={<SettingsIcon />}>\n            Settings\n          </Button>\n        </div>\n      </Card>\n\n      <div style={{ paddingBottom: '15px' }}>\n        <GridLayout className=\"layout\" cols={16} rowHeight={30} width={1920} layout={layout.map(item => item.layout)} onLayoutChange={onLayoutChange}>\n          {renderWidgets()}\n        </GridLayout>\n      </div>\n    </div>\n  )\n};\n\n// EditDashboard.getInitialProps = async (req) => {\n//   const Authorization = Cookies(req).id\n//   const { id } = req.query\n//   const WidgetSettings = await DashboardActions.getWidgetSettings({ Authorization, id })\n//   const SubDashboards = await DashboardActions.getSubDashboards({ Authorization, id })\n//   return { WidgetSettings, SubDashboards }\n// }\n\nexport default EditDashboard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAAA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AACA;AANA;AAKA;AACA;AACA;AAPA;AAAA;AAAA;AAQA;AAAA;AACA;AATA;AAQA;AACA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeaA;AAbA;AAAA;AACA;AADA;AAcA;AAdA;AAAA;AACA;AADA;AAeA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwesourceRoot":""}