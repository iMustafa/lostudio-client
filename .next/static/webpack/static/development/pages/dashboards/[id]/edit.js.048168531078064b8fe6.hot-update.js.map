{"version":3,"file":"static/webpack/static/development/pages/dashboards/[id]/edit.js.048168531078064b8fe6.hot-update.js","sources":["webpack:///./components/dashboards/settings/sub-boards-settings.jsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DashboardActions from '../../../actions/dashboard.actions'\n\nconst SubDashboardSettings = ({ id, refresh, setRefresh }) => {\n  const [subDashboards, setSubDashboards] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [update, setUpdate] = useState(0)\n  const [isShowingAddFields, setIsShowingAddFields] = useState(false)\n  const [isAdding, setIsAdding] = useState(false)\n  const [state, setState] = useState({ title: '', description: '', isSub: true })\n\n  useEffect(() => {\n    const getSubDashboards = async () => {\n      try {\n        const $subDashBoards = await DashboardActions.getSubDashboards({ id })\n        setSubDashboards($subDashBoards)\n        setIsLoading(false)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    getSubDashboards()\n  }, [update])\n\n  const addNewDashboard = async () => {\n    try {\n      setIsAdding(true)\n      const subDashboard = await DashboardActions.createDashboard({ dashboard: state })\n      const linkDashboard = await DashboardActions.linkSubDashboard({ subDashboardId: subDashboard.id, id })\n      setUpdate(update + 1)\n      setIsShowingAddFields(false)\n      setIsAdding(false)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const deleteSubDashboard = async (subDashboardId) => {\n    try {\n      const subDashboard = await DashboardActions.unLinkSubDashboard({ id, subDashboardId })\n      setUpdate(update + 1)\n      setRefresh(refresh + 1)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n\n  const renderSubDashboardCard = subDashboard => (\n    <Card variant=\"outlined\" key={subDashboard.id} style={{ marginTop: 15 }}>\n      <CardHeader\n        title={subDashboard.subDashboard.title}\n        subheader={subDashboard.subDashboard.createdAt}\n      />\n      <CardContent>\n        <Typography>{subDashboard.subDashboard.description}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button onClick={() => { deleteSubDashboard(subDashboard.id) }}>Delete</Button>\n      </CardActions>\n    </Card>\n  )\n\n  return (\n    <div>\n      {\n        isShowingAddFields ? (\n          <Card variant=\"outlined\">\n\n            <CardContent>\n              <TextField label=\"Title\" fullWidth\n                onChange={event => { setState({ ...state, title: event.target.value }) }}\n              />\n\n              <TextField\n                style={{ marginTop: 10 }}\n                fullWidth\n                label=\"Description\"\n                multiline\n                rows={2}\n                rowsMax={4}\n                onChange={event => { setState({ ...state, description: event.target.value }) }}\n              />\n            </CardContent>\n\n            {\n              isAdding ? (\n                <CardActions>\n                  <CircularProgress />\n                </CardActions>\n              ) : (\n                  <CardActions>\n                    <Button onClick={addNewDashboard}>Add</Button>\n                    <Button onClick={() => { setIsShowingAddFields(false) }}>Cancel</Button>\n                  </CardActions>\n                )\n            }\n\n          </Card >\n        ) : (<Button fullWidth onClick={() => { setIsShowingAddFields(true) }}>Add New Page</Button>)\n      }\n      {\n        isLoading ? (\n          <div style={{ display: 'flex', justifyContent: 'center', marginTop: 15 }}>\n            <CircularProgress />\n          </div>) : subDashboards.map(subDashboard => (renderSubDashboardCard(subDashboard)))\n      }\n    </div >\n  )\n}\n\nexport default SubDashboardSettings"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AAAA;AANA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAHA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAGA;AAAA;AACA;AAJA;AAGA;AAHA;AAAA;AAIA;AAAA;AAAA;AACA;AALA;AAIA;AACA;AACA;AACA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAHA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}