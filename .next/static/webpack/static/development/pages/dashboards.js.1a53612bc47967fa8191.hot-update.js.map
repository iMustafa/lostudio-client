{"version":3,"file":"static/webpack/static/development/pages/dashboards.js.1a53612bc47967fa8191.hot-update.js","sources":["webpack:///./pages/dashboards/index.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { NextPage } from \"next\";\nimport Cookies from \"next-cookies\";\nimport DashboardActions from \"../../actions/dashboard.actions\";\nimport Dashboard from \"../../types/dashboard.types\";\nimport ListDashboards from \"../../components/dashboards/list-dashboards\";\nimport Grid from \"@material-ui/core/Grid\";\nimport SideMenu from \"../../components/SideMenu\";\n\nconst Dashboards: NextPage<{ Collaborations; Dashboards }> = ({\n  Collaborations,\n  Dashboards,\n}) => {\n  const [dashboards, setDashboards] = useState(Object.values(Dashboards));\n  const collaborations: Array<Dashboard> = Object.values(Collaborations);\n  const [refresh, setRefresh] = useState(0);\n\n  const reloadChanges = async () => {\n    try {\n      const getDashboards = await DashboardActions.getDashboards({});\n      setDashboards(getDashboards)\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <div className=\"container\" style={{ margin: \"25px auto 25px auto\" }}>\n          <ListDashboards\n            dashboardType=\"dashboard\"\n            dashboards={dashboards}\n            title=\"My Dashboards\"\n            type=\"personal\"\n            reloadChanges={reloadChanges}\n          ></ListDashboards>\n          <ListDashboards\n            dashboardType=\"dashboard\"\n            dashboards={collaborations}\n            title=\"My Collaborations\"\n            type=\"collaborations\"\n            reloadChanges={() => {}}\n          ></ListDashboards>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nDashboards.getInitialProps = async (\n  req\n): Promise<{\n  Collaborations: Array<Dashboard>;\n  Dashboards: Array<Dashboard>;\n}> => {\n  try {\n    const Authorization = Cookies(req).id;\n    const Dashboards = await DashboardActions.getDashboards({ Authorization });\n    const Collaborations = await DashboardActions.getCollaboratorations({\n      Authorization,\n    });\n    return { Collaborations, Dashboards };\n  } catch (e) {\n    return { Collaborations: [], Dashboards: [] };\n  }\n};\n\nexport default Dashboards;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAPA;AAAA;AAQA;AAAA;AACA;AATA;AAQA;AARA;AAAA;AAUA;AADA;AACA;AAVA;AASA;AATA;AAYA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;;;;A","sourceRoot":""}